1)translate sn_get_ch_q go
;*** Generated by TRANSLATE, verify before re-including (Debug:N, Optimize:N) ***
DROP PROGRAM sn_get_ch_q :dba GO
CREATE PROGRAM sn_get_ch_q :dba
 SET lvl_error = 0
 SET lvl_warning = 1
 SET lvl_audit = 2
 SET lvl_info = 3
 SET lvl_debug = 4
 SET log_to_reply = 1
 SET log_to_screen = 0
 SET log_msg = fillstring (100 ," " )
 DECLARE sn_log_message (log_level ,log_reply ,log_event ,log_mesg ) = null WITH protected
 SUBROUTINE  sn_log_message (log_level ,log_reply ,log_event ,log_mesg )
  SET sn_log_level = evaluate (log_level ,lvl_error ,"E" ,lvl_warning ,"W" ,lvl_audit ,"A" ,lvl_info
   ,"I" ,lvl_debug ,"D" ,"U" )
  IF ((log_reply = log_to_reply ) )
   SET num_event = size (reply->status_data.subeventstatus ,5 )
   IF ((num_event = 1 ) )
    IF ((trim (reply->status_data.subeventstatus[1 ].targetobjectname ) > "" ) )
     SET num_event = (num_event + 1 )
    ENDIF
   ELSE
    SET num_event = (num_event + 1 )
   ENDIF
   SET stat = alter (reply->status_data.subeventstatus ,num_event )
   SET reply->status_data.subeventstatus[num_event ].operationname = log_event
   SET reply->status_data.subeventstatus[num_event ].operationstatus = sn_log_level
   SET reply->status_data.subeventstatus[num_event ].targetobjectname = curprog
   SET reply->status_data.subeventstatus[num_event ].targetobjectvalue = log_mesg
  ELSE
   CALL echo ("-----------------" )
   CALL echo (build ("Event           :" ,log_event ) )
   CALL echo (build ("Status          :" ,sn_log_level ) )
   CALL echo (build ("Current Program :" ,curprog ) )
   CALL echo (build ("Message         :" ,log_mesg ) )
  ENDIF
 END ;Subroutine
 IF (NOT (validate (reply ,0 ) ) )
  RECORD reply (
    1 area_cd = f8
    1 refresh_dt_tm = dq8
    1 cases [* ]
      2 surg_case_id = f8
      2 surg_case_nbr_formatted = vc
      2 person_id = f8
      2 encntr_id = f8
      2 documents [* ]
        3 doc_type_cd = f8
        3 doc_type_disp = vc
        3 trans_types [* ]
          4 trans_type_mean = c12
          4 submitted_by_id = f8
          4 submitted_by_name = vc
          4 submitted_dt_tm = dq8
          4 hold_reason = vc
          4 hold_dt_tm = dq8
          4 hold_by_id = f8
          4 hold_by_name = vc
          4 blocked_ind = i2
          4 blocked_dt_tm = dq8
          4 recharges_ind = i2
          4 failure_dt_tm = dq8
          4 failure_cnt = i4
          4 delay_reason = vc
          4 updt_cnt = i4
          4 release_reason = vc
          4 blocked_reason_flag = i4
          4 release_dt_tm = dq8
          4 release_by_name = vc
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 DECLARE case_cnt = i4 WITH protected ,noconstant (0 )
 DECLARE doc_cnt = i4 WITH protected ,noconstant (0 )
 DECLARE trans_cnt = i4 WITH protected ,noconstant (0 )
 SET reply->status_data.status = "F"
 DECLARE org_security_ind = i2 WITH protected ,noconstant (0 )
 DECLARE encntr_secure_ind = i2 WITH protected ,noconstant (1 )
 DECLARE user_org_cnt = i4 WITH protected ,noconstant (0 )
 DECLARE org_ndx = i4 WITH protected ,noconstant (0 )
 SET reply->refresh_dt_tm = cnvtdatetime (curdate ,curtime3 )
 IF (validate (user_orgs ,0 ) )
  FREE SET user_orgs
 ENDIF
 RECORD user_orgs (
   1 user_id = f8
   1 orgs [* ]
     2 org_id = f8
     2 org_name = vc
 )
 DECLARE sec_org_reltn_enabled = i2 WITH protect ,noconstant (0 )
 DECLARE sec_org_info_name = c13 WITH protect ,constant ("SEC_ORG_RELTN" )
 DECLARE sec_org_info_domain = c8 WITH protect ,constant ("SECURITY" )
 DECLARE orgsecurityenabled () = i2
 SUBROUTINE  orgsecurityenabled (null )
  SET sec_org_reltn_enabled = 0
  SELECT INTO "nl:"
   d.info_number
   FROM (dm_info d )
   WHERE (d.info_name = sec_org_info_name )
   AND (d.info_domain = sec_org_info_domain )
   DETAIL
    sec_org_reltn_enabled = cnvtint (d.info_number )
   WITH nocounter
  ;end select
  RETURN (sec_org_reltn_enabled )
 END ;Subroutine
 DECLARE getcntorgsbyuser ((dummyvar = f8 ) ) = i4
 SUBROUTINE  getcntorgsbyuser (dummyvar )
  DECLARE org_idx = i4 WITH protect ,noconstant (0 )
  DECLARE int_count = i4 WITH protect ,noconstant (0 )
  SET user_orgs->user_id = reqinfo->updt_id
  IF ((reqinfo->updt_id > 0.0 ) )
   IF ((validate (_sacrtl_org_inc_ ,99999 ) = 99999 ) )
    DECLARE _sacrtl_org_inc_ = i2 WITH constant (1 )
    RECORD sac_org (
      1 organizations [* ]
        2 organization_id = f8
        2 confid_cd = f8
        2 confid_level = i4
    )
    EXECUTE secrtl
    EXECUTE sacrtl
    DECLARE orgcnt = i4 WITH protected ,noconstant (0 )
    DECLARE secstat = i2
    DECLARE logontype = i4 WITH protect ,noconstant (- (1 ) )
    DECLARE dynamic_org_ind = i4 WITH protect ,noconstant (- (1 ) )
    DECLARE dcur_trustid = f8 WITH protect ,noconstant (0.0 )
    DECLARE dynorg_enabled = i4 WITH constant (1 )
    DECLARE dynorg_disabled = i4 WITH constant (0 )
    DECLARE logontype_nhs = i4 WITH constant (1 )
    DECLARE logontype_legacy = i4 WITH constant (0 )
    DECLARE confid_cnt = i4 WITH protected ,noconstant (0 )
    RECORD confid_codes (
      1 list [* ]
        2 code_value = f8
        2 coll_seq = f8
    )
    CALL uar_secgetclientlogontype (logontype )
    CALL echo (build ("logontype:" ,logontype ) )
    IF ((logontype != logontype_nhs ) )
     SET dynamic_org_ind = dynorg_disabled
    ENDIF
    IF ((logontype = logontype_nhs ) )
     DECLARE getdynamicorgpref ((dtrustid = f8 ) ) = i4
     SUBROUTINE  getdynamicorgpref (dtrustid )
      DECLARE scur_trust = vc
      DECLARE pref_val = vc
      DECLARE is_enabled = i4 WITH constant (1 )
      DECLARE is_disabled = i4 WITH constant (0 )
      SET scur_trust = cnvtstring (dtrustid )
      SET scur_trust = concat (scur_trust ,".00" )
      IF (NOT (validate (pref_req ,0 ) ) )
       RECORD pref_req (
         1 write_ind = i2
         1 delete_ind = i2
         1 pref [* ]
           2 contexts [* ]
             3 context = vc
             3 context_id = vc
           2 section = vc
           2 section_id = vc
           2 subgroup = vc
           2 entries [* ]
             3 entry = vc
             3 values [* ]
               4 value = vc
       )
      ENDIF
      IF (NOT (validate (pref_rep ,0 ) ) )
       RECORD pref_rep (
         1 pref [* ]
           2 section = vc
           2 section_id = vc
           2 subgroup = vc
           2 entries [* ]
             3 pref_exists_ind = i2
             3 entry = vc
             3 values [* ]
               4 value = vc
         1 status_data
           2 status = c1
           2 subeventstatus [1 ]
             3 operationname = c25
             3 operationstatus = c1
             3 targetobjectname = c25
             3 targetobjectvalue = vc
       )
      ENDIF
      SET stat = alterlist (pref_req->pref ,1 )
      SET stat = alterlist (pref_req->pref[1 ].contexts ,2 )
      SET stat = alterlist (pref_req->pref[1 ].entries ,1 )
      SET pref_req->pref[1 ].contexts[1 ].context = "organization"
      SET pref_req->pref[1 ].contexts[1 ].context_id = scur_trust
      SET pref_req->pref[1 ].contexts[2 ].context = "default"
      SET pref_req->pref[1 ].contexts[2 ].context_id = "system"
      SET pref_req->pref[1 ].section = "workflow"
      SET pref_req->pref[1 ].section_id = "UK Trust Security"
      SET pref_req->pref[1 ].entries[1 ].entry = "dynamic organizations"
      EXECUTE ppr_preferences WITH replace ("REQUEST" ,"PREF_REQ" ) ,
      replace ("REPLY" ,"PREF_REP" )
      IF ((cnvtupper (pref_rep->pref[1 ].entries[1 ].values[1 ].value ) = "ENABLED" ) )
       RETURN (is_enabled )
      ELSE
       RETURN (is_disabled )
      ENDIF
     END ;Subroutine
     DECLARE hprop = i4 WITH protect ,noconstant (0 )
     DECLARE tmpstat = i2
     DECLARE spropname = vc
     DECLARE sroleprofile = vc
     SET hprop = uar_srvcreateproperty ()
     SET tmpstat = uar_secgetclientattributesext (5 ,hprop )
     SET spropname = uar_srvfirstproperty (hprop )
     SET sroleprofile = uar_srvgetpropertyptr (hprop ,nullterm (spropname ) )
     SELECT INTO "nl:"
      FROM (prsnl_org_reltn_type prt ),
       (prsnl_org_reltn por )
      PLAN (prt
       WHERE (prt.role_profile = sroleprofile )
       AND (prt.active_ind = 1 )
       AND (prt.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
       AND (prt.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
       JOIN (por
       WHERE (outerjoin (prt.organization_id ) = por.organization_id )
       AND (por.person_id = outerjoin (prt.prsnl_id ) )
       AND (por.active_ind = outerjoin (1 ) )
       AND (por.beg_effective_dt_tm <= outerjoin (cnvtdatetime (curdate ,curtime3 ) ) )
       AND (por.end_effective_dt_tm > outerjoin (cnvtdatetime (curdate ,curtime3 ) ) ) )
      ORDER BY por.prsnl_org_reltn_id
      DETAIL
       orgcnt = 1 ,
       secstat = alterlist (sac_org->organizations ,1 ) ,
       user_person_id = prt.prsnl_id ,
       sac_org->organizations[1 ].organization_id = prt.organization_id ,
       sac_org->organizations[1 ].confid_cd = por.confid_level_cd ,
       confid_cd = uar_get_collation_seq (por.confid_level_cd ) ,
       sac_org->organizations[1 ].confid_level =
       IF ((confid_cd > 0 ) ) confid_cd
       ELSE 0
       ENDIF
      WITH maxrec = 1
     ;end select
     SET dcur_trustid = sac_org->organizations[1 ].organization_id
     SET dynamic_org_ind = getdynamicorgpref (dcur_trustid )
     CALL uar_srvdestroyhandle (hprop )
    ENDIF
    IF ((dynamic_org_ind = dynorg_disabled ) )
     SET confid_cnt = 0
     SELECT INTO "NL:"
      c.code_value ,
      c.collation_seq
      FROM (code_value c )
      WHERE (c.code_set = 87 )
      DETAIL
       confid_cnt = (confid_cnt + 1 ) ,
       IF ((mod (confid_cnt ,10 ) = 1 ) ) secstat = alterlist (confid_codes->list ,(confid_cnt + 9 )
         )
       ENDIF
       ,confid_codes->list[confid_cnt ].code_value = c.code_value ,
       confid_codes->list[confid_cnt ].coll_seq = c.collation_seq
      WITH nocounter
     ;end select
     SET secstat = alterlist (confid_codes->list ,confid_cnt )
     SELECT DISTINCT INTO "nl:"
      FROM (prsnl_org_reltn por )
      WHERE (por.person_id = reqinfo->updt_id )
      AND (por.active_ind = 1 )
      AND (por.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
      AND (por.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
      HEAD REPORT
       IF ((orgcnt > 0 ) ) secstat = alterlist (sac_org->organizations ,100 )
       ENDIF
      DETAIL
       orgcnt = (orgcnt + 1 ) ,
       IF ((mod (orgcnt ,100 ) = 1 ) ) secstat = alterlist (sac_org->organizations ,(orgcnt + 99 ) )
       ENDIF
       ,sac_org->organizations[orgcnt ].organization_id = por.organization_id ,
       sac_org->organizations[orgcnt ].confid_cd = por.confid_level_cd
      FOOT REPORT
       secstat = alterlist (sac_org->organizations ,orgcnt )
      WITH nocounter
     ;end select
     SELECT INTO "NL:"
      FROM (dummyt d1 WITH seq = value (orgcnt ) ),
       (dummyt d2 WITH seq = value (confid_cnt ) )
      PLAN (d1 )
       JOIN (d2
       WHERE (sac_org->organizations[d1.seq ].confid_cd = confid_codes->list[d2.seq ].code_value ) )
      DETAIL
       sac_org->organizations[d1.seq ].confid_level = confid_codes->list[d2.seq ].coll_seq
      WITH nocounter
     ;end select
    ELSEIF ((dynamic_org_ind = dynorg_enabled ) )
     DECLARE nhstrustchild_org_org_reltn_cd = f8
     SET nhstrustchild_org_org_reltn_cd = uar_get_code_by ("MEANING" ,369 ,"NHSTRUSTCHLD" )
     SELECT INTO "nl:"
      FROM (org_org_reltn oor )
      PLAN (oor
       WHERE (oor.organization_id = dcur_trustid )
       AND (oor.active_ind = 1 )
       AND (oor.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
       AND (oor.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
       AND (oor.org_org_reltn_cd = nhstrustchild_org_org_reltn_cd ) )
      HEAD REPORT
       IF ((orgcnt > 0 ) ) secstat = alterlist (sac_org->organizations ,10 )
       ENDIF
      DETAIL
       IF ((oor.related_org_id > 0 ) ) orgcnt = (orgcnt + 1 ) ,
        IF ((mod (orgcnt ,10 ) = 1 ) ) secstat = alterlist (sac_org->organizations ,(orgcnt + 9 ) )
        ENDIF
        ,sac_org->organizations[orgcnt ].organization_id = oor.related_org_id
       ENDIF
      FOOT REPORT
       secstat = alterlist (sac_org->organizations ,orgcnt )
      WITH nocounter
     ;end select
    ELSE
     CALL echo (build ("Unexpected login type: " ,dynamimc_org_ind ) )
    ENDIF
   ENDIF
   SET int_count = size (sac_org->organizations ,5 )
   IF ((int_count > 0 ) )
    SET stat = alterlist (user_orgs->orgs ,int_count )
    FOR (org_idx = 1 TO int_count )
     SET user_orgs->orgs[org_idx ].org_id = sac_org->organizations[org_idx ].organization_id
    ENDFOR
   ENDIF
  ENDIF
  RETURN (int_count )
 END ;Subroutine
 SET org_security_ind = orgsecurityenabled (null )
 IF ((org_security_ind = 1 ) )
  SET user_org_cnt = getcntorgsbyuser (null )
  IF ((user_org_cnt = 0 ) )
   SET reply->status_data.status = "Z"
   CALL sn_log_message (lvl_info ,log_to_reply ,"GetCntOrgsByUser" ,"No Orgs associated to user" )
   GO TO exit_script
  ENDIF
 ENDIF
 SELECT INTO "nl:"
  FROM (sn_charge_queue scq ),
   (surgical_case sc ),
   (prsnl p1 ),
   (prsnl p2 ),
   (prsnl p3 ),
   (encounter e )
  PLAN (scq
   WHERE (scq.area_cd = request->area_cd )
   AND (scq.process_ind = 0 ) )
   JOIN (sc
   WHERE (sc.surg_case_id = scq.surg_case_id ) )
   JOIN (p1
   WHERE (p1.person_id = scq.submitted_by_id ) )
   JOIN (p2
   WHERE (p2.person_id = scq.hold_by_id ) )
   JOIN (p3
   WHERE (p3.person_id = scq.release_by_id ) )
   JOIN (e
   WHERE (sc.encntr_id = e.encntr_id ) )
  ORDER BY sc.surg_case_nbr_yr ,
   sc.surg_case_nbr_cnt ,
   scq.surg_case_id ,
   scq.doc_type_cd ,
   scq.trans_type_mean
  HEAD REPORT
   reply->area_cd = request->area_cd ,
   case_cnt = 0
  HEAD scq.surg_case_id
   encntr_secure_ind = 1 ,
   IF ((org_security_ind = 1 )
   AND (e.encntr_id > 0.0 ) )
    IF (NOT (expand (org_ndx ,1 ,user_org_cnt ,e.organization_id ,user_orgs->orgs[org_ndx ].org_id )
    ) ) encntr_secure_ind = 0
    ENDIF
   ENDIF
   ,
   IF ((encntr_secure_ind = 1 ) ) case_cnt = (case_cnt + 1 ) ,
    IF ((mod (case_cnt ,10 ) = 1 ) ) stat = alterlist (reply->cases ,(case_cnt + 9 ) )
    ENDIF
    ,reply->cases[case_cnt ].surg_case_id = scq.surg_case_id ,reply->cases[case_cnt ].
    surg_case_nbr_formatted = sc.surg_case_nbr_formatted ,reply->cases[case_cnt ].person_id = sc
    .person_id ,reply->cases[case_cnt ].encntr_id = sc.encntr_id ,doc_cnt = 0
   ENDIF
  HEAD scq.doc_type_cd
   IF ((encntr_secure_ind = 1 ) ) doc_cnt = (doc_cnt + 1 ) ,
    IF ((mod (doc_cnt ,10 ) = 1 ) ) stat = alterlist (reply->cases[case_cnt ].documents ,(doc_cnt +
      9 ) )
    ENDIF
    ,reply->cases[case_cnt ].documents[doc_cnt ].doc_type_cd = scq.doc_type_cd ,trans_cnt = 0
   ENDIF
  DETAIL
   IF ((encntr_secure_ind = 1 ) ) trans_cnt = (trans_cnt + 1 ) ,
    IF ((mod (trans_cnt ,10 ) = 1 ) ) stat = alterlist (reply->cases[case_cnt ].documents[doc_cnt ].
      trans_types ,(trans_cnt + 9 ) )
    ENDIF
    ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].trans_type_mean = scq
    .trans_type_mean ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
    submitted_by_id = scq.submitted_by_id ,
    IF ((p1.person_id > 0 ) ) reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
     submitted_by_name = p1.name_full_formatted
    ENDIF
    ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].submitted_dt_tm = scq
    .submitted_dt_tm ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].hold_reason
     = scq.hold_reason ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
    hold_dt_tm = scq.hold_dt_tm ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
    hold_by_id = scq.hold_by_id ,
    IF ((p2.person_id > 0 ) ) reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
     hold_by_name = p2.name_full_formatted
    ENDIF
    ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].blocked_ind = scq
    .blocked_ind ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].blocked_dt_tm
    = scq.blocked_dt_tm ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
    recharges_ind = scq.recharges_ind ,reply->cases[case_cnt ].documents[doc_cnt ].trans_types[
    trans_cnt ].failure_dt_tm = scq.failure_dt_tm ,reply->cases[case_cnt ].documents[doc_cnt ].
    trans_types[trans_cnt ].failure_cnt = scq.failure_cnt ,reply->cases[case_cnt ].documents[doc_cnt
    ].trans_types[trans_cnt ].delay_reason = scq.delay_reason ,reply->cases[case_cnt ].documents[
    doc_cnt ].trans_types[trans_cnt ].updt_cnt = scq.updt_cnt ,reply->cases[case_cnt ].documents[
    doc_cnt ].trans_types[trans_cnt ].blocked_reason_flag = scq.blocked_reason_flag ,reply->cases[
    case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].release_reason = scq.release_reason ,reply
    ->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].release_dt_tm = scq.release_dt_tm
   ,
    IF ((p3.person_id > 0 ) ) reply->cases[case_cnt ].documents[doc_cnt ].trans_types[trans_cnt ].
     release_by_name = p3.name_full_formatted
    ENDIF
   ENDIF
  FOOT  scq.doc_type_cd
   IF ((case_cnt > 0 )
   AND (doc_cnt > 0 ) ) stat = alterlist (reply->cases[case_cnt ].documents[doc_cnt ].trans_types ,
     trans_cnt )
   ENDIF
  FOOT  scq.surg_case_id
   IF ((case_cnt > 0 ) ) stat = alterlist (reply->cases[case_cnt ].documents ,doc_cnt )
   ENDIF
  FOOT REPORT
   stat = alterlist (reply->cases ,case_cnt )
  WITH nocounter
 ;end select
 IF ((curqual > 0 ) )
  SET reply->status_data.status = "S"
 ELSE
  SET reply->status_data.status = "Z"
 ENDIF
#exit_script
END GO
1)

191122:110226 CCUMMIN4_DVD11               Cost 0.00 Cpu 0.00 Ela 0.00 Dio   0 O0M0R0 P1R0