1)translate rx_get_waste_history go
;*** Generated by TRANSLATE, verify before re-including (Debug:N, Optimize:N) ***
DROP PROGRAM rx_get_waste_history :dba GO
CREATE PROGRAM rx_get_waste_history :dba
 DECLARE dstarttime = dq8 WITH protect ,noconstant (curtime3 )
 DECLARE sline = c70 WITH protect ,constant (fillstring (70 ,"-" ) )
 CALL echo (sline )
 CALL echo ("********** BEGIN rx_get_waste_history **********" )
 CALL echo (sline )
 IF (NOT (validate (reply ,0 ) ) )
  RECORD reply (
    1 order_id = f8
    1 dispense_hx_id = f8
    1 disp_event_type_cd = f8
    1 disp_event_type_display = vc
    1 disp_event_type_meaning = vc
    1 dispense_dt_tm = dq8
    1 dispense_tz = i4
    1 action_seq = i4
    1 wastelist [* ]
      2 dispense_hx_id = f8
      2 updt_dt_tm = dq8
      2 disp_event_type_cd = f8
      2 disp_event_type_display = vc
      2 disp_event_type_meaning = vc
      2 credit_disp_hx_id = f8
      2 credit_updt_dt_tm = dq8
      2 credit_disp_event_type_cd = f8
      2 credit_disp_event_type_display = vc
      2 credit_disp_event_type_meaning = vc
      2 prodlist [* ]
        3 waste_charge_prod_disp_hx_id = f8
        3 item_id = f8
        3 med_product_id = f8
        3 prod_desc = vc
        3 generic_name = vc
        3 manufacturer_name = vc
        3 drug_identifier = vc
        3 manf_item_id = f8
        3 strength = f8
        3 strength_unit_cd = f8
        3 strength_unit_display = vc
        3 volume = f8
        3 volume_unit_cd = f8
        3 volume_unit_display = vc
        3 dispense_qty = f8
        3 dispense_qty_unit_cd = f8
        3 dispense_qty_unit_display = vc
        3 wasted_qty = f8
        3 charge_qty = f8
        3 unrounded_charge_qty = f8
        3 qpd = f8
        3 cost = f8
        3 price = f8
        3 tax_amt = f8
        3 scan_flag = i2
    1 ingred_action_seq = i4
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 IF (NOT (validate (itemlist ,0 ) ) )
  RECORD itemlist (
    1 items [* ]
      2 item_id = f8
      2 med_product_id = f8
      2 prod_desc = vc
      2 generic_name = vc
      2 manufacturer_name = vc
      2 drug_identifier = vc
      2 manf_item_id = f8
      2 strength = f8
      2 strength_unit_cd = f8
      2 strength_unit_display = vc
      2 volume = f8
      2 volume_unit_cd = f8
      2 volume_unit_display = vc
      2 dispense_qty = f8
      2 dispense_qty_unit_cd = f8
      2 dispense_qty_unit_display = vc
      2 qpd = f8
  )
 ENDIF
 DECLARE dinpatient = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,4500 ,"INPATIENT" ) )
 DECLARE dwastecharge = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,4032 ,"WASTECHARGE" )
  )
 DECLARE dwastecredit = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,4032 ,"WASTECREDIT" )
  )
 DECLARE sscriptstatus = c1 WITH protect ,noconstant ("F" )
 DECLARE serrordescription = vc WITH protect ,noconstant ("" )
 DECLARE dparentdisphxid = f8 WITH protect ,noconstant (0.0 )
 DECLARE ddesiredwastedisphxid = f8 WITH protect ,noconstant (0.0 )
 DECLARE lwasteeventcnt = i4 WITH protect ,noconstant (0 )
 DECLARE lprodcnt = i4 WITH protect ,noconstant (0 )
 DECLARE litemcnt = i4 WITH protect ,noconstant (0 )
 DECLARE lprodidx = i4 WITH protect ,noconstant (0 )
 DECLARE dstat = f8 WITH protect ,noconstant (0.0 )
 DECLARE ditemid = f8 WITH protect ,noconstant (0.0 )
 DECLARE delapsedtime = dq8 WITH protect ,noconstant (0.0 )
 DECLARE lidx = i4 WITH protect ,noconstant (0 )
 DECLARE litemidx = i4 WITH protect ,noconstant (0 )
 DECLARE lrxagetiteminfosize = i4 WITH protect ,noconstant (0 )
 DECLARE lmedprodsize = i4 WITH protect ,noconstant (0 )
 DECLARE lmedprodidx = i4 WITH protect ,noconstant (0 )
 DECLARE w = i4 WITH protect ,noconstant (0 )
 DECLARE i = i4 WITH protect ,noconstant (0 )
 DECLARE dwasteqty = f8 WITH protect ,noconstant (0.0 )
 DECLARE dunroundedchargeqty = f8 WITH protect ,noconstant (0.0 )
 DECLARE errcode = i4 WITH protect ,noconstant (0 )
 DECLARE errmsg = vc WITH protect ,noconstant (fillstring (132 ," " ) )
 IF ((request->dispense_hx_id <= 0 ) )
  CALL echo ("Exiting: request->dispense_hx_id is zero" )
  SET serrordescription = "Invalid request"
  GO TO exit_script
 ENDIF
 SELECT INTO "nl:"
  FROM (dispense_hx dh )
  PLAN (dh
   WHERE (dh.dispense_hx_id = request->dispense_hx_id ) )
  HEAD REPORT
   IF ((dh.disp_event_type_cd = dwastecharge ) )
    CALL echo ("request->dispense_hx_id is WASTECHARGE. Setting parent to waste_dispense_hx_id." ) ,
    dparentdisphxid = dh.waste_dispense_hx_id ,ddesiredwastedisphxid = dh.dispense_hx_id
   ELSEIF ((dh.disp_event_type_cd = dwastecredit ) )
    CALL echo ("request->dispense_hx_id is WASTECREDIT. Setting parent to waste_dispense_hx_id." ) ,
    dparentdisphxid = dh.waste_dispense_hx_id ,ddesiredwastedisphxid = dh.chrg_dispense_hx_id
   ELSEIF ((dh.chrg_dispense_hx_id > 0 ) )
    CALL echo ("request->dispense_hx_id is a dose credit. Setting parent to chrg_dispense_hx_id." ) ,
    dparentdisphxid = dh.chrg_dispense_hx_id
   ELSE
    CALL echo (
    "request->dispense_hx_id is already a parent dispense. Will return all waste charges." ) ,
    dparentdisphxid = dh.dispense_hx_id
   ENDIF
  WITH nocounter
 ;end select
 IF ((curqual = 0 ) )
  CALL echo ("Exiting: No parent dispense event found" )
  SET serrordescription = "No parent dispense found"
  SET sscriptstatus = "Z"
  GO TO exit_script
 ENDIF
 SELECT INTO "nl:"
  FROM (dispense_hx dh ),
   (code_value cv )
  PLAN (dh
   WHERE (dh.dispense_hx_id = dparentdisphxid ) )
   JOIN (cv
   WHERE (cv.code_value = dh.disp_event_type_cd ) )
  HEAD REPORT
   reply->dispense_hx_id = dh.dispense_hx_id ,
   reply->order_id = dh.order_id ,
   reply->action_seq = dh.action_sequence ,
   reply->dispense_dt_tm = dh.dispense_dt_tm ,
   reply->dispense_tz = dh.dispense_tz ,
   reply->disp_event_type_cd = dh.disp_event_type_cd ,
   reply->disp_event_type_display = cv.display ,
   reply->disp_event_type_meaning = cv.cdf_meaning
  WITH nocounter
 ;end select
 IF ((curqual = 0 ) )
  CALL echo ("Exiting: No parent dispense event found" )
  SET serrordescription = "No parent dispense found"
  SET sscriptstatus = "Z"
  GO TO exit_script
 ENDIF
 SELECT INTO "nl:"
  FROM (dispense_hx dh ),
   (prod_dispense_hx pdh ),
   (code_value cv )
  PLAN (dh
   WHERE (dh.waste_dispense_hx_id = reply->dispense_hx_id )
   AND (dh.disp_event_type_cd = dwastecharge )
   AND (((ddesiredwastedisphxid = 0 ) ) OR ((dh.dispense_hx_id = ddesiredwastedisphxid ) ))
   AND (((dh.charge_ind = 1 ) ) OR ((dh.future_charge_ind = 1 ) )) )
   JOIN (pdh
   WHERE (pdh.dispense_hx_id = dh.dispense_hx_id ) )
   JOIN (cv
   WHERE (cv.code_value = dh.disp_event_type_cd ) )
  ORDER BY dh.dispense_hx_id ,
   pdh.prod_dispense_hx_id
  HEAD dh.dispense_hx_id
   lwasteeventcnt = (lwasteeventcnt + 1 ) ,dstat = alterlist (reply->wastelist ,lwasteeventcnt ) ,
   reply->wastelist[lwasteeventcnt ].dispense_hx_id = dh.dispense_hx_id ,reply->wastelist[
   lwasteeventcnt ].updt_dt_tm = dh.updt_dt_tm ,reply->wastelist[lwasteeventcnt ].disp_event_type_cd
   = dh.disp_event_type_cd ,reply->wastelist[lwasteeventcnt ].disp_event_type_display = cv.display ,
   reply->wastelist[lwasteeventcnt ].disp_event_type_meaning = cv.cdf_meaning ,lprodcnt = 0
  HEAD pdh.prod_dispense_hx_id
   lprodcnt = (lprodcnt + 1 ) ,dstat = alterlist (reply->wastelist[lwasteeventcnt ].prodlist ,
    lprodcnt ) ,reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].waste_charge_prod_disp_hx_id =
   pdh.prod_dispense_hx_id ,reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].item_id = pdh
   .item_id ,reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].med_product_id = pdh
   .med_product_id ,dunroundedchargeqty = nullval (pdh.unrounded_charge_qty ,0.0 ) ,reply->wastelist[
   lwasteeventcnt ].prodlist[lprodcnt ].unrounded_charge_qty = dunroundedchargeqty ,reply->wastelist[
   lwasteeventcnt ].prodlist[lprodcnt ].charge_qty = pdh.charge_qty ,dwasteqty = nullval (pdh
    .waste_qty ,0.0 ) ,reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].wasted_qty = dwasteqty ,
   reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].cost = pdh.cost ,reply->wastelist[
   lwasteeventcnt ].prodlist[lprodcnt ].price = pdh.price ,reply->wastelist[lwasteeventcnt ].
   prodlist[lprodcnt ].tax_amt = pdh.tax_amt ,reply->wastelist[lwasteeventcnt ].prodlist[lprodcnt ].
   scan_flag = pdh.scan_flag
  WITH nocounter
 ;end select
 CALL echo (build ("Number of waste charge dispense events (lWasteEventCnt):" ,lwasteeventcnt ) )
 IF ((lwasteeventcnt <= 0 ) )
  CALL echo ("Exiting: No waste charge dispense events found" )
  SET serrordescription = "No waste charges found"
  SET sscriptstatus = "Z"
  GO TO exit_script
 ENDIF
 SELECT INTO "nl:"
  FROM (dispense_hx dh ),
   (prod_dispense_hx pdh ),
   (code_value cv )
  PLAN (dh
   WHERE (dh.waste_dispense_hx_id = reply->dispense_hx_id )
   AND (dh.disp_event_type_cd = dwastecredit ) )
   JOIN (pdh
   WHERE (pdh.dispense_hx_id = dh.dispense_hx_id ) )
   JOIN (cv
   WHERE (cv.code_value = dh.disp_event_type_cd ) )
  ORDER BY dh.chrg_dispense_hx_id ,
   pdh.item_id
  HEAD dh.chrg_dispense_hx_id
   lprodcnt = 0 ,ldispidx = locateval (lidx ,1 ,lwasteeventcnt ,dh.chrg_dispense_hx_id ,reply->
    wastelist[lidx ].dispense_hx_id ) ,
   IF ((ldispidx > 0 ) ) lprodcnt = size (reply->wastelist[ldispidx ].prodlist ,5 )
   ENDIF
  HEAD pdh.item_id
   IF ((lprodcnt > 0 ) ) lprodidx = locateval (lidx ,1 ,lprodcnt ,pdh.item_id ,reply->wastelist[
     ldispidx ].prodlist[lidx ].item_id )
   ENDIF
  DETAIL
   IF ((lprodidx > 0 ) ) reply->wastelist[ldispidx ].credit_disp_hx_id = dh.dispense_hx_id ,reply->
    wastelist[ldispidx ].credit_updt_dt_tm = dh.updt_dt_tm ,reply->wastelist[ldispidx ].
    credit_disp_event_type_cd = dh.disp_event_type_cd ,reply->wastelist[ldispidx ].
    credit_disp_event_type_display = cv.display ,reply->wastelist[ldispidx ].
    credit_disp_event_type_meaning = cv.cdf_meaning
   ENDIF
  WITH nocounter
 ;end select
 IF ((curqual = 0 ) )
  CALL echo ("FYI: No waste credit dispense events found" )
 ENDIF
 FOR (w = 1 TO lwasteeventcnt )
  SET lprodcnt = size (reply->wastelist[w ].prodlist ,5 )
  FOR (i = 1 TO lprodcnt )
   SET ditemid = reply->wastelist[w ].prodlist[i ].item_id
   SET litemidx = locateval (lidx ,1 ,size (itemlist->items ,5 ) ,ditemid ,itemlist->items[lidx ].
    item_id )
   IF ((litemidx <= 0 ) )
    SET litemcnt = (litemcnt + 1 )
    SET dstat = alterlist (itemlist->items ,litemcnt )
    SET itemlist->items[litemcnt ].item_id = ditemid
    SET itemlist->items[litemcnt ].med_product_id = reply->wastelist[w ].prodlist[i ].med_product_id
   ENDIF
  ENDFOR
 ENDFOR
 IF ((litemcnt <= 0 ) )
  CALL echo ("Exiting: No items found" )
  SET serrordescription = "No items found"
  SET sscriptstatus = "Z"
  GO TO exit_script
 ENDIF
 RECORD info_request (
   1 itemlist [* ]
     2 item_id = f8
   1 pharm_type_cd = f8
   1 facility_cd = f8
   1 pharm_loc_cd = f8
   1 pat_loc_cd = f8
   1 encounter_type_cd = f8
   1 package_type_id = f8
   1 med_all_ind = i2
   1 med_pha_flex_ind = i2
   1 med_identifier_ind = i2
   1 med_dispense_ind = i2
   1 med_oe_default_ind = i2
   1 med_def_ind = i2
   1 ther_class_ind = i2
   1 med_product_ind = i2
   1 med_product_prim_ind = i2
   1 med_product_ident_ind = i2
   1 med_cost_ind = i2
   1 misc_object_ind = i2
   1 med_cost_type_cd = f8
   1 med_child_ind = i2
   1 parent_item_id = f8
   1 options_pref = i4
   1 birthdate = dq8
   1 financial_class_cd = f8
   1 funding_source_cd = f8
 )
 RECORD info_reply (
   1 itemlist [* ]
     2 parent_item_id = f8
     2 sequence = i4
     2 active_ind = i2
     2 med_def_flex_sys_id = f8
     2 med_def_flex_syspkg_id = f8
     2 item_id = f8
     2 package_type_id = f8
     2 form_cd = f8
     2 cki = vc
     2 med_type_flag = i2
     2 mdx_gfc_nomen_id = f8
     2 base_issue_factor = f8
     2 given_strength = vc
     2 strength = f8
     2 strength_unit_cd = f8
     2 volume = f8
     2 volume_unit_cd = f8
     2 compound_text_id = f8
     2 mixing_instructions = vc
     2 pkg_qty = f8
     2 pkg_qty_cd = f8
     2 catalog_cd = f8
     2 catalog_cki = vc
     2 synonym_id = f8
     2 oeformatid = f8
     2 orderabletypeflag = i2
     2 catalogdescription = vc
     2 catalogtypecd = f8
     2 mnemonicstr = vc
     2 primarymnemonic = vc
     2 label_description = vc
     2 brand_name = vc
     2 mnemonic = vc
     2 generic_name = vc
     2 profile_desc = vc
     2 cdm = vc
     2 rx_mask = i4
     2 med_oe_defaults_id = f8
     2 med_oe_strength = f8
     2 med_oe_strength_unit_cd = f8
     2 med_oe_volume = f8
     2 med_oe_volume_unit_cd = f8
     2 freetext_dose = vc
     2 frequency_cd = f8
     2 route_cd = f8
     2 prn_ind = i2
     2 infuse_over = f8
     2 infuse_over_cd = f8
     2 duration = f8
     2 duration_unit_cd = f8
     2 stop_type_cd = f8
     2 default_par_doses = i4
     2 max_par_supply = i4
     2 dispense_category_cd = f8
     2 alternate_dispense_category_cd = f8
     2 comment1_id = f8
     2 comment1_type = i2
     2 comment2_id = f8
     2 comment2_type = i2
     2 comment1_text = vc
     2 comment2_text = vc
     2 price_sched_id = f8
     2 nbr_labels = i4
     2 ord_as_synonym_id = f8
     2 rx_qty = f8
     2 daw_cd = f8
     2 sig_codes = vc
     2 med_dispense_id = f8
     2 med_disp_package_type_id = f8
     2 med_disp_strength = f8
     2 med_disp_strength_unit_cd = f8
     2 med_disp_volume = f8
     2 med_disp_volume_unit_cd = f8
     2 legal_status_cd = f8
     2 formulary_status_cd = f8
     2 oe_format_flag = i2
     2 med_filter_ind = i2
     2 continuous_filter_ind = i2
     2 intermittent_filter_ind = i2
     2 divisible_ind = i2
     2 used_as_base_ind = i2
     2 always_dispense_from_flag = i2
     2 floorstock_ind = i2
     2 dispense_qty = f8
     2 dispense_factor = f8
     2 label_ratio = f8
     2 prn_reason_cd = f8
     2 infinite_div_ind = f8
     2 reusable_ind = i2
     2 base_pkg_type_id = f8
     2 base_pkg_qty = f8
     2 base_pkg_uom_cd = f8
     2 medidqual [* ]
       3 identifier_id = f8
       3 identifier_type_cd = f8
       3 value = vc
       3 value_key = vc
       3 sequence = i4
     2 medproductqual [* ]
       3 active_ind = i2
       3 med_product_id = f8
       3 manf_item_id = f8
       3 inner_pkg_type_id = f8
       3 inner_pkg_qty = f8
       3 inner_pkg_uom_cd = f8
       3 bio_equiv_ind = i2
       3 brand_ind = i2
       3 unit_dose_ind = i2
       3 manufacturer_cd = f8
       3 manufacturer_name = vc
       3 label_description = vc
       3 ndc = vc
       3 brand = vc
       3 sequence = i2
       3 awp = f8
       3 awp_factor = f8
       3 formulary_status_cd = f8
       3 item_master_id = f8
       3 base_pkg_type_id = f8
       3 base_pkg_qty = f8
       3 base_pkg_uom_cd = f8
       3 medcostqual [* ]
         4 cost_type_cd = f8
         4 cost = f8
       3 innerndcqual [* ]
         4 inner_ndc = vc
     2 medingredqual [* ]
       3 med_ingred_set_id = f8
       3 sequence = i2
       3 child_item_id = f8
       3 child_med_prod_id = f8
       3 child_pkg_type_id = f8
       3 base_ind = i2
       3 cmpd_qty = f8
       3 default_action_cd = f8
       3 cost1 = f8
       3 cost2 = f8
       3 awp = f8
       3 inc_in_total_ind = i2
       3 normalized_rate_ind = i2
     2 theraclassqual [* ]
       3 alt_sel_category_id = f8
       3 ahfs_code = c20
     2 miscobjectqual [* ]
       3 parent_entity_id = f8
       3 cdf_meaning = vc
     2 firstdoselocqual [* ]
       3 location_cd = f8
     2 pkg_qty_per_pkg = f8
     2 pkg_disp_more_ind = i2
     2 dispcat_flex_ind = i4
     2 pricesch_flex_ind = i4
     2 workflow_cd = f8
     2 cmpd_qty = f8
     2 warning_labels [* ]
       3 label_nbr = i4
       3 label_seq = i2
       3 label_text = vc
       3 label_default_print = i2
       3 label_exception_ind = i2
     2 premix_ind = i2
     2 ord_as_mnemonic = vc
     2 tpn_balance_method_cd = f8
     2 tpn_chloride_pct = f8
     2 tpn_default_ingred_item_id = f8
     2 tpn_fill_method_cd = f8
     2 tpn_include_ions_flag = i2
     2 tpn_overfill_amt = f8
     2 tpn_overfill_unit_cd = f8
     2 tpn_preferred_cation_cd = f8
     2 tpn_product_type_flag = i2
     2 lot_tracking_ind = i2
     2 rate = f8
     2 rate_cd = f8
     2 normalized_rate = f8
     2 normalized_rate_cd = f8
     2 freetext_rate = vc
     2 normalized_rate_ind = i2
     2 ord_detail_opts [* ]
       3 facility_cd = f8
       3 age_range_id = f8
       3 oe_field_meaning_id = f8
       3 restrict_ind = i4
       3 opt_list [* ]
         4 opt_txt = vc
         4 opt_cd = f8
         4 opt_nbr = f8
         4 default_ind = i4
         4 display_seq = i4
     2 poc_charge_flag = i2
     2 inventory_factor = f8
     2 prod_assign_flag = i2
     2 skip_dispense_flag = i2
     2 inv_master_id = f8
     2 grace_period_days = i4
     2 waste_charge_ind = i2
     2 cms_waste_billing_unit_amt = f8
     2 cms_waste_billing_unit_uom_cd = f8
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 SET dstat = alterlist (info_request->itemlist ,litemcnt )
 FOR (lprodidx = 1 TO litemcnt )
  SET info_request->itemlist[lprodidx ].item_id = itemlist->items[lprodidx ].item_id
 ENDFOR
 SET info_request->med_all_ind = 1
 SET info_request->pharm_type_cd = dinpatient
 EXECUTE rxa_get_item_info WITH replace ("REQUEST" ,"INFO_REQUEST" ) ,
 replace ("REPLY" ,"INFO_REPLY" )
 SET lrxagetiteminfosize = size (info_reply->itemlist ,5 )
 FOR (i = 1 TO lrxagetiteminfosize )
  SET lprodidx = locateval (lidx ,1 ,litemcnt ,info_reply->itemlist[i ].item_id ,itemlist->items[
   lidx ].item_id )
  IF ((lprodidx > 0 ) )
   SET itemlist->items[lprodidx ].prod_desc = info_reply->itemlist[i ].label_description
   SET itemlist->items[lprodidx ].generic_name = info_reply->itemlist[i ].generic_name
   SET itemlist->items[lprodidx ].dispense_qty = info_reply->itemlist[i ].pkg_qty
   SET itemlist->items[lprodidx ].dispense_qty_unit_cd = info_reply->itemlist[i ].pkg_qty_cd
   SET itemlist->items[lprodidx ].dispense_qty_unit_display = uar_get_code_display (info_reply->
    itemlist[i ].pkg_qty_cd )
   SET itemlist->items[lprodidx ].strength = info_reply->itemlist[i ].strength
   SET itemlist->items[lprodidx ].strength_unit_cd = info_reply->itemlist[i ].strength_unit_cd
   SET itemlist->items[lprodidx ].strength_unit_display = uar_get_code_display (info_reply->itemlist[
    i ].strength_unit_cd )
   SET itemlist->items[lprodidx ].volume = info_reply->itemlist[i ].volume
   SET itemlist->items[lprodidx ].volume_unit_cd = info_reply->itemlist[i ].volume_unit_cd
   SET itemlist->items[lprodidx ].volume_unit_display = uar_get_code_display (info_reply->itemlist[i
    ].volume_unit_cd )
   SET lmedprodsize = size (info_reply->itemlist[i ].medproductqual ,5 )
   SET lmedprodidx = locateval (lmedprodidx ,1 ,lmedprodsize ,itemlist->items[lprodidx ].
    med_product_id ,info_reply->itemlist[i ].medproductqual[lmedprodidx ].med_product_id )
   IF ((lmedprodidx > 0 ) )
    SET itemlist->items[lprodidx ].drug_identifier = info_reply->itemlist[i ].medproductqual[
    lmedprodidx ].ndc
    SET itemlist->items[lprodidx ].manf_item_id = info_reply->itemlist[i ].medproductqual[
    lmedprodidx ].manf_item_id
    SET itemlist->items[lprodidx ].manufacturer_name = info_reply->itemlist[i ].medproductqual[
    lmedprodidx ].manufacturer_name
   ENDIF
  ENDIF
 ENDFOR
 SELECT INTO "nl:"
  FROM (dispense_hx dh ),
   (order_ingredient oi ),
   (order_product op )
  PLAN (dh
   WHERE (dh.dispense_hx_id = reply->dispense_hx_id ) )
   JOIN (oi
   WHERE (oi.order_id = dh.order_id )
   AND (oi.action_sequence <= dh.action_sequence ) )
   JOIN (op
   WHERE (op.order_id = oi.order_id )
   AND (op.action_sequence = oi.action_sequence )
   AND (op.ingred_sequence = oi.comp_sequence ) )
  ORDER BY oi.action_sequence DESC
  HEAD REPORT
   reply->ingred_action_seq = oi.action_sequence
  WITH nocounter
 ;end select
 SELECT INTO "nl:"
  FROM (order_product op )
  PLAN (op
   WHERE (op.order_id = reply->order_id )
   AND (op.action_sequence = reply->ingred_action_seq )
   AND expand (lidx ,1 ,litemcnt ,op.item_id ,itemlist->items[lidx ].item_id ) )
  DETAIL
   lprodidx = locateval (lidx ,1 ,litemcnt ,op.item_id ,itemlist->items[lidx ].item_id ) ,
   IF ((lprodidx > 0 ) ) itemlist->items[lprodidx ].qpd = op.dose_quantity
   ENDIF
  WITH nocounter
 ;end select
 FOR (w = 1 TO lwasteeventcnt )
  SET lprodcnt = size (reply->wastelist[w ].prodlist ,5 )
  FOR (i = 1 TO lprodcnt )
   SET ditemid = reply->wastelist[w ].prodlist[i ].item_id
   SET litemcnt = size (itemlist->items ,5 )
   SET lprodidx = locateval (lidx ,1 ,litemcnt ,ditemid ,itemlist->items[lidx ].item_id )
   IF ((lprodidx > 0 ) )
    SET reply->wastelist[w ].prodlist[i ].dispense_qty = itemlist->items[lprodidx ].dispense_qty
    SET reply->wastelist[w ].prodlist[i ].dispense_qty_unit_cd = itemlist->items[lprodidx ].
    dispense_qty_unit_cd
    SET reply->wastelist[w ].prodlist[i ].dispense_qty_unit_display = itemlist->items[lprodidx ].
    dispense_qty_unit_display
    SET reply->wastelist[w ].prodlist[i ].qpd = itemlist->items[lprodidx ].qpd
    SET reply->wastelist[w ].prodlist[i ].drug_identifier = itemlist->items[lprodidx ].
    drug_identifier
    SET reply->wastelist[w ].prodlist[i ].manf_item_id = itemlist->items[lprodidx ].manf_item_id
    SET reply->wastelist[w ].prodlist[i ].manufacturer_name = itemlist->items[lprodidx ].
    manufacturer_name
    SET reply->wastelist[w ].prodlist[i ].prod_desc = itemlist->items[lprodidx ].prod_desc
    SET reply->wastelist[w ].prodlist[i ].generic_name = itemlist->items[lprodidx ].generic_name
    SET reply->wastelist[w ].prodlist[i ].strength = itemlist->items[lprodidx ].strength
    SET reply->wastelist[w ].prodlist[i ].strength_unit_cd = itemlist->items[lprodidx ].
    strength_unit_cd
    SET reply->wastelist[w ].prodlist[i ].strength_unit_display = itemlist->items[lprodidx ].
    strength_unit_display
    SET reply->wastelist[w ].prodlist[i ].volume = itemlist->items[lprodidx ].volume
    SET reply->wastelist[w ].prodlist[i ].volume_unit_cd = itemlist->items[lprodidx ].volume_unit_cd
    SET reply->wastelist[w ].prodlist[i ].volume_unit_display = itemlist->items[lprodidx ].
    volume_unit_display
   ENDIF
  ENDFOR
 ENDFOR
 SET sscriptstatus = "S"
#exit_script
 SET errcode = error (errmsg ,0 )
 IF ((errcode != 0 ) )
  SET serrordescription = errmsg
  SET sscriptstatus = "F"
 ENDIF
 SET reply->status_data.status = sscriptstatus
 SET reply->status_data.subeventstatus[1 ].targetobjectname = "rx_get_waste_history"
 SET reply->status_data.subeventstatus[1 ].targetobjectvalue = serrordescription
 IF ((sscriptstatus = "F" ) )
  SET reply->status_data.subeventstatus[1 ].operationstatus = "F"
  SET reply->status_data.subeventstatus[1 ].operationname = "FAILURE"
 ELSEIF ((sscriptstatus = "Z" ) )
  SET reply->status_data.subeventstatus[1 ].operationstatus = "Z"
  SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
 ELSE
  SET reply->status_data.subeventstatus[1 ].operationstatus = "S"
  SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
 ENDIF
 FREE RECORD itemlist
 CALL echo (sline )
 CALL echorecord (reply )
 CALL echo (sline )
 SET delapsedtime = ((curtime3 - dstarttime ) / 100 )
 CALL echo (build2 ("Processing time in seconds: " ,trim (cnvtstring (delapsedtime ,12 ,2 ) ,3 ) ) )
 CALL echo ("Last Mod: 000" )
 CALL echo ("Mod Date: 11/18/2016" )
 CALL echo (sline )
 CALL echo ("********** END rx_get_waste_history **********" )
 CALL echo (sline )
END GO
1)

191106:075544 CCUMMIN4_DVD3               Cost 0.00 Cpu 0.00 Ela 0.00 Dio   0 O0M0R0 P1R0
