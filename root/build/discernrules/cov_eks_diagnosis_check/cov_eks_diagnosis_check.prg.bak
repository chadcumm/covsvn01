DROP PROGRAM cov_eks_diagnosis_check :dba GO
CREATE PROGRAM cov_eks_diagnosis_check :dba
 DECLARE log_program_name = vc WITH protect ,noconstant ("" )
 DECLARE log_override_ind = i2 WITH protect ,noconstant (0 )
 SET log_program_name = curprog
 SET log_override_ind = 0
 DECLARE log_level_error = i2 WITH protect ,noconstant (0 )
 DECLARE log_level_warning = i2 WITH protect ,noconstant (1 )
 DECLARE log_level_audit = i2 WITH protect ,noconstant (2 )
 DECLARE log_level_info = i2 WITH protect ,noconstant (3 )
 DECLARE log_level_debug = i2 WITH protect ,noconstant (4 )
 DECLARE hsys = i4 WITH protect ,noconstant (0 )
 DECLARE sysstat = i4 WITH protect ,noconstant (0 )
 DECLARE serrmsg = c132 WITH protect ,noconstant (" " )
 DECLARE ierrcode = i4 WITH protect ,noconstant (error (serrmsg ,1 ) )
 DECLARE crsl_msg_default = i4 WITH protect ,noconstant (0 )
 DECLARE crsl_msg_level = i4 WITH protect ,noconstant (0 )
 EXECUTE msgrtl
 SET crsl_msg_default = uar_msgdefhandle ()
 SET crsl_msg_level = uar_msggetlevel (crsl_msg_default )
 DECLARE lcrslsubeventcnt = i4 WITH protect ,noconstant (0 )
 DECLARE icrslloggingstat = i2 WITH protect ,noconstant (0 )
 DECLARE lcrslsubeventsize = i4 WITH protect ,noconstant (0 )
 DECLARE icrslloglvloverrideind = i2 WITH protect ,noconstant (0 )
 DECLARE scrsllogtext = vc WITH protect ,noconstant ("" )
 DECLARE scrsllogevent = vc WITH protect ,noconstant ("" )
 DECLARE icrslholdloglevel = i2 WITH protect ,noconstant (0 )
 DECLARE icrslerroroccured = i2 WITH protect ,noconstant (0 )
 DECLARE lcrsluarmsgwritestat = i4 WITH protect ,noconstant (0 )
 DECLARE crsl_info_domain = vc WITH protect ,constant ("DISCERNABU SCRIPT LOGGING" )
 DECLARE crsl_logging_on = c1 WITH protect ,constant ("L" )
 IF ((((logical ("MP_LOGGING_ALL" ) > " " ) ) OR ((logical (concat ("MP_LOGGING_" ,log_program_name
   ) ) > " " ) )) )
  SET log_override_ind = 1
 ENDIF
 DECLARE log_message ((logmsg = vc ) ,(loglvl = i4 ) ) = null
 SUBROUTINE  log_message (logmsg ,loglvl )
  SET icrslloglvloverrideind = 0
  SET scrsllogtext = ""
  SET scrsllogevent = ""
  SET scrsllogtext = concat ("{{Script::" ,value (log_program_name ) ,"}} " ,logmsg )
  IF ((log_override_ind = 0 ) )
   SET icrslholdloglevel = loglvl
  ELSE
   IF ((crsl_msg_level < loglvl ) )
    SET icrslholdloglevel = crsl_msg_level
    SET icrslloglvloverrideind = 1
   ELSE
    SET icrslholdloglevel = loglvl
   ENDIF
  ENDIF
  IF ((icrslloglvloverrideind = 1 ) )
   SET scrsllogevent = "Script_Override"
  ELSE
   CASE (icrslholdloglevel )
    OF log_level_error :
     SET scrsllogevent = "Script_Error"
    OF log_level_warning :
     SET scrsllogevent = "Script_Warning"
    OF log_level_audit :
     SET scrsllogevent = "Script_Audit"
    OF log_level_info :
     SET scrsllogevent = "Script_Info"
    OF log_level_debug :
     SET scrsllogevent = "Script_Debug"
   ENDCASE
  ENDIF
  SET lcrsluarmsgwritestat = uar_msgwrite (crsl_msg_default ,0 ,nullterm (scrsllogevent ) ,
   icrslholdloglevel ,nullterm (scrsllogtext ) )
  CALL echo (logmsg )
 END ;Subroutine
 DECLARE error_message ((logstatusblockind = i2 ) ) = i2
 SUBROUTINE  error_message (logstatusblockind )
  SET icrslerroroccured = 0
  SET ierrcode = error (serrmsg ,0 )
  WHILE ((ierrcode > 0 ) )
   SET icrslerroroccured = 1
   IF (validate (reply ) )
    SET reply->status_data.status = "F"
   ENDIF
   CALL log_message (serrmsg ,log_level_audit )
   IF ((logstatusblockind = 1 ) )
    IF (validate (reply ) )
     CALL populate_subeventstatus ("EXECUTE" ,"F" ,"CCL SCRIPT" ,serrmsg )
    ENDIF
   ENDIF
   SET ierrcode = error (serrmsg ,0 )
  ENDWHILE
  RETURN (icrslerroroccured )
 END ;Subroutine
 DECLARE error_and_zero_check_rec ((qualnum = i4 ) ,(opname = vc ) ,(logmsg = vc ) ,(errorforceexit
  = i2 ) ,(zeroforceexit = i2 ) ,(recorddata = vc (ref ) ) ) = i2
 SUBROUTINE  error_and_zero_check_rec (qualnum ,opname ,logmsg ,errorforceexit ,zeroforceexit ,
  recorddata )
  SET icrslerroroccured = 0
  SET ierrcode = error (serrmsg ,0 )
  WHILE ((ierrcode > 0 ) )
   SET icrslerroroccured = 1
   CALL log_message (serrmsg ,log_level_audit )
   CALL populate_subeventstatus_rec (opname ,"F" ,serrmsg ,logmsg ,recorddata )
   SET ierrcode = error (serrmsg ,0 )
  ENDWHILE
  IF ((icrslerroroccured = 1 )
  AND (errorforceexit = 1 ) )
   SET recorddata->status_data.status = "F"
   GO TO exit_script
  ENDIF
  IF ((qualnum = 0 )
  AND (zeroforceexit = 1 ) )
   SET recorddata->status_data.status = "Z"
   CALL populate_subeventstatus_rec (opname ,"Z" ,"No records qualified" ,logmsg ,recorddata )
   GO TO exit_script
  ENDIF
  RETURN (icrslerroroccured )
 END ;Subroutine
 DECLARE error_and_zero_check ((qualnum = i4 ) ,(opname = vc ) ,(logmsg = vc ) ,(errorforceexit = i2
  ) ,(zeroforceexit = i2 ) ) = i2
 SUBROUTINE  error_and_zero_check (qualnum ,opname ,logmsg ,errorforceexit ,zeroforceexit )
  RETURN (error_and_zero_check_rec (qualnum ,opname ,logmsg ,errorforceexit ,zeroforceexit ,reply ) )
 END ;Subroutine
 DECLARE populate_subeventstatus_rec ((operationname = vc (value ) ) ,(operationstatus = vc (value )
  ) ,(targetobjectname = vc (value ) ) ,(targetobjectvalue = vc (value ) ) ,(recorddata = vc (ref )
  ) ) = i2
 SUBROUTINE  populate_subeventstatus_rec (operationname ,operationstatus ,targetobjectname ,
  targetobjectvalue ,recorddata )
  IF ((validate (recorddata->status_data.status ,"-1" ) != "-1" ) )
   SET lcrslsubeventcnt = size (recorddata->status_data.subeventstatus ,5 )
   SET lcrslsubeventsize = size (trim (recorddata->status_data.subeventstatus[lcrslsubeventcnt ].
     operationname ) )
   SET lcrslsubeventsize = (lcrslsubeventsize + size (trim (recorddata->status_data.subeventstatus[
     lcrslsubeventcnt ].operationstatus ) ) )
   SET lcrslsubeventsize = (lcrslsubeventsize + size (trim (recorddata->status_data.subeventstatus[
     lcrslsubeventcnt ].targetobjectname ) ) )
   SET lcrslsubeventsize = (lcrslsubeventsize + size (trim (recorddata->status_data.subeventstatus[
     lcrslsubeventcnt ].targetobjectvalue ) ) )
   IF ((lcrslsubeventsize > 0 ) )
    SET lcrslsubeventcnt = (lcrslsubeventcnt + 1 )
    SET icrslloggingstat = alter (recorddata->status_data.subeventstatus ,lcrslsubeventcnt )
   ENDIF
   SET recorddata->status_data.subeventstatus[lcrslsubeventcnt ].operationname = substring (1 ,25 ,
    operationname )
   SET recorddata->status_data.subeventstatus[lcrslsubeventcnt ].operationstatus = substring (1 ,1 ,
    operationstatus )
   SET recorddata->status_data.subeventstatus[lcrslsubeventcnt ].targetobjectname = substring (1 ,25
    ,targetobjectname )
   SET recorddata->status_data.subeventstatus[lcrslsubeventcnt ].targetobjectvalue =
   targetobjectvalue
  ENDIF
 END ;Subroutine
 DECLARE populate_subeventstatus ((operationname = vc (value ) ) ,(operationstatus = vc (value ) ) ,(
  targetobjectname = vc (value ) ) ,(targetobjectvalue = vc (value ) ) ) = i2
 SUBROUTINE  populate_subeventstatus (operationname ,operationstatus ,targetobjectname ,
  targetobjectvalue )
  CALL populate_subeventstatus_rec (operationname ,operationstatus ,targetobjectname ,
   targetobjectvalue ,reply )
 END ;Subroutine
 DECLARE populate_subeventstatus_msg ((operationname = vc (value ) ) ,(operationstatus = vc (value )
  ) ,(targetobjectname = vc (value ) ) ,(targetobjectvalue = vc (value ) ) ,(loglevel = i2 (value )
  ) ) = i2
 SUBROUTINE  populate_subeventstatus_msg (operationname ,operationstatus ,targetobjectname ,
  targetobjectvalue ,loglevel )
  CALL populate_subeventstatus (operationname ,operationstatus ,targetobjectname ,targetobjectvalue
   )
  CALL log_message (targetobjectvalue ,loglevel )
 END ;Subroutine
 DECLARE check_log_level ((arg_log_level = i4 ) ) = i2
 SUBROUTINE  check_log_level (arg_log_level )
  IF ((((crsl_msg_level >= arg_log_level ) ) OR ((log_override_ind = 1 ) )) )
   RETURN (1 )
  ELSE
   RETURN (0 )
  ENDIF
 END ;Subroutine
 FREE RECORD diagnosis_rec
 RECORD diagnosis_rec (
   1 diagnosis_id = f8
   1 encntr_id = f8
   1 person_id = f8
   1 diag_display = vc
   1 diag_cnt = i2
   1 secondary_diag_rec [* ]
     2 nomenclature_id = f8
     2 concept_cki = vc
     2 combine_info = vc
     2 diag_disp = vc
     2 source_id = vc
     2 send_ind = i2
     2 n2_nomenclature_id = f8
     2 n3_nomenclature_id = f8
     2 n4_nomenclature_id = f8
 )
 FREE RECORD other_diag_rec
 RECORD other_diag_rec (
   1 diagnosis_id = f8
   1 encntr_id = f8
   1 person_id = f8
   1 diag_display = vc
   1 diag_cnt = i2
   1 secondary_diag_rec [* ]
     2 nomenclature_id = f8
     2 concept_cki = vc
     2 combine_info = vc
     2 diag_disp = vc
     2 source_id = vc
     2 send_ind = i2
 )
 FREE RECORD incoming_diag_rec
 RECORD incoming_diag_rec (
   1 diagnosis_id = f8
   1 person_id = f8
   1 encntr_id = f8
 )
 DECLARE sscript_name = vc WITH protect ,constant ("inn_eks_diagnosis_check:dba" )
 DECLARE idx = i4 WITH noconstant (0 ) ,protect
 DECLARE x = i4 WITH noconstant (0 ) ,protect
 DECLARE i = i4 WITH noconstant (0 ) ,protect
 DECLARE z = i4 WITH noconstant (0 ) ,protect
 DECLARE pos = i4 WITH noconstant (0 ) ,protect
 DECLARE d_cnt = i4 WITH noconstant (0 ) ,protect
 DECLARE od_cnt = i4 WITH noconstant (0 ) ,protect
 DECLARE bldmsg_cnt = i4 WITH noconstant (0 ) ,protect
 DECLARE rule_name = vc WITH noconstant ("" ) ,protect
 DECLARE list_cnt = i4 WITH protect ,noconstant (0 )
 DECLARE lstat = i4 WITH protect ,noconstant (0 )
 DECLARE diag_idx = i4 WITH noconstant (0 ) ,protect
 DECLARE 400_imo_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,400 ,"IMO" ) ) ,protect
 DECLARE 29223_imo_plus_icd10_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,29223 ,
   "IMO+ICD10CM" ) ) ,protect
 DECLARE 29223_icd10_imo_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,29223 ,"ICD10CM~IMO" ) )
 ,protect
 IF ((validate (debug_ind ,0 ) = 1 ) )
  CALL echojson (eksdata ,"diagnosis_eksdata.dat" )
  CALL echojson (request ,"diagnosis_request.dat" )
 ENDIF
 CALL echo ("Gathering request information from rule" )
 SET incoming_diag_rec->diagnosis_id = request->item[1 ].diagnosis_id
 SET incoming_diag_rec->person_id = request->item[1 ].person_id
 SET incoming_diag_rec->encntr_id = request->item[1 ].encntr_id
 DECLARE main (null ) = null
 DECLARE otherdiagnosis (null ) = null
 DECLARE builddiagnosisadd (null ) = null
 CALL main (null )
 CALL otherdiagnosis (null )
 CALL builddiagnosisadd (null )
 SUBROUTINE  main (null )
  CALL log_message ("In Main query" ,log_level_debug )
  DECLARE dqbegin_date_time = dq8 WITH private ,constant (cnvtdatetime (curdate ,curtime3 ) )
  SELECT INTO "nl:"
   FROM (diagnosis diag ),
    (nomenclature n ),
    (cmt_cross_map ccm ),
    (nomenclature n2 )
   PLAN (diag
    WHERE (diag.diagnosis_id = incoming_diag_rec->diagnosis_id ) )
    JOIN (n
    WHERE (n.nomenclature_id = diag.originating_nomenclature_id )
    AND (n.source_vocabulary_cd = 400_imo_cd )
    AND (n.active_ind = 1 )
    AND (n.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
    JOIN (ccm
    WHERE (ccm.concept_cki = n.concept_cki )
    AND (ccm.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) )
    AND (ccm.map_type_cd = 29223_imo_plus_icd10_cd ) )
    JOIN (n2
    WHERE (n2.concept_cki = ccm.target_concept_cki )
    AND (n2.active_ind = 1 )
    AND (n2.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
   ORDER BY ccm.map_type_cd ,
    n.source_string ,
    n.source_string
   HEAD REPORT
    d_cnt = 0 ,
    diagnosis_rec->diagnosis_id = incoming_diag_rec->diagnosis_id ,
    diagnosis_rec->person_id = incoming_diag_rec->person_id ,
    diagnosis_rec->encntr_id = incoming_diag_rec->encntr_id ,
    diagnosis_rec->diag_display = trim (diag.diagnosis_display ,3 )
   DETAIL
    d_cnt = (d_cnt + 1 ) ,
    stat = alterlist (diagnosis_rec->secondary_diag_rec ,d_cnt ) ,
    diagnosis_rec->secondary_diag_rec[d_cnt ].nomenclature_id = n2.nomenclature_id ,
    diagnosis_rec->secondary_diag_rec[d_cnt ].concept_cki = ccm.target_concept_cki ,
    diagnosis_rec->secondary_diag_rec[d_cnt ].source_id = ccm.source_identifier ,
    diagnosis_rec->secondary_diag_rec[d_cnt ].send_ind = 1 ,
    diagnosis_rec->secondary_diag_rec[d_cnt ].diag_disp = n2.source_string
   FOOT REPORT
    diagnosis_rec->diag_cnt = d_cnt
   WITH nocounter
  ;end select
  IF ((diagnosis_rec->diag_cnt = 0 ) )
   CALL log_message ("Nothing qualified for the main query" ,log_level_debug )
   GO TO exit_script
  ENDIF
  CALL log_message (build ("Exit Main query, Elapsed time in seconds:" ,datetimediff (cnvtdatetime (
      curdate ,curtime3 ) ,dqbegin_date_time ,5 ) ) ,log_level_debug )
 END ;Subroutine
 SUBROUTINE  otherdiagnosis (null )
  CALL log_message ("Begin:: Gather Other Diagnosis." ,log_level_debug )
  DECLARE dqbegin_date_time = dq8 WITH private ,constant (cnvtdatetime (curdate ,curtime3 ) )
  SELECT INTO "nl:"
   FROM (diagnosis diag ),
    (diagnosis diag2 ),
    (nomenclature n ),
    (cmt_cross_map ccm ),
    (nomenclature n2 )
   PLAN (diag
    WHERE (diag.diagnosis_id = diagnosis_rec->diagnosis_id ) )
    JOIN (diag2
    WHERE (diag2.person_id = diag.person_id )
    AND (diag2.encntr_id = diag.encntr_id )
    AND (diag2.diagnosis_id != diag.diagnosis_id )
    AND (diag2.active_ind = 1 ) )
    JOIN (n
    WHERE (n.nomenclature_id = diag2.originating_nomenclature_id )
    AND (n.source_vocabulary_cd = 400_imo_cd )
    AND (n.active_ind = 1 )
    AND (n.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
    JOIN (ccm
    WHERE (ccm.concept_cki = n.concept_cki )
    AND (ccm.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) )
    AND (ccm.map_type_cd = 29223_imo_plus_icd10_cd ) )
    JOIN (n2
    WHERE (n2.concept_cki = ccm.target_concept_cki )
    AND (n2.active_ind = 1 )
    AND (n2.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
   ORDER BY ccm.map_type_cd ,
    n.source_string ,
    n2.source_string
   HEAD REPORT
    od_cnt = 0
   DETAIL
    od_cnt = (od_cnt + 1 ) ,
    stat = alterlist (other_diag_rec->secondary_diag_rec ,od_cnt ) ,
    other_diag_rec->secondary_diag_rec[od_cnt ].nomenclature_id = n2.nomenclature_id ,
    other_diag_rec->secondary_diag_rec[od_cnt ].concept_cki = ccm.concept_cki ,
    other_diag_rec->secondary_diag_rec[od_cnt ].source_id = ccm.source_identifier ,
    pos = locateval (idx ,1 ,diagnosis_rec->diag_cnt ,ccm.source_id ,diagnosis_rec->
     secondary_diag_rec[idx ].source_id ) ,
    IF ((pos > 0 ) ) diagnosis_rec->secondary_diag_rec[pos ].send_ind = 0
    ENDIF
   FOOT REPORT
    other_diag_rec->diag_cnt = od_cnt
   WITH nocounter
  ;end select
  CALL log_message (build ("Exit Gather Other Diagnosis, Elapsed time in seconds:" ,datetimediff (
     cnvtdatetime (curdate ,curtime3 ) ,dqbegin_date_time ,5 ) ) ,log_level_debug )
 END ;Subroutine
 SUBROUTINE  builddiagnosisadd (null )
  CALL log_message ("Begin:: Build Rule Reply." ,log_level_debug )
  DECLARE dqbegin_date_time = dq8 WITH private ,constant (cnvtdatetime (curdate ,curtime3 ) )
  SELECT INTO "nl:"
   FROM (nomenclature n ),
    (cmt_cross_map ccm ),
    (nomenclature n2 )
   PLAN (n
    WHERE expand (idx ,1 ,diagnosis_rec->diag_cnt ,n.nomenclature_id ,diagnosis_rec->
     secondary_diag_rec[idx ].nomenclature_id )
    AND (n.active_ind = 1 )
    AND (n.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
    JOIN (ccm
    WHERE (ccm.concept_cki = n.concept_cki )
    AND (ccm.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) )
    AND (ccm.map_type_cd = 29223_icd10_imo_cd ) )
    JOIN (n2
    WHERE (n2.concept_cki = ccm.target_concept_cki )
    AND (n2.active_ind = 1 )
    AND (n2.end_effective_dt_tm > cnvtdatetime (curdate ,curtime ) ) )
   DETAIL
    pos = locateval (idx ,1 ,diagnosis_rec->diag_cnt ,n.nomenclature_id ,diagnosis_rec->
     secondary_diag_rec[idx ].nomenclature_id ) ,
    IF ((pos > 0 ) ) diagnosis_rec->secondary_diag_rec[idx ].combine_info = build2 (trim (cnvtstring
       (diagnosis_rec->secondary_diag_rec[pos ].nomenclature_id ,12 ,2 ) ) ,"NOMEN:" ,trim (n
       .concept_cki ,3 ) ,char (6 ) ,trim (diagnosis_rec->secondary_diag_rec[pos ].diag_disp ,3 ) )
    ENDIF
   WITH nocounter ,expand = 1
  ;end select
  FOR (z = 1 TO diagnosis_rec->diag_cnt )
   SET rule_name = build2 ("DIAG" ,trim (cnvtstring (z ) ) )
   IF ((diagnosis_rec->secondary_diag_rec[z ].send_ind = 1 ) )
    SET retval = 100
    SET bldmsg_cnt = (size (eksdata->bldmsg ,5 ) + 1 )
    SET lstat = alterlist (eksdata->bldmsg ,bldmsg_cnt )
    SET eksdata->bldmsg_cnt = (eksdata->bldmsg_cnt + 1 )
    SET eksdata->bldmsg[bldmsg_cnt ].name = rule_name
    SET eksdata->bldmsg[bldmsg_cnt ].text = diagnosis_rec->secondary_diag_rec[z ].combine_info
   ENDIF
  ENDFOR
  CALL log_message (build ("Exit Build Rule Reply, Elapsed time in seconds:" ,datetimediff (
     cnvtdatetime (curdate ,curtime3 ) ,dqbegin_date_time ,5 ) ) ,log_level_debug )
 END ;Subroutine
#exit_script
 IF ((diagnosis_rec->diag_cnt = 0 ) )
  SET log_message = "No secondary diagnoses were found"
  SET retval = 0
  GO TO exit_script
 ENDIF
 SET script_version = "000 05/19/2020 NT5990"
 CALL echo (build ("log_message ..." ,log_message ) )
 CALL echo (build ("retval ........" ,retval ) )
 CALL echo (build ("script_version ....." ,script_version ) )
END GO
