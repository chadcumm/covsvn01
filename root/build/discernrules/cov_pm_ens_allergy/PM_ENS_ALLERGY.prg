1)translate PM_ENS_ALLERGY go
;*** Generated by TRANSLATE, verify before re-including (Debug:N, Optimize:N) ***
DROP PROGRAM pm_ens_allergy :dba GO
CREATE PROGRAM pm_ens_allergy :dba
 SET gen_nbr_error = 3
 SET insert_error = 4
 SET update_error = 5
 SET replace_error = 6
 SET delete_error = 7
 SET undelete_error = 8
 SET remove_error = 9
 SET attribute_error = 10
 SET lock_error = 11
 SET none_found = 12
 SET select_error = 13
 SET data_error = 14
 SET general_error = 15
 SET reactivate_error = 16
 SET eff_error = 17
 SET ccl_error = 18
 SET recalc_error = 19
 SET input_error = 20
 SET exe_error = 21
 SET failed = false
 SET table_name = fillstring (50 ," " )
 SET serrmsg = fillstring (132 ," " )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 IF ((validate (reply ,"0" ) = "0" ) )
  RECORD reply (
    1 person_org_sec_on = i2
    1 allergy_cnt = i4
    1 allergy [* ]
      2 allergy_instance_id = f8
      2 allergy_id = f8
      2 adr_added_ind = i2
      2 status_flag = i2
      2 reaction_cnt = i4
      2 reaction [* ]
        3 reaction_id = f8
        3 status_flag = i2
      2 allergy_comment_cnt = i4
      2 allergy_comment [* ]
        3 allergy_comment_id = f8
        3 status_flag = i2
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 FREE RECORD comment
 RECORD comment (
   1 qual_knt = i4
   1 qual [* ]
     2 allergy_comment_id = f8
     2 allergy_id = f8
     2 allergy_instance_id = f8
     2 allergy_comment = vc
     2 comment_dt_tm = dq8
     2 comment_tz = i4
     2 comment_prsnl_id = f8
     2 active_ind = i2
     2 active_status_cd = f8
     2 active_status_dt_tm = dq8
     2 active_status_prsnl_id = f8
     2 beg_effective_dt_tm = dq8
     2 beg_effective_tz = i4
     2 end_effective_dt_tm = dq8
     2 contributor_system_cd = f8
     2 data_status_cd = f8
     2 data_status_dt_tm = dq8
     2 data_status_prsnl_id = f8
 )
 FREE RECORD reaction
 RECORD reaction (
   1 qual_knt = i4
   1 qual [* ]
     2 reaction_id = f8
     2 allergy_id = f8
     2 allergy_instance_id = f8
     2 reaction_nom_id = f8
     2 reaction_ftdesc = vc
     2 active_ind = i2
     2 active_status_cd = f8
     2 active_status_dt_tm = dq8
     2 active_status_prsnl_id = f8
     2 beg_effective_dt_tm = dq8
     2 end_effective_dt_tm = dq8
     2 contributor_system_cd = f8
     2 data_status_cd = f8
     2 data_status_dt_tm = dq8
     2 data_status_prsnl_id = f8
 )
 SET stat = alterlist (reply->allergy ,request->allergy_cnt )
 SET reply->status_data.status = "F"
 DECLARE history_combine = i2 WITH public ,noconstant (false )
 SET code_value = 0.0
 SET code_set = 0
 SET cdf_meaning = fillstring (12 ," " )
 SET interface_type_cd = 0.0
 SET iadd = 1
 SET upd = 2
 SET none = 0
 SET multi_add = 3
 SET reviewed = 4
 SET allergy_action = none
 SET reaction_action = none
 SET comment_action = none
 SET current_active_ind = 0
 SET current_reaction_act_ind = 0
 SET new_id = 0.0
 SET existing_comment_nbr = 0
 SET comment_exist = false
 SET cancel_comment = false
 SET load_existing_comments_exec = false
 SET knt = 0
 SET found_nomen_id = false
 FREE SET req_out_add
 RECORD req_out_add (
   1 message
     2 cqminfo
       3 appname = vc
       3 contribalias = vc
       3 contribrefnum = vc
       3 contribdttm = dq8
       3 priority = i4
       3 class = vc
       3 type = vc
       3 subtype = vc
       3 subtype_detail = vc
       3 debug_ind = i4
       3 verbosity_flag = i4
     2 esoinfo
       3 scriptcontrolval = ui4
       3 scriptcontrolargs = vc
       3 dbnullprefix = vc
       3 aliasprefix = vc
       3 codeprefix = vc
       3 personprefix = vc
       3 eprsnlprefix = vc
       3 prsnlprefix = vc
       3 orderprefix = vc
       3 orgprefix = vc
       3 hlthplanprefix = vc
       3 nomenprefix = vc
       3 itemprefix = vc
       3 longlist [* ]
         4 lval = i4
         4 strmeaning = vc
       3 stringlist [* ]
         4 strval = vc
         4 strmeaning = vc
       3 doublelist [* ]
         4 dval = f8
         4 strmeaning = vc
       3 sendobjectind = ui1
     2 triginfo [* ]
       3 allergy_cnt = i4
       3 allergy [* ]
         4 interface_action_cd = f8
         4 allergy_instance_id = f8
         4 allergy_id = f8
         4 person_id = f8
         4 encntr_id = f8
         4 created_dt_tm = dq8
         4 substance_nom_id = f8
         4 substance_ftdesc = vc
         4 substance_type_cd = f8
         4 reaction_class_cd = f8
         4 severity_cd = f8
         4 source_of_info_cd = f8
         4 source_of_info_ft = vc
         4 onset_dt_tm = dq8
         4 reaction_status_cd = f8
         4 cancel_reason_cd = f8
         4 cancel_dt_tm = dq8
         4 cancel_prsnl_id = f8
         4 active_ind = i2
         4 active_status_cd = f8
         4 active_status_dt_tm = dq8
         4 active_status_prsnl_id = f8
         4 beg_effective_dt_tm = dq8
         4 end_effective_dt_tm = dq8
         4 contributor_system_cd = f8
         4 data_status_cd = f8
         4 data_status_dt_tm = dq8
         4 data_status_prsnl_id = f8
         4 verified_status_flag = i2
         4 updt_dt_tm = dq8
         4 rec_src_vocab_cd = f8
         4 rec_src_identifier = vc
         4 rec_src_string = vc
         4 reviewed_prsnl_id = f8
         4 reviewed_dt_tm = dq8
         4 nomen
           5 nomenclature_id = f8
           5 source_string = vc
           5 source_identifier = vc
           5 source_vocabulary_cd = f8
         4 reaction_cnt = i4
         4 reaction [* ]
           5 interface_action_cd = f8
           5 reaction_id = f8
           5 allergy_instance_id = f8
           5 allergy_id = f8
           5 reaction_nom_id = f8
           5 reaction_ftdesc = vc
           5 active_ind = i2
           5 active_status_cd = f8
           5 active_status_dt_tm = dq8
           5 active_status_prsnl_id = f8
           5 beg_effective_dt_tm = dq8
           5 end_effective_dt_tm = dq8
           5 contributor_system_cd = f8
           5 data_status_cd = f8
           5 data_status_dt_tm = dq8
           5 data_status_prsnl_id = f8
           5 nomen
             6 nomenclature_id = f8
             6 source_string = vc
             6 source_identifier = vc
             6 source_vocabulary_cd = f8
         4 allergy_comment_cnt = i4
         4 allergy_comment [* ]
           5 interface_action_cd = f8
           5 allergy_comment_id = f8
           5 allergy_instance_id = f8
           5 allergy_id = f8
           5 comment_dt_tm = dq8
           5 comment_prsnl_id = f8
           5 allergy_comment = vc
           5 active_ind = i2
           5 active_status_cd = f8
           5 active_status_dt_tm = dq8
           5 active_status_prsnl_id = f8
           5 beg_effective_dt_tm = dq8
           5 end_effective_dt_tm = dq8
           5 contributor_system_cd = f8
           5 data_status_cd = f8
           5 data_status_dt_tm = dq8
           5 data_status_prsnl_id = f8
         4 sub_concept_cki = vc
   1 params [* ]
 )
 FREE RECORD nka_nomen_id_list
 RECORD nka_nomen_id_list (
   1 knt = i4
   1 id [* ]
     2 val = f8
 )
 FREE RECORD substance_nomen_id_list
 RECORD substance_nomen_id_list (
   1 knt = i4
   1 id [* ]
     2 val = f8
 )
 SET stat = alterlist (req_out_add->message.triginfo ,1 )
 SET ob_add_list_init = true
 DECLARE pco_combine = i2 WITH public ,noconstant (0 )
 DECLARE combine_away = i2 WITH public ,noconstant (0 )
 SET ob_trigger_on = false
 SET allergy_pure_dup = true
 SET allergy_dup = true
 SET allergy_reviewed = false
 SET send_ob_add_req = false
 SET ob_i = 0
 SET ob_n = 0
 SET ob_q = 0
 SET interface_action_cd = 0.0
 SET ob_add_cd = 0.0
 SET ob_upd_cd = 0.0
 SET now_dt_tm = cnvtdatetime (curdate ,curtime3 )
 SET reaction_status_dt_tm = cnvtdatetime (now_dt_tm )
 SET canceled_cd = 0.0
 SET canceled_dt_tm = cnvtdatetime (curdate ,curtime3 )
 SET reaction_active_ind = 1
 SET instance_is_current = true
 SET reaction_is_current = true
 DECLARE user_tz = i4 WITH public ,noconstant (0 )
 DECLARE sys_tz = i4 WITH public ,noconstant (0 )
 DECLARE nka_nomen_id = f8 WITH public ,noconstant (0.0 )
 DECLARE nka_nomen_str = vc WITH public ,noconstant (" " )
 DECLARE nka_src_vocab_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE nka_check = i2 WITH public ,noconstant (false )
 DECLARE upd_encntr = i2 WITH public ,noconstant (true )
 DECLARE org_id = f8 WITH public ,noconstant (0.0 )
 DECLARE prev_org_id = f8 WITH public ,noconstant (0.0 )
 DECLARE found_org_id = i2 WITH public ,noconstant (false )
 DECLARE found_prev_adr = i2 WITH public ,noconstant (false )
 DECLARE dminfo_ok = i2 WITH private ,noconstant (false )
 DECLARE encntr_org_sec_on = i2 WITH public ,noconstant (false )
 DECLARE person_org_sec_on = i2 WITH public ,noconstant (false )
 DECLARE nkma_check = i2 WITH public ,noconstant (false )
 DECLARE nkma_nomen_str = vc WITH public ,noconstant ("No Known Medication Allergies" )
 DECLARE nkma_concept_cki = vc WITH public ,noconstant (" " )
 DECLARE nkma_src_vocab_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE cat_drug_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE sub_nomen_text = vc WITH public ,noconstant (" " )
 DECLARE mul_algcat_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE mul_drug_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE dgddbmolcd = f8 WITH public ,noconstant (0.0 )
 DECLARE dgddbsubstcd = f8 WITH public ,noconstant (0.0 )
 DECLARE dgddbprodlncd = f8 WITH public ,noconstant (0.0 )
 DECLARE dgddbactgrpcd = f8 WITH public ,noconstant (0.0 )
 IF ((validate (request->disable_inactive_person_ens ,- (9 ) ) != - (9 ) ) )
  IF ((request->disable_inactive_person_ens = 1 ) )
   SET binactive = false
   SET eknt = 0
   SELECT INTO "nl:"
    p.active_ind
    FROM (person p )
    PLAN (p
     WHERE expand (eknt ,1 ,request->allergy_cnt ,p.person_id ,request->allergy[eknt ].person_id )
     AND (p.active_ind = 0 ) )
    DETAIL
     binactive = true
    WITH nocounter
   ;end select
   IF ((binactive = true ) )
    SET failed = data_error
    SET table_name = "PERSON"
    GO TO exit_script
   ENDIF
  ENDIF
 ENDIF
 SET dminfo_ok = validate (ccldminfo->mode ,0 )
 IF ((dminfo_ok = 1 ) )
  SET encntr_org_sec_on = ccldminfo->sec_org_reltn
  SET person_org_sec_on = ccldminfo->person_org_sec
 ELSE
  SET ierrcode = error (serrmsg ,1 )
  SET ierrcode = 0
  SELECT INTO "nl:"
   FROM (dm_info di )
   PLAN (di
    WHERE (di.info_domain = "SECURITY" )
    AND (di.info_name IN ("SEC_ORG_RELTN" ,
    "PERSON_ORG_SEC" ) )
    AND (di.info_number = 1 ) )
   DETAIL
    IF ((di.info_name = "SEC_ORG_RELTN" )
    AND (di.info_number = 1 ) ) encntr_org_sec_on = 1
    ELSEIF ((di.info_name = "PERSON_ORG_SEC" ) ) person_org_sec_on = 1
    ENDIF
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "DM_INFO"
   GO TO exit_script
  ENDIF
 ENDIF
 IF ((person_org_sec_on = true )
 AND (encntr_org_sec_on = true ) )
  SET reply->person_org_sec_on = true
 ENDIF
 IF ((curutc > 0 ) )
  SET user_tz = curtimezoneapp
  SET sys_tz = curtimezonesys
 ELSE
  SET user_tz = 0
  SET sys_tz = 0
 ENDIF
 SET code_set = 12100
 SET cdf_meaning = "MUL.ALGCAT"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,mul_algcat_cd )
 IF ((mul_algcat_cd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET cdf_meaning = "MUL.DRUG"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,mul_drug_cd )
 IF ((mul_drug_cd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to retrieve the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET cdf_meaning = "GDDB.MOL"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,dgddbmolcd )
 IF ((dgddbmolcd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET cdf_meaning = "GDDB.SUBST"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,dgddbsubstcd )
 IF ((dgddbsubstcd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET cdf_meaning = "GDDB.PRODLN"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,dgddbprodlncd )
 IF ((dgddbprodlncd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET cdf_meaning = "GDDB.ACTGRP"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,dgddbactgrpcd )
 IF ((dgddbactgrpcd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   Get NKMA CONCEPT_CKI" )
 CALL echo ("***" )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SET stat = uar_get_meaning_by_codeset (400 ,"CERNER" ,1 ,nkma_src_vocab_cd )
 IF ((stat != 0 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to retrieve the code_value for cdf_meaning " ,
   "CERNER from code_set 400" )
  GO TO exit_script
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (nomenclature n )
  PLAN (n
   WHERE (n.source_string_keycap = cnvtupper (nkma_nomen_str ) )
   AND (n.source_vocabulary_cd = nkma_src_vocab_cd ) )
  HEAD REPORT
   nkma_check = true ,
   nkma_concept_cki = n.concept_cki
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NOMENCLATURE"
  GO TO exit_script
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   Get NKA Nomen_Id" )
 CALL echo ("***" )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  nvp.name_value_prefs_id
  FROM (name_value_prefs nvp ),
   (app_prefs ap )
  PLAN (nvp
   WHERE (nvp.pvc_name = "NKA_SOURCE_STRING" )
   AND (nvp.parent_entity_name = "APP_PREFS" )
   AND (nvp.pvc_value > " " ) )
   JOIN (ap
   WHERE (ap.app_prefs_id = nvp.parent_entity_id )
   AND (ap.application_number = 600005 )
   AND (ap.position_cd = 0.0 )
   AND (ap.prsnl_id = 0.0 ) )
  HEAD REPORT
   nka_check = true ,
   nka_nomen_str = trim (nvp.pvc_value )
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NAME_VALUE_PREFS"
  GO TO exit_script
 ENDIF
 IF ((nka_check = false ) )
  GO TO skip_get_nka_id
 ENDIF
 SET stat = uar_get_meaning_by_codeset (400 ,"ALLERGY" ,1 ,nka_src_vocab_cd )
 IF ((stat != 0 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to retrieve the code_value for cdf_meaning " ,
   "ALLERGY from code_set 400" )
  GO TO exit_script
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (nomenclature n )
  PLAN (n
   WHERE (n.source_string_keycap = cnvtupper (nka_nomen_str ) )
   AND (n.source_vocabulary_cd = nka_src_vocab_cd ) )
  HEAD REPORT
   knt = 0
  DETAIL
   knt = (knt + 1 ) ,
   IF ((mod (knt ,10 ) = 1 ) ) stat = alterlist (nka_nomen_id_list->id ,(knt + 9 ) )
   ENDIF
   ,nka_nomen_id_list->id[knt ].val = n.nomenclature_id
  FOOT REPORT
   stat = alterlist (nka_nomen_id_list->id ,knt ) ,
   nka_nomen_id_list->knt = knt
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NAME_VALUE_PREFS"
  GO TO exit_script
 ENDIF
 IF ((nka_nomen_id_list->knt < 1 ) )
  SET nka_check = false
 ENDIF
#skip_get_nka_id
 SET code_value = 0.0
 SET code_set = 12025
 SET cdf_meaning = "CANCELED"
 EXECUTE cpm_get_cd_for_cdf
 SET canceled_cd = code_value
 IF ((code_value < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
    cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET code_value = 0.0
 SET code_set = 12025
 SET cdf_meaning = "ACTIVE"
 EXECUTE cpm_get_cd_for_cdf
 SET reaction_status_cd = code_value
 IF ((code_value < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
    cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 SET code_value = 0.0
 SET code_set = 12025
 SET cdf_meaning = "PROPOSED"
 EXECUTE cpm_get_cd_for_cdf
 SET proposed_cd = code_value
 IF ((code_value < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
    cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 IF ((reqdata->data_status_cd < 1 ) )
  SET code_set = 8
  SET cdf_meaning = "AUTH"
  EXECUTE cpm_get_cd_for_cdf
  SET auth_cd = code_value
  IF ((code_value < 1 ) )
   SET failed = select_error
   SET table_name = "CODE_VALUE"
   SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
     cnvtstring (code_set ) ) )
   GO TO exit_script
  ENDIF
 ELSE
  SET auth_cd = reqdata->data_status_cd
 ENDIF
 SET code_value = 0.0
 SET code_set = 8
 SET cdf_meaning = "UNAUTH"
 EXECUTE cpm_get_cd_for_cdf
 SET unauth_cd = code_value
 IF ((code_value < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
    cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 IF ((reqdata->active_status_cd < 1 ) )
  SET code_value = 0.0
  SET code_set = 48
  SET cdf_meaning = "ACTIVE"
  SET active_cd = code_value
  IF ((code_value < 1 ) )
   SET failed = select_error
   SET table_name = "CODE_VALUE"
   SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
     cnvtstring (code_set ) ) )
   GO TO exit_script
  ENDIF
 ELSE
  SET active_cd = reqdata->active_status_cd
 ENDIF
 IF ((reqdata->inactive_status_cd < 1 ) )
  SET code_value = 0.0
  SET code_set = 48
  SET cdf_meaning = "INACTIVE"
  SET inactive_cd = code_value
  IF ((code_value < 1 ) )
   SET failed = select_error
   SET table_name = "CODE_VALUE"
   SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
     cnvtstring (code_set ) ) )
   GO TO exit_script
  ENDIF
 ELSE
  SET inactive_cd = reqdata->inactive_status_cd
 ENDIF
 SET code_value = 0.0
 SET code_set = 12020
 SET cdf_meaning = "DRUG"
 EXECUTE cpm_get_cd_for_cdf
 SET cat_drug_cd = code_value
 IF ((code_value < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
    cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 IF ((request->allergy[1 ].rec_src_vocab_cd < 0 ) )
  SET pco_combine = true
  IF ((request->allergy[1 ].rec_src_vocab_cd < - (1 ) ) )
   SET combine_away = true
  ENDIF
  GO TO skip_ob_check
 ENDIF
 SET code_value = 0.0
 SET code_set = 19169
 SET cdf_meaning = "AL1_ALLERGY"
 EXECUTE cpm_get_cd_for_cdf
 SET interface_type_cd = code_value
 IF ((code_value > 0 ) )
  SET ierrcode = 0
  SELECT INTO "nl:"
   FROM (eso_trigger et )
   PLAN (et
    WHERE (et.interface_type_cd = interface_type_cd )
    AND (et.active_ind = 1 ) )
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "ESO_TRIGGER"
   GO TO exit_script
  ENDIF
  IF ((curqual > 0 ) )
   CALL echo ("***" )
   CALL echo ("***   ob_trigger_on = TRUE" )
   CALL echo ("***" )
   SET ob_trigger_on = true
   SET code_value = 0.0
   SET code_set = 22229
   SET cdf_meaning = "ADD"
   EXECUTE cpm_get_cd_for_cdf
   SET ob_add_cd = code_value
   IF ((code_value < 1 ) )
    SET failed = select_error
    SET table_name = "CODE_VALUE"
    SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
      cnvtstring (code_set ) ) )
    GO TO exit_script
   ENDIF
   SET code_value = 0.0
   SET code_set = 22229
   SET cdf_meaning = "UPDATE"
   EXECUTE cpm_get_cd_for_cdf
   SET ob_upd_cd = code_value
   IF ((code_value < 1 ) )
    SET failed = select_error
    SET table_name = "CODE_VALUE"
    SET serrmsg = concat ("cdf_meaning " ,trim (cdf_meaning ) ," not found in code_set " ,trim (
      cnvtstring (code_set ) ) )
    GO TO exit_script
   ENDIF
  ENDIF
 ENDIF
#skip_ob_check
 SET istart = 0
#start_for_loop
 CALL echo ("***" )
 CALL echo ("***   START_FOR_LOOP" )
 CALL echo ("***" )
 SET istart = (istart + 1 )
 IF ((istart > request->allergy_cnt ) )
  GO TO end_for_loop
 ENDIF
 FOR (i = istart TO request->allergy_cnt )
  CALL echo ("***" )
  CALL echo (build ("***   i :" ,i ) )
  CALL echo ("***" )
  SET ob_n = 0
  SET reaction->qual_knt = 0
  SET ob_q = 0
  SET comment->qual_knt = 0
  SET load_existing_comments_exec = false
  SET allergy_action = none
  SET reaction_action = none
  SET comment_action = none
  SET allergy_dup = true
  SET allergy_pure_dup = true
  SET allergy_reviewed = false
  SET found_org_id = false
  SET org_id = 0.0
  SET prev_org_id = 0.0
  IF ((request->allergy[i ].reaction_status_cd < 1 ) )
   SET request->allergy[i ].reaction_status_cd = reaction_status_cd
  ENDIF
  SET instance_is_current = true
  SET allergy_review_hist_needed = false
  CALL allergy_review_hist_needed (i )
  CALL echo ("***" )
  CALL echo ("***   Validate ENCNTR_ID 1" )
  CALL echo ("***" )
  IF ((request->allergy[i ].encntr_id > 0 ) )
   SET upd_encntr = true
   SET ierrcode = error (serrmsg ,1 )
   SET ierrcode = 0
   SELECT INTO "nl:"
    FROM (encounter e )
    PLAN (e
     WHERE (e.encntr_id = request->allergy[i ].encntr_id )
     AND (e.person_id = request->allergy[i ].person_id ) )
    DETAIL
     upd_encntr = false
    WITH nocounter
   ;end select
   SET ierrcode = error (serrmsg ,1 )
   IF ((ierrcode > 0 ) )
    SET failed = select_error
    SET table_name = "VALIDATE_ENCNTR"
    GO TO exit_script
   ENDIF
   IF ((upd_encntr = true ) )
    SET request->allergy[i ].encntr_id = 0.0
   ENDIF
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   Get ORG_ID" )
  CALL echo ("***" )
  IF ((reply->person_org_sec_on = true ) )
   IF ((request->allergy[i ].encntr_id != 0.0 ) )
    SELECT INTO "nl:"
     FROM (encounter e )
     PLAN (e
      WHERE (e.encntr_id = request->allergy[i ].encntr_id )
      AND (e.organization_id != 0.0 ) )
     DETAIL
      found_org_id = true ,
      org_id = e.organization_id
     WITH nocounter
    ;end select
   ELSE
    SET found_org_id = true
    SET org_id = 0.0
   ENDIF
  ELSE
   SET found_org_id = true
   SET org_id = 0.0
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   Ensure Allergy" )
  CALL echo ("***" )
  IF ((request->allergy[i ].allergy_instance_id > 0 ) )
   CALL echo ("***" )
   CALL echo ("***   Possible Allergy Update" )
   CALL echo ("***" )
   CALL echo ("***" )
   CALL echo ("***   IS_INSTANCE_CURRENT" )
   CALL echo ("***" )
   CALL is_instance_current (i )
   IF ((ierrcode > 0 ) )
    SET failed = select_error
    SET table_name = "INSTANCE_CHECK"
    GO TO exit_script
   ENDIF
   IF ((instance_is_current = true ) )
    SET allergy_dup = true
    CALL echo ("***" )
    CALL echo ("***   IS_ALLERGY_PURE_DUP" )
    CALL echo ("***" )
    CALL is_allergy_pure_dup (i )
    IF ((ierrcode > 0 ) )
     SET failed = select_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   Validate ENCNTR_ID 2" )
    CALL echo ("***" )
    IF ((request->allergy[i ].encntr_id > 0 ) )
     SET upd_encntr = true
     SET ierrcode = error (serrmsg ,1 )
     SET ierrcode = 0
     SELECT INTO "nl:"
      FROM (encounter e )
      PLAN (e
       WHERE (e.encntr_id = request->allergy[i ].encntr_id )
       AND (e.person_id = request->allergy[i ].person_id ) )
      DETAIL
       upd_encntr = false
      WITH nocounter
     ;end select
     SET ierrcode = error (serrmsg ,1 )
     IF ((ierrcode > 0 ) )
      SET failed = select_error
      SET table_name = "VALIDATE_ENCNTR"
      GO TO exit_script
     ENDIF
     IF ((upd_encntr = true ) )
      SET request->allergy[i ].encntr_id = 0.0
     ENDIF
    ENDIF
   ENDIF
  ELSE
   CALL echo ("***" )
   CALL echo ("***   Possible New Allergy" )
   CALL echo ("***" )
   CALL echo ("***" )
   CALL echo ("***   IS_ALLERGY_DUP" )
   CALL echo ("***" )
   CALL is_allergy_dup (i )
   IF ((ierrcode > 0 ) )
    SET failed = select_error
    SET table_name = "ALLERGY"
    GO TO exit_script
   ENDIF
   IF ((allergy_dup = true ) )
    CALL echo ("***" )
    CALL echo ("***   IS_ALLERGY_PURE_DUP" )
    CALL echo ("***" )
    CALL is_allergy_pure_dup (i )
    IF ((ierrcode > 0 ) )
     SET failed = select_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   Validate ENCNTR_ID 3" )
    CALL echo ("***" )
    IF ((request->allergy[i ].encntr_id > 0 ) )
     SET upd_encntr = true
     SET ierrcode = error (serrmsg ,1 )
     SET ierrcode = 0
     SELECT INTO "nl:"
      FROM (encounter e )
      PLAN (e
       WHERE (e.encntr_id = request->allergy[i ].encntr_id )
       AND (e.person_id = request->allergy[i ].person_id ) )
      DETAIL
       upd_encntr = false
      WITH nocounter
     ;end select
     SET ierrcode = error (serrmsg ,1 )
     IF ((ierrcode > 0 ) )
      SET failed = select_error
      SET table_name = "VALIDATE_ENCNTR"
      GO TO exit_script
     ENDIF
     IF ((upd_encntr = true ) )
      SET request->allergy[i ].encntr_id = 0.0
     ENDIF
    ENDIF
   ENDIF
  ENDIF
  IF ((request->allergy[i ].created_prsnl_id = - (999 ) ) )
   SET request->allergy[i ].created_prsnl_id = 0
  ENDIF
  IF ((instance_is_current = true ) )
   IF ((allergy_dup = true )
   AND (allergy_pure_dup = true ) )
    IF (validate (request->fail_on_duplicate ) )
     IF ((request->fail_on_duplicate = 1 ) )
      SET reply->allergy_cnt = i
      SET reply->allergy[i ].allergy_instance_id = request->allergy[i ].allergy_instance_id
      SET reply->allergy[i ].allergy_id = request->allergy[i ].allergy_id
      SET failed = insert_error
      SET table_name = "ALLERGY"
      SET serrmsg = concat ("Failed to insert duplicate allergy - " ,"fail_on_duplicate is enable" )
      GO TO exit_script
     ENDIF
    ENDIF
   ENDIF
   IF ((allergy_dup = false ) )
    CALL echo ("***" )
    CALL echo ("***   Insert New Allergy" )
    CALL echo ("***" )
    SET allergy_action = iadd
    IF ((request->allergy[i ].pre_generated_id = 0.0 ) )
     CALL echo ("***" )
     CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
     CALL echo ("***" )
     CALL get_next_allergy_seq (i )
     IF ((ierrcode > 0 ) )
      SET failed = gen_nbr_error
      SET table_name = "HEALTH_STATUS_SEQ"
      GO TO exit_script
     ENDIF
    ENDIF
    IF ((request->allergy[i ].pre_generated_id > 0.0 ) )
     SET new_id = request->allergy[i ].pre_generated_id
    ENDIF
    SET request->allergy[i ].allergy_instance_id = new_id
    IF ((request->allergy[i ].cmb_flag != 2 ) )
     SET request->allergy[i ].allergy_id = new_id
    ENDIF
    SET reaction_status_dt_tm = cnvtdatetime (now_dt_tm )
    IF ((request->allergy[i ].reaction_status_cd = canceled_cd ) )
     IF ((((request->allergy[i ].cancel_dt_tm < 1 ) ) OR ((request->allergy[i ].cancel_dt_tm = null
     ) )) )
      SET request->allergy[i ].cancel_dt_tm = cnvtdatetime (curdate ,curtime3 )
     ENDIF
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   INSERT_ALLERGY" )
    CALL echo ("***" )
    CALL insert_allergy (i )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
   ELSEIF ((allergy_dup = true )
   AND (allergy_pure_dup = false ) )
    IF (validate (request->fail_on_duplicate ) )
     IF ((request->fail_on_duplicate = 1 )
     AND (request->allergy[i ].allergy_instance_id = 0.0 )
     AND (request->allergy[i ].allergy_id = 0.0 ) )
      SET reply->allergy_cnt = i
      SET reply->allergy[i ].allergy_instance_id = request->allergy[i ].allergy_instance_id
      SET reply->allergy[i ].allergy_id = request->allergy[i ].allergy_id
      SET failed = update_error
      SET table_name = "ALLERGY"
      SET serrmsg = concat ("Failed to update duplicate allergy - " ,"fail_on_duplicate is enable" )
      GO TO exit_script
     ENDIF
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   Update Existing Allergy" )
    CALL echo ("***" )
    SET allergy_action = upd
    CALL echo ("***" )
    CALL echo ("***   DEACTIVATE_ALLERGY" )
    CALL echo ("***" )
    CALL deactivate_allergy (i )
    IF ((ierrcode > 0 ) )
     SET failed = update_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
    IF ((request->allergy[i ].pre_generated_id = 0.0 ) )
     CALL echo ("***" )
     CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
     CALL echo ("***" )
     CALL get_next_allergy_seq (i )
     IF ((ierrcode > 0 ) )
      SET failed = gen_nbr_error
      SET table_name = "HEALTH_STATUS_SEQ"
      GO TO exit_script
     ENDIF
    ENDIF
    IF ((request->allergy[i ].pre_generated_id > 0.0 ) )
     SET new_id = request->allergy[i ].pre_generated_id
    ENDIF
    SET request->allergy[i ].allergy_instance_id = new_id
    CALL echo ("***" )
    CALL echo ("***   INSERT_ALLERGY" )
    CALL echo ("***" )
    CALL insert_allergy (i )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
   ELSEIF ((allergy_reviewed = true ) )
    CALL echo ("***" )
    CALL echo ("***   Review Allergy" )
    CALL echo ("***" )
    SET allergy_action = reviewed
    CALL echo ("***" )
    CALL echo ("***   STAMP_REVIEWED" )
    CALL echo ("***" )
    CALL stamp_reviewed (i )
    IF ((ierrcode > 0 ) )
     SET failed = update_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
   ELSEIF ((current_active_ind = 0 )
   AND (request->allergy[i ].active_ind = 1 ) )
    CALL echo ("***" )
    CALL echo ("***   Insert Active Allergy" )
    CALL echo ("***" )
    SET allergy_action = upd
    CALL echo ("***" )
    CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
    CALL echo ("***" )
    CALL get_next_allergy_seq (i )
    IF ((ierrcode > 0 ) )
     SET failed = gen_nbr_error
     SET table_name = "HEALTH_STATUS_SEQ"
     GO TO exit_script
    ENDIF
    SET request->allergy[i ].allergy_instance_id = new_id
    CALL echo ("***" )
    CALL echo ("***   INSERT_ALLERGY" )
    CALL echo ("***" )
    CALL insert_allergy (i )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
   ELSEIF ((current_active_ind = 1 )
   AND (request->allergy[i ].active_ind = 0 ) )
    CALL echo ("***" )
    CALL echo ("***   Deactivate Existing Allergy" )
    CALL echo ("***" )
    SET allergy_action = upd
    CALL echo ("***" )
    CALL echo ("***   DEACTIVATE_ALLERGY" )
    CALL echo ("***" )
    CALL deactivate_allergy (i )
    IF ((ierrcode > 0 ) )
     SET failed = update_error
     SET table_name = "ALLERGY"
     GO TO exit_script
    ENDIF
   ENDIF
  ELSE
   SET reply->allergy[i ].status_flag = - (1 )
  ENDIF
  SET reply->allergy_cnt = i
  SET reply->allergy[i ].allergy_instance_id = request->allergy[i ].allergy_instance_id
  SET reply->allergy[i ].allergy_id = request->allergy[i ].allergy_id
  IF ((instance_is_current = false ) )
   SET istart = i
   IF (validate (request->fail_on_duplicate ) )
    IF ((request->fail_on_duplicate = 1 ) )
     SET failed = insert_error
     SET table_name = "ALLERGY"
     SET serrmsg = concat ("Failed to insert allergy using existing allergy ids -" ,
      "fail_on_duplicate is enable" )
     GO TO exit_script
    ENDIF
   ENDIF
   GO TO start_for_loop
  ENDIF
  SET reply->allergy[i ].reaction_cnt = request->allergy[i ].reaction_cnt
  SET stat = alterlist (reply->allergy[i ].reaction ,reply->allergy[i ].reaction_cnt )
  SET reply->allergy[i ].allergy_comment_cnt = request->allergy[i ].allergy_comment_cnt
  SET stat = alterlist (reply->allergy[i ].allergy_comment ,reply->allergy[i ].allergy_comment_cnt )
  IF ((prev_org_id != org_id )
  AND (request->allergy[i ].allergy_id != request->allergy[i ].allergy_instance_id ) )
   SET found_prev_adr = false
   SELECT INTO "nl:"
    FROM (activity_data_reltn adr )
    PLAN (adr
     WHERE (adr.activity_entity_id = request->allergy[i ].allergy_id )
     AND (adr.activity_entity_name = "ALLERGY" )
     AND (adr.reltn_entity_name = "ORGANIZATION" )
     AND (adr.reltn_entity_id = prev_org_id ) )
    DETAIL
     found_prev_adr = true
    WITH nocounter
   ;end select
   SET ierrcode = error (serrmsg ,0 )
   IF ((ierrcode > 0 ) )
    SET failed = select_error
    SET table_name = "ACTIVITY_DATA_RELTN"
    GO TO exit_script
   ENDIF
   IF ((found_prev_adr = false ) )
    SET ierrcode = error (serrmsg ,0 )
    SET ierrcode = 0
    INSERT FROM (activity_data_reltn adr )
     SET adr.activity_data_reltn_id = cnvtreal (seq (pco_seq ,nextval ) ) ,
      adr.activity_entity_id = request->allergy[i ].allergy_id ,
      adr.person_id = request->allergy[i ].person_id ,
      adr.activity_entity_name = "ALLERGY" ,
      adr.reltn_entity_id = prev_org_id ,
      adr.reltn_entity_name = "ORGANIZATION" ,
      adr.activity_entity_inst_id = request->allergy[i ].allergy_instance_id ,
      adr.reltn_entity_all_ind = 0
     PLAN (adr
      WHERE (1 = 1 ) )
     WITH nocounter
    ;end insert
    SET ierrcode = error (serrmsg ,0 )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "ACTIVITY_DATA_RELTN"
     GO TO exit_script
    ENDIF
    SET reply->allergy[i ].adr_added_ind = true
   ENDIF
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   Ensure Reaction" )
  CALL echo ("***" )
  SET reaction_is_current = true
  SET reaction_pure_dup = true
  SET reaction_dup = true
  SET reaction_action = none
  IF ((request->allergy[i ].reaction_cnt > 0 ) )
   IF ((allergy_action = iadd )
   AND (history_combine = true ) )
    CALL echo ("***" )
    CALL echo ("***   Handle Reactions for History Combine" )
    CALL echo ("***" )
    FOR (j = 1 TO request->allergy[i ].reaction_cnt )
     IF ((request->allergy[i ].reaction[j ].reaction_id < 1 ) )
      SET reaction_action = iadd
      CALL echo ("***" )
      CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
      CALL echo ("***" )
      CALL get_next_allergy_seq (i )
      IF ((ierrcode > 0 ) )
       SET failed = gen_nbr_error
       SET table_name = "HEALTH_STATUS_SEQ"
       GO TO exit_script
      ENDIF
      SET request->allergy[i ].reaction[j ].reaction_id = new_id
      CALL echo ("***" )
      CALL echo ("***   INSERT_REACTION" )
      CALL echo ("***" )
      CALL insert_reaction (i ,j )
      IF ((ierrcode > 0 ) )
       SET failed = insert_error
       SET table_name = "REACTION"
       GO TO exit_script
      ENDIF
     ENDIF
    ENDFOR
   ELSEIF ((allergy_action = iadd ) )
    CALL echo ("***" )
    CALL echo ("***   Handle Reactions for New Allergy" )
    CALL echo ("***" )
    SET reaction_action = multi_add
    CALL echo ("***" )
    CALL echo ("***   INSERT_NEW_REACTION" )
    CALL echo ("***" )
    CALL insert_new_reaction (i )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "REACTION"
     GO TO exit_script
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   GET_REACTION_IDS" )
    CALL echo ("***" )
    SET ierrcode = 0
    SELECT INTO "nl:"
     r.reaction_id
     FROM (reaction r )
     PLAN (r
      WHERE (r.allergy_id = request->allergy[i ].allergy_id ) )
     ORDER BY r.reaction_id
     HEAD REPORT
      knt = 0
     DETAIL
      knt = (knt + 1 ) ,
      reply->allergy[i ].reaction[knt ].reaction_id = r.reaction_id ,
      request->allergy[i ].reaction[knt ].reaction_id = r.reaction_id
     FOOT REPORT
      reply->allergy[i ].reaction_cnt = knt
     WITH nocounter
    ;end select
    SET ierrcode = error (serrmsg ,1 )
    IF ((ierrcode > 0 ) )
     SET failed = select_error
     SET table_name = "REACTION"
     GO TO exit_script
    ENDIF
   ELSE
    CALL echo ("***" )
    CALL echo ("***   Handle Reactions for Existing Allergy" )
    CALL echo ("***" )
    FOR (j = 1 TO request->allergy[i ].reaction_cnt )
     SET reaction_is_current = true
     CALL echo ("***" )
     CALL echo (build ("***   j :" ,j ) )
     CALL echo ("***" )
     IF ((request->allergy[i ].reaction[j ].reaction_id > 0 ) )
      CALL echo ("***" )
      CALL echo ("***   Possible Reaction Update" )
      CALL echo ("***" )
      CALL echo ("***" )
      CALL echo ("***   IS_REACTION_CURRENT" )
      CALL echo ("***" )
      CALL is_reaction_current (i ,j )
      IF ((ierrcode > 0 ) )
       SET failed = select_error
       SET table_name = "REACTION_CHECK"
       GO TO exit_script
      ENDIF
      IF ((reaction_is_current = true ) )
       SET reaction_dup = true
       CALL echo ("***" )
       CALL echo ("***   IS_REACTION_PURE_DUP" )
       CALL echo ("***" )
       CALL is_reaction_pure_dup (i ,j )
       IF ((ierrcode > 0 ) )
        SET failed = select_error
        SET table_name = "REACTION"
        GO TO exit_script
       ENDIF
      ENDIF
     ELSE
      CALL echo ("***" )
      CALL echo ("***   Possible New Reaction" )
      CALL echo ("***" )
      CALL echo ("***" )
      CALL echo ("***   IS_REACTION_DUP" )
      CALL echo ("***" )
      CALL is_reaction_dup (i ,j )
      IF ((ierrcode > 0 ) )
       SET failed = select_error
       SET table_name = "REACTION"
       GO TO exit_script
      ENDIF
      IF ((reaction_dup = true ) )
       CALL echo ("***" )
       CALL echo ("***   IS_REACTION_PURE_DUP" )
       CALL echo ("***" )
       CALL is_reaction_pure_dup (i ,j )
       IF ((ierrcode > 0 ) )
        SET failed = select_error
        SET table_name = "REACTION"
        GO TO exit_script
       ENDIF
      ENDIF
     ENDIF
     IF ((reaction_is_current = true ) )
      IF ((reaction_dup = false ) )
       CALL echo ("***" )
       CALL echo ("***   Insert New Reaction" )
       CALL echo ("***" )
       SET reaction_action = iadd
       CALL echo ("***" )
       CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
       CALL echo ("***" )
       CALL get_next_allergy_seq (i )
       IF ((ierrcode > 0 ) )
        SET failed = gen_nbr_error
        SET table_name = "HEALTH_STATUS_SEQ"
        GO TO exit_script
       ENDIF
       SET request->allergy[i ].reaction[j ].reaction_id = new_id
       CALL echo ("***" )
       CALL echo ("***   INSERT_REACTION" )
       CALL echo ("***" )
       CALL insert_reaction (i ,j )
       IF ((ierrcode > 0 ) )
        SET failed = insert_error
        SET table_name = "REACTION"
        GO TO exit_script
       ENDIF
      ELSEIF ((reaction_dup = true )
      AND (reaction_pure_dup = false ) )
       CALL echo ("***" )
       CALL echo ("***   Update Reaction" )
       CALL echo ("***" )
       SET reaction_action = upd
       CALL echo ("***" )
       CALL echo ("***   END_EFFECTIVE_REACTION" )
       CALL echo ("***" )
       CALL end_effective_reaction (i ,j )
       IF ((ierrcode > 0 ) )
        SET failed = update_error
        SET table_name = "REACTION"
        GO TO exit_script
       ENDIF
       CALL echo ("***" )
       CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
       CALL echo ("***" )
       CALL get_next_allergy_seq (i )
       IF ((ierrcode > 0 ) )
        SET failed = gen_nbr_error
        SET table_name = "HEALTH_STATUS_SEQ"
        GO TO exit_script
       ENDIF
       SET request->allergy[i ].reaction[j ].reaction_id = new_id
       CALL echo ("***" )
       CALL echo ("***   INSERT_REACTION" )
       CALL echo ("***" )
       CALL insert_reaction (i ,j )
       IF ((ierrcode > 0 ) )
        SET failed = insert_error
        SET table_name = "REACTION"
        GO TO exit_script
       ENDIF
      ENDIF
     ELSE
      SET reply->allergy[i ].reaction[j ].status_flag = - (1 )
     ENDIF
     SET reply->allergy[i ].reaction_cnt = j
     SET reply->allergy[i ].reaction[j ].reaction_id = request->allergy[i ].reaction[j ].reaction_id
    ENDFOR
   ENDIF
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   Ensure Comment" )
  CALL echo ("***" )
  SET comment_pure_dup = true
  SET comment_dup = true
  SET comment_action = none
  IF ((request->allergy[i ].allergy_comment_cnt > 0 ) )
   IF ((allergy_action = iadd )
   AND (history_combine = true ) )
    CALL echo ("***" )
    CALL echo ("***   Handle Comment History Combine" )
    CALL echo ("***" )
    FOR (k = 1 TO request->allergy[i ].allergy_comment_cnt )
     SET comment_action = iadd
     CALL echo ("***" )
     CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
     CALL echo ("***" )
     CALL get_next_allergy_seq (i )
     IF ((ierrcode > 0 ) )
      SET failed = gen_nbr_error
      SET table_name = "HEALTH_STATUS_SEQ"
      GO TO exit_script
     ENDIF
     SET request->allergy[i ].allergy_comment[k ].allergy_comment_id = new_id
     CALL echo ("***" )
     CALL echo ("***   INSERT_COMMENT" )
     CALL echo ("***" )
     CALL insert_comment (i ,k )
     IF ((ierrcode > 0 ) )
      SET failed = insert_error
      SET table_name = "ALLERGY_COMMENT"
      GO TO exit_script
     ENDIF
     SET reply->allergy[i ].allergy_comment_cnt = k
     SET reply->allergy[i ].allergy_comment[k ].allergy_comment_id = request->allergy[i ].
     allergy_comment[k ].allergy_comment_id
    ENDFOR
   ELSEIF ((allergy_action = iadd ) )
    CALL echo ("***" )
    CALL echo ("***   Handle Comments for New Allergy" )
    CALL echo ("***" )
    SET comment_action = multi_add
    CALL echo ("***" )
    CALL echo ("***   INSERT_NEW_COMMENT" )
    CALL echo ("***" )
    CALL insert_new_comment (i )
    IF ((ierrcode > 0 ) )
     SET failed = insert_error
     SET table_name = "ALLERGY_COMMENT"
     GO TO exit_script
    ENDIF
    CALL echo ("***" )
    CALL echo ("***   GET_COMMENT_IDS" )
    CALL echo ("***" )
    SET ierrcode = 0
    SELECT INTO "nl:"
     ac.allergy_comment_id
     FROM (allergy_comment ac )
     PLAN (ac
      WHERE (ac.allergy_id = request->allergy[i ].allergy_id )
      AND (ac.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
      AND (ac.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
     ORDER BY ac.allergy_comment_id
     HEAD REPORT
      knt = 0
     DETAIL
      knt = (knt + 1 ) ,
      reply->allergy[i ].allergy_comment[knt ].allergy_comment_id = ac.allergy_comment_id ,
      request->allergy[i ].allergy_comment[knt ].allergy_comment_id = ac.allergy_comment_id
     FOOT REPORT
      reply->allergy[i ].allergy_comment_cnt = knt
     WITH nocounter
    ;end select
    SET ierrcode = error (serrmsg ,1 )
    IF ((ierrcode > 0 ) )
     SET failed = select_error
     SET table_name = "ALLERGY_COMMENT"
     GO TO exit_script
    ENDIF
   ELSE
    CALL echo ("***" )
    CALL echo ("***   Handle Comments for Existing Allergy" )
    CALL echo ("***" )
    CALL echo ("***" )
    CALL echo ("***   LOAD_EXISTING_COMMENTS" )
    CALL echo ("***" )
    CALL load_existing_comments (i )
    IF ((ierrcode > 0 ) )
     SET failed = select_error
     SET table_name = "ALLERGY_COMMENT"
     GO TO exit_script
    ENDIF
    IF ((existing_comment_nbr < 1 ) )
     SET comment_action = multi_add
     CALL echo ("***" )
     CALL echo ("***   INSERT_NEW_COMMENT" )
     CALL echo ("***" )
     CALL insert_new_comment (i )
     IF ((ierrcode > 0 ) )
      SET failed = insert_error
      SET table_name = "ALLERGY_COMMENT"
      GO TO exit_script
     ENDIF
     CALL echo ("***" )
     CALL echo ("***   GET_COMMENT_IDS" )
     CALL echo ("***" )
     SET ierrcode = 0
     CALL echo (build ("***   reply->allergy_comment size :" ,size (reply->allergy[i ].
        allergy_comment ,5 ) ) )
     CALL echo (build ("***   request->allergy_comment size :" ,size (request->allergy[i ].
        allergy_comment ,5 ) ) )
     CALL echo ("***" )
     SELECT INTO "nl:"
      ac.allergy_comment_id
      FROM (allergy_comment ac )
      PLAN (ac
       WHERE (ac.allergy_id = request->allergy[i ].allergy_id )
       AND (ac.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
       AND (ac.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
      ORDER BY ac.allergy_comment_id
      HEAD REPORT
       knt = 0 ,
       CALL echo ("***" )
      DETAIL
       knt = (knt + 1 ) ,
       CALL echo (build ("***   knt :" ,knt ) ) ,
       reply->allergy[i ].allergy_comment[knt ].allergy_comment_id = ac.allergy_comment_id ,
       request->allergy[i ].allergy_comment[knt ].allergy_comment_id = ac.allergy_comment_id
      FOOT REPORT
       reply->allergy[i ].allergy_comment_cnt = knt ,
       CALL echo ("***" )
      WITH nocounter
     ;end select
     SET ierrcode = error (serrmsg ,1 )
     IF ((ierrcode > 0 ) )
      SET failed = select_error
      SET table_name = "ALLERGY_COMMENT"
      GO TO exit_script
     ENDIF
    ELSE
     FOR (k = 1 TO request->allergy[i ].allergy_comment_cnt )
      CALL echo ("***" )
      CALL echo ("***   DOES_COMMENT_EXIST" )
      CALL echo ("***" )
      CALL does_comment_exist (i ,k )
      IF ((comment_exist = false ) )
       SET comment_action = iadd
       CALL echo ("***" )
       CALL echo ("***   GET_NEXT_ALLERGY_SEQ" )
       CALL echo ("***" )
       CALL get_next_allergy_seq (i )
       IF ((ierrcode > 0 ) )
        SET failed = gen_nbr_error
        SET table_name = "HEALTH_STATUS_SEQ"
        GO TO exit_script
       ENDIF
       SET request->allergy[i ].allergy_comment[k ].allergy_comment_id = new_id
       CALL echo ("***" )
       CALL echo ("***   INSERT_COMMENT" )
       CALL echo ("***" )
       CALL insert_comment (i ,k )
       IF ((ierrcode > 0 ) )
        SET failed = insert_error
        SET table_name = "ALLERGY_COMMENT"
        GO TO exit_script
       ENDIF
      ELSEIF ((cancel_comment = true ) )
       CALL echo ("***" )
       CALL echo ("***   DEACTIVATE_ALLERGY_COMMENT" )
       CALL echo ("***" )
       CALL deactivate_allergy_comment (i ,k )
       IF ((ierrcode > 0 ) )
        SET failed = update_error
        SET table_name = "DEACTIVATE_ALLERGY_COMMENT"
        GO TO exit_script
       ENDIF
      ENDIF
      SET reply->allergy[i ].allergy_comment_cnt = k
      SET reply->allergy[i ].allergy_comment[k ].allergy_comment_id = request->allergy[i ].
      allergy_comment[k ].allergy_comment_id
     ENDFOR
    ENDIF
   ENDIF
  ENDIF
  IF ((pco_combine = false ) )
   COMMIT
  ENDIF
  IF ((request->allergy[i ].cmb_flag != 2 ) )
   IF ((ob_trigger_on = true ) )
    CALL echo ("***" )
    CALL echo ("***   Handle Out-Bound Allergies" )
    CALL echo (build ("***   allergy_action  :" ,allergy_action ) )
    CALL echo (build ("***   reaction_action :" ,reaction_action ) )
    CALL echo (build ("***   comment_action  :" ,comment_action ) )
    CALL echo ("***" )
    IF ((allergy_action = iadd ) )
     SET send_ob_add_req = true
     SET interface_action_cd = ob_add_cd
     CALL add_allergy_ob (i )
     FOR (x = 1 TO request->allergy[i ].reaction_cnt )
      CALL add_reaction_ob (i ,x )
     ENDFOR
     FOR (x = 1 TO request->allergy[i ].allergy_comment_cnt )
      CALL add_comment_ob (i ,x )
     ENDFOR
    ELSEIF ((((allergy_action = upd ) ) OR ((((reaction_action != none ) ) OR ((comment_action !=
    none ) )) )) )
     SET send_ob_add_req = true
     SET interface_action_cd = ob_upd_cd
     CALL add_allergy_ob (i )
     FOR (x = 1 TO request->allergy[i ].reaction_cnt )
      CALL add_reaction_ob (i ,x )
     ENDFOR
     FOR (x = 1 TO request->allergy[i ].allergy_comment_cnt )
      CALL add_comment_ob (i ,x )
     ENDFOR
     CALL load_existing_reactions (i )
     FOR (reaction_knt = 1 TO reaction->qual_knt )
      CALL add_reaction_ob_from_existing (reaction_knt )
     ENDFOR
     IF ((load_existing_comments_exec = false ) )
      CALL load_existing_comments (i )
     ENDIF
     FOR (x = 1 TO request->allergy[i ].allergy_comment_cnt )
      CALL add_comment_ob_from_existing (i )
     ENDFOR
    ELSEIF ((allergy_action = reviewed ) )
     SET send_ob_add_req = true
     SET interface_action_cd = ob_upd_cd
     CALL add_allergy_ob (i )
     FOR (x = 1 TO request->allergy[i ].reaction_cnt )
      CALL add_reaction_ob (i ,x )
     ENDFOR
     FOR (x = 1 TO request->allergy[i ].allergy_comment_cnt )
      CALL add_comment_ob (i ,x )
     ENDFOR
    ENDIF
   ENDIF
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   INSERT_ALLERGY_REVIEW_HISTORY" )
  CALL echo ("***" )
  IF (allergy_review_hist_needed )
   CALL mark_allergy_review_hist (i )
   IF ((ierrcode > 0 ) )
    SET failed = insert_error
    SET table_name = "ALLERGY_REVIEW_HIST"
    GO TO exit_script
   ENDIF
  ENDIF
 ENDFOR
#end_for_loop
 CALL echo ("***" )
 CALL echo ("***   End For Loop" )
 CALL echo ("***" )
 IF ((nka_check = false )
 AND (request->allergy_cnt > 0 ) )
  GO TO skip_handle_nka_chk
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   Handle NKA Check" )
 CALL echo ("***" )
 DECLARE does_nka_exist = i2 WITH public ,noconstant (false )
 DECLARE updt_nka = i2 WITH public ,noconstant (false )
 DECLARE nka_instance_id = f8 WITH public ,noconstant (0.0 )
 DECLARE nka_allergy_id = f8 WITH public ,noconstant (0.0 )
 RECORD nka_rec (
   1 person_id = f8
   1 orig_prsnl_id = f8
   1 source_of_info_cd = f8
   1 source_of_info_ft = vc
   1 created_dt_tm = dq8
   1 created_prsnl_id = f8
   1 cmb_flag = i2
   1 cmb_prsnl_id = f8
   1 cmb_person_id = f8
   1 cmb_dt_tm = dq8
   1 cmb_tz = i4
   1 cmb_instance_id = f8
   1 updt_id = f8
   1 reviewed_prsnl_id = f8
   1 reviewed_dt_tm = dq8
   1 reviewed_tz = i4
   1 reaction_class_cd = f8
 )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (allergy a )
  PLAN (a
   WHERE (a.person_id = request->allergy[1 ].person_id )
   AND expand (knt ,1 ,nka_nomen_id_list->knt ,a.substance_nom_id ,nka_nomen_id_list->id[knt ].val )
   AND (((a.reaction_status_cd = reaction_status_cd ) ) OR ((a.reaction_status_cd = proposed_cd ) ))
   AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.active_ind = 1 ) )
  HEAD REPORT
   does_nka_exist = true ,
   nka_instance_id = a.allergy_instance_id ,
   nka_allergy_id = a.allergy_id ,
   nka_nomen_id = a.substance_nom_id ,
   nka_rec->person_id = a.person_id ,
   nka_rec->orig_prsnl_id = a.orig_prsnl_id ,
   nka_rec->source_of_info_cd = a.source_of_info_cd ,
   nka_rec->source_of_info_ft = a.source_of_info_ft ,
   nka_rec->created_dt_tm = a.created_dt_tm ,
   nka_rec->created_prsnl_id = a.created_prsnl_id ,
   nka_rec->cmb_instance_id = a.cmb_instance_id ,
   nka_rec->updt_id = a.updt_id ,
   nka_rec->reaction_class_cd = a.reaction_class_cd ,
   nka_rec->reviewed_prsnl_id = a.reviewed_prsnl_id ,
   nka_rec->reviewed_dt_tm = cnvtdatetime (a.reviewed_dt_tm ) ,
   nka_rec->reviewed_tz = a.reviewed_tz ,
   IF ((a.cmb_flag > 0 ) ) nka_rec->cmb_flag = 3 ,nka_rec->cmb_prsnl_id = a.cmb_prsnl_id ,nka_rec->
    cmb_person_id = a.cmb_person_id ,nka_rec->cmb_dt_tm = cnvtdatetime (a.cmb_dt_tm ) ,nka_rec->
    cmb_tz = a.cmb_tz
   ENDIF
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NKA_CHECK"
  GO TO exit_script
 ENDIF
 IF ((does_nka_exist = false ) )
  GO TO skip_handle_nka_chk
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   NKA Exist" )
 CALL echo ("***" )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (allergy a )
  PLAN (a
   WHERE (a.person_id = request->allergy[1 ].person_id )
   AND NOT (expand (knt ,1 ,nka_nomen_id_list->knt ,a.substance_nom_id ,nka_nomen_id_list->id[knt ].
    val ) )
   AND (a.sub_concept_cki != nkma_concept_cki )
   AND (((a.reaction_status_cd = reaction_status_cd ) ) OR ((a.reaction_status_cd = proposed_cd ) ))
   AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.active_ind = 1 ) )
  HEAD REPORT
   updt_nka = true
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NON_NKA_CHECK"
  GO TO exit_script
 ENDIF
 IF ((updt_nka = false ) )
  GO TO skip_handle_nka_chk
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 CALL echo ("***" )
 CALL echo ("***   Cancel NKA" )
 CALL echo ("***" )
 UPDATE FROM (allergy a )
  SET a.updt_cnt = (a.updt_cnt + 1 ) ,
   a.active_ind = false ,
   a.active_status_cd = inactive_cd ,
   a.active_status_prsnl_id = reqinfo->updt_id ,
   a.created_dt_tm =
   IF ((datetimediff (cnvtdatetime (curdate ,curtime2 ) ,a.created_dt_tm ) = 0 ) ) cnvtdatetime (
     curdate ,(curtime3 - 100 ) )
   ELSE a.created_dt_tm
   ENDIF
   ,a.active_status_dt_tm =
   IF ((datetimediff (cnvtdatetime (curdate ,curtime2 ) ,a.created_dt_tm ) = 0 ) ) cnvtdatetime (
     curdate ,(curtime3 - 100 ) )
   ELSE cnvtdatetime (curdate ,curtime3 )
   ENDIF
   ,a.end_effective_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_id = reqinfo->updt_id ,
   a.updt_applctx = reqinfo->updt_applctx ,
   a.updt_task = reqinfo->updt_task
  PLAN (a
   WHERE (a.allergy_instance_id = nka_instance_id ) )
  WITH nocounter
 ;end update
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "DEACTIVATE_NKA"
  GO TO exit_script
 ENDIF
 CALL get_next_allergy_seq (i )
 IF ((ierrcode > 0 ) )
  SET failed = gen_nbr_error
  SET table_name = "HEALTH_STATUS_SEQ"
  GO TO exit_script
 ENDIF
 IF ((new_id < 1 ) )
  GO TO skip_handle_nka_chk
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 INSERT FROM (allergy a )
  SET a.allergy_instance_id = new_id ,
   a.allergy_id = nka_allergy_id ,
   a.person_id = nka_rec->person_id ,
   a.encntr_id = 0.0 ,
   a.substance_nom_id = nka_nomen_id ,
   a.reaction_class_cd = nka_rec->reaction_class_cd ,
   a.reviewed_prsnl_id = nka_rec->reviewed_prsnl_id ,
   a.reviewed_dt_tm = cnvtdatetime (nka_rec->reviewed_dt_tm ) ,
   a.substance_type_cd = cat_drug_cd ,
   a.reviewed_tz = nka_rec->reviewed_tz ,
   a.reaction_status_cd = canceled_cd ,
   a.reaction_status_dt_tm = cnvtdatetime (reaction_status_dt_tm ) ,
   a.orig_prsnl_id = nka_rec->orig_prsnl_id ,
   a.source_of_info_cd = nka_rec->source_of_info_cd ,
   a.source_of_info_ft = nka_rec->source_of_info_ft ,
   a.created_dt_tm = cnvtdatetime (nka_rec->created_dt_tm ) ,
   a.created_prsnl_id = nka_rec->created_prsnl_id ,
   a.cancel_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.cancel_prsnl_id = reqinfo->updt_id ,
   a.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.data_status_prsnl_id = reqinfo->updt_id ,
   a.beg_effective_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.beg_effective_tz = user_tz ,
   a.end_effective_dt_tm = cnvtdatetime ("31-dec-2100 23:59:59" ) ,
   a.active_ind = 1 ,
   a.active_status_cd = active_cd ,
   a.active_status_prsnl_id =
   IF ((reqinfo->updt_task = 100102 ) ) nka_rec->updt_id
   ELSE reqinfo->updt_id
   ENDIF
   ,a.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.cmb_instance_id = nka_rec->cmb_instance_id ,
   a.cmb_flag = nka_rec->cmb_flag ,
   a.cmb_prsnl_id = nka_rec->cmb_prsnl_id ,
   a.cmb_person_id = nka_rec->cmb_person_id ,
   a.cmb_dt_tm = cnvtdatetime (nka_rec->cmb_dt_tm ) ,
   a.cmb_tz = nka_rec->cmb_tz ,
   a.updt_cnt = 0 ,
   a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_id =
   IF ((reqinfo->updt_task = 100102 ) ) nka_rec->updt_id
   ELSE reqinfo->updt_id
   ENDIF
   ,a.updt_task = reqinfo->updt_task ,
   a.updt_applctx = reqinfo->updt_applctx
  PLAN (a
   WHERE (0 = 0 ) )
  WITH nocounter
 ;end insert
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "CANCEL_NKA"
  GO TO exit_script
 ENDIF
#skip_handle_nka_chk
 IF ((nkma_check = false )
 AND (request->allergy_cnt > 0 ) )
  GO TO skip_handle_nkma_chk
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   Handle NKMA Check" )
 CALL echo ("***" )
 DECLARE does_nkma_exist = i2 WITH public ,noconstant (false )
 DECLARE updt_nkma = i2 WITH public ,noconstant (false )
 DECLARE nkma_instance_id = f8 WITH public ,noconstant (0.0 )
 DECLARE nkma_allergy_id = f8 WITH public ,noconstant (0.0 )
 DECLARE nkma_nomen_id = f8 WITH public ,noconstant (0.0 )
 DECLARE nkma_reaction_class_cd = f8 WITH public ,noconstant (0.0 )
 DECLARE i18nhandle = i4 WITH private ,noconstant (0 )
 SET stat = uar_i18nlocalizationinit (i18nhandle ,curprog ,"" ,curcclrev )
 DECLARE strshellfishconcptidentifier = vc WITH public ,constant ("60" )
 DECLARE mul_algcat_vocab_cd = f8 WITH public ,noconstant (0.0 )
 SET code_set = 400
 SET cdf_meaning = "MUL.ALGCAT"
 SET stat = uar_get_meaning_by_codeset (code_set ,cdf_meaning ,1 ,mul_algcat_vocab_cd )
 IF ((mul_algcat_vocab_cd < 1 ) )
  SET failed = select_error
  SET table_name = "CODE_VALUE"
  SET serrmsg = concat ("Failed to find the code_value for cdf_meaning " ,trim (cdf_meaning ) ,
   " from code_set " ,trim (cnvtstring (code_set ) ) )
  GO TO exit_script
 ENDIF
 RECORD nkma_rec (
   1 person_id = f8
   1 orig_prsnl_id = f8
   1 source_of_info_cd = f8
   1 source_of_info_ft = vc
   1 created_dt_tm = dq8
   1 created_prsnl_id = f8
   1 cmb_flag = i2
   1 cmb_prsnl_id = f8
   1 cmb_person_id = f8
   1 cmb_dt_tm = dq8
   1 cmb_tz = i4
   1 cmb_instance_id = f8
   1 updt_id = f8
   1 reviewed_prsnl_id = f8
   1 reviewed_dt_tm = dq8
   1 reviewed_tz = i4
 )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (allergy a )
  PLAN (a
   WHERE (a.person_id = request->allergy[1 ].person_id )
   AND (a.sub_concept_cki = nkma_concept_cki )
   AND (((a.reaction_status_cd = reaction_status_cd ) ) OR ((a.reaction_status_cd = proposed_cd ) ))
   AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.active_ind = 1 ) )
  HEAD REPORT
   does_nkma_exist = true ,
   nkma_instance_id = a.allergy_instance_id ,
   nkma_allergy_id = a.allergy_id ,
   nkma_nomen_id = a.substance_nom_id ,
   nkma_concept_cki = a.sub_concept_cki ,
   nkma_reaction_class_cd = a.reaction_class_cd ,
   nkma_rec->person_id = a.person_id ,
   nkma_rec->orig_prsnl_id = a.orig_prsnl_id ,
   nkma_rec->source_of_info_cd = a.source_of_info_cd ,
   nkma_rec->source_of_info_ft = a.source_of_info_ft ,
   nkma_rec->created_dt_tm = a.created_dt_tm ,
   nkma_rec->created_prsnl_id = a.created_prsnl_id ,
   nkma_rec->cmb_instance_id = a.cmb_instance_id ,
   nkma_rec->updt_id = a.updt_id ,
   nkma_rec->reviewed_prsnl_id = a.reviewed_prsnl_id ,
   nkma_rec->reviewed_dt_tm = cnvtdatetime (a.reviewed_dt_tm ) ,
   nkma_rec->reviewed_tz = a.reviewed_tz ,
   IF ((a.cmb_flag > 0 ) ) nkma_rec->cmb_flag = 3 ,nkma_rec->cmb_prsnl_id = a.cmb_prsnl_id ,nkma_rec
    ->cmb_person_id = a.cmb_person_id ,nkma_rec->cmb_dt_tm = cnvtdatetime (a.cmb_dt_tm ) ,nkma_rec->
    cmb_tz = a.cmb_tz
   ENDIF
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NKMA_CHECK"
  GO TO exit_script
 ENDIF
 IF ((does_nkma_exist = false ) )
  GO TO skip_handle_nkma_chk
 ENDIF
 CALL echo ("***" )
 CALL echo ("***   NKMA Exist" )
 CALL echo ("***" )
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 SELECT INTO "nl:"
  FROM (allergy a ),
   (nomenclature n )
  PLAN (a
   WHERE (a.person_id = request->allergy[1 ].person_id )
   AND NOT (expand (knt ,1 ,nka_nomen_id_list->knt ,a.substance_nom_id ,nka_nomen_id_list->id[knt ].
    val ) )
   AND (a.sub_concept_cki != nkma_concept_cki )
   AND (((a.reaction_status_cd = reaction_status_cd ) ) OR ((a.reaction_status_cd = proposed_cd ) ))
   AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
   AND (a.active_ind = 1 ) )
   JOIN (n
   WHERE (n.nomenclature_id = a.substance_nom_id )
   AND (((n.concept_identifier != strshellfishconcptidentifier ) ) OR ((((n.source_vocabulary_cd !=
   mul_algcat_vocab_cd ) ) OR ((n.primary_vterm_ind != 1 ) )) )) )
  DETAIL
   IF ((n.concept_source_cd IN (mul_algcat_cd ,
   mul_drug_cd ,
   dgddbmolcd ,
   dgddbsubstcd ,
   dgddbprodlncd ,
   dgddbactgrpcd ) ) ) updt_nkma = true
   ENDIF
  WITH nocounter
 ;end select
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "NON_NKMA_CHECK"
  GO TO exit_script
 ENDIF
 IF ((updt_nkma = false ) )
  SET ierrcode = error (serrmsg ,1 )
  SET ierrcode = 0
  SELECT INTO "nl:"
   FROM (allergy a )
   PLAN (a
    WHERE (a.person_id = request->allergy[1 ].person_id )
    AND NOT (expand (knt ,1 ,nka_nomen_id_list->knt ,a.substance_nom_id ,nka_nomen_id_list->id[knt ].
     val ) )
    AND (a.sub_concept_cki != nkma_concept_cki )
    AND (a.substance_type_cd = cat_drug_cd )
    AND (((a.reaction_status_cd = reaction_status_cd ) ) OR ((a.reaction_status_cd = proposed_cd )
    ))
    AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
    AND (a.active_ind = 1 ) )
   HEAD REPORT
    updt_nkma = true
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "NON_NKMA_CHECK"
   GO TO exit_script
  ENDIF
 ENDIF
 IF ((updt_nkma = false ) )
  GO TO skip_handle_nkma_chk
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 CALL echo ("***" )
 CALL echo ("***   Cancel NKMA" )
 CALL echo ("***" )
 UPDATE FROM (allergy a )
  SET a.updt_cnt = (a.updt_cnt + 1 ) ,
   a.active_ind = false ,
   a.active_status_cd = inactive_cd ,
   a.active_status_prsnl_id = reqinfo->updt_id ,
   a.created_dt_tm =
   IF ((datetimediff (cnvtdatetime (curdate ,curtime2 ) ,a.created_dt_tm ) = 0 ) ) cnvtdatetime (
     curdate ,(curtime3 - 100 ) )
   ELSE a.created_dt_tm
   ENDIF
   ,a.active_status_dt_tm =
   IF ((datetimediff (cnvtdatetime (curdate ,curtime2 ) ,a.created_dt_tm ) = 0 ) ) cnvtdatetime (
     curdate ,(curtime3 - 100 ) )
   ELSE cnvtdatetime (curdate ,curtime3 )
   ENDIF
   ,a.end_effective_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_id = reqinfo->updt_id ,
   a.updt_applctx = reqinfo->updt_applctx ,
   a.updt_task = reqinfo->updt_task
  PLAN (a
   WHERE (a.allergy_instance_id = nkma_instance_id ) )
  WITH nocounter
 ;end update
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "DEACTIVATE_NKMA"
  GO TO exit_script
 ENDIF
 CALL get_next_allergy_seq (i )
 IF ((ierrcode > 0 ) )
  SET failed = gen_nbr_error
  SET table_name = "HEALTH_STATUS_SEQ"
  GO TO exit_script
 ENDIF
 IF ((new_id < 1 ) )
  GO TO skip_handle_nkma_chk
 ENDIF
 SET ierrcode = error (serrmsg ,1 )
 SET ierrcode = 0
 INSERT FROM (allergy a )
  SET a.allergy_instance_id = new_id ,
   a.allergy_id = nkma_allergy_id ,
   a.person_id = nkma_rec->person_id ,
   a.encntr_id = 0.0 ,
   a.substance_nom_id = nkma_nomen_id ,
   a.sub_concept_cki = nkma_concept_cki ,
   a.reviewed_prsnl_id = nkma_rec->reviewed_prsnl_id ,
   a.reviewed_dt_tm = cnvtdatetime (nkma_rec->reviewed_dt_tm ) ,
   a.reviewed_tz = nkma_rec->reviewed_tz ,
   a.reaction_class_cd = nkma_reaction_class_cd ,
   a.substance_type_cd = cat_drug_cd ,
   a.reaction_status_cd = canceled_cd ,
   a.reaction_status_dt_tm = cnvtdatetime (reaction_status_dt_tm ) ,
   a.orig_prsnl_id = nkma_rec->orig_prsnl_id ,
   a.source_of_info_cd = nkma_rec->source_of_info_cd ,
   a.source_of_info_ft = nkma_rec->source_of_info_ft ,
   a.created_dt_tm = cnvtdatetime (nkma_rec->created_dt_tm ) ,
   a.created_prsnl_id = nkma_rec->created_prsnl_id ,
   a.cancel_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.cancel_prsnl_id = reqinfo->updt_id ,
   a.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.data_status_prsnl_id = reqinfo->updt_id ,
   a.beg_effective_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.beg_effective_tz = user_tz ,
   a.end_effective_dt_tm = cnvtdatetime ("31-dec-2100 23:59:59" ) ,
   a.active_ind = 1 ,
   a.active_status_cd = active_cd ,
   a.active_status_prsnl_id =
   IF ((reqinfo->updt_task = 100102 ) ) nkma_rec->updt_id
   ELSE reqinfo->updt_id
   ENDIF
   ,a.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.cmb_instance_id = nkma_rec->cmb_instance_id ,
   a.cmb_flag = nkma_rec->cmb_flag ,
   a.cmb_prsnl_id = nkma_rec->cmb_prsnl_id ,
   a.cmb_person_id = nkma_rec->cmb_person_id ,
   a.cmb_dt_tm = cnvtdatetime (nkma_rec->cmb_dt_tm ) ,
   a.cmb_tz = nkma_rec->cmb_tz ,
   a.updt_cnt = 0 ,
   a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
   a.updt_id =
   IF ((reqinfo->updt_task = 100102 ) ) nkma_rec->updt_id
   ELSE reqinfo->updt_id
   ENDIF
   ,a.updt_task = reqinfo->updt_task ,
   a.updt_applctx = reqinfo->updt_applctx
  PLAN (a
   WHERE (0 = 0 ) )
  WITH nocounter
 ;end insert
 SET ierrcode = error (serrmsg ,1 )
 IF ((ierrcode > 0 ) )
  SET failed = select_error
  SET table_name = "CANCEL_NKMA"
  GO TO exit_script
 ENDIF
#skip_handle_nkma_chk
 SUBROUTINE  add_reaction_ob_from_existing (reaction_knt )
  IF ((reaction_active_ind > 0 ) )
   IF ((reaction->qual[reaction_knt ].active_ind = reaction_active_ind ) )
    SET ob_n = (ob_n + 1 )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction_cnt = ob_n
    SET stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].reaction ,ob_n )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].interface_action_cd =
    interface_action_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_id = reaction->qual[
    reaction_knt ].reaction_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_instance_id = reaction->
    qual[reaction_knt ].allergy_instance_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_id = reaction->qual[
    reaction_knt ].allergy_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_nom_id = reaction->
    qual[reaction_knt ].reaction_nom_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_ftdesc = reaction->
    qual[reaction_knt ].reaction_ftdesc
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_ind = reaction->qual[
    reaction_knt ].active_ind
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_cd = reaction->
    qual[reaction_knt ].active_status_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_dt_tm =
    cnvtdatetime (reaction->qual[reaction_knt ].active_status_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_prsnl_id =
    reaction->qual[reaction_knt ].active_status_prsnl_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].beg_effective_dt_tm =
    cnvtdatetime (reaction->qual[reaction_knt ].beg_effective_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].end_effective_dt_tm =
    cnvtdatetime (reaction->qual[reaction_knt ].end_effective_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].contributor_system_cd = reaction
    ->qual[reaction_knt ].contributor_system_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_cd = reaction->qual[
    reaction_knt ].data_status_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_dt_tm = reaction->
    qual[reaction_knt ].data_status_dt_tm
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_prsnl_id = reaction
    ->qual[reaction_knt ].data_status_prsnl_id
   ENDIF
  ELSE
   SET ob_n = (ob_n + 1 )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction_cnt = ob_n
   SET stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].reaction ,ob_n )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].interface_action_cd =
   interface_action_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_id = reaction->qual[
   reaction_knt ].reaction_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_instance_id = reaction->
   qual[reaction_knt ].allergy_instance_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_id = reaction->qual[
   reaction_knt ].allergy_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_nom_id = reaction->qual[
   reaction_knt ].reaction_nom_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_ftdesc = reaction->qual[
   reaction_knt ].reaction_ftdesc
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_ind = reaction->qual[
   reaction_knt ].active_ind
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_cd = reaction->
   qual[reaction_knt ].active_status_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_dt_tm =
   cnvtdatetime (reaction->qual[reaction_knt ].active_status_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_prsnl_id = reaction
   ->qual[reaction_knt ].active_status_prsnl_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].beg_effective_dt_tm =
   cnvtdatetime (reaction->qual[reaction_knt ].beg_effective_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].end_effective_dt_tm =
   cnvtdatetime (reaction->qual[reaction_knt ].end_effective_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].contributor_system_cd = reaction
   ->qual[reaction_knt ].contributor_system_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_cd = reaction->qual[
   reaction_knt ].data_status_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_dt_tm = reaction->
   qual[reaction_knt ].data_status_dt_tm
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_prsnl_id = reaction->
   qual[reaction_knt ].data_status_prsnl_id
  ENDIF
 END ;Subroutine
 SUBROUTINE  add_comment_ob_from_existing (aidx )
  SET ierrcode = error (serrmsg ,1 )
  SET ierrcode = 0
  SELECT INTO "nl:"
   FROM (dummyt d1 WITH seq = value (comment->qual_knt ) ),
    (dummyt d2 WITH seq = value (request->allergy[aidx ].allergy_comment_cnt ) ),
    (dummyt d3 WITH seq = 1 )
   PLAN (d1
    WHERE (d1.seq > 0 ) )
    JOIN (d3 )
    JOIN (d2
    WHERE (d2.seq > 0 )
    AND (request->allergy[aidx ].allergy_comment[d2.seq ].allergy_comment_id = comment->qual[d1.seq ]
    .allergy_comment_id ) )
   DETAIL
    ob_q = (ob_q + 1 ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment_cnt = ob_q ,
    stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].allergy_comment ,ob_q ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].interface_action_cd =
    interface_action_cd ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_comment_id = comment
    ->qual[x ].allergy_comment_id ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_instance_id = comment
    ->qual[x ].allergy_instance_id ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_id = comment->qual[x
    ].allergy_id ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].comment_dt_tm = comment->
    qual[x ].comment_dt_tm ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].comment_prsnl_id = comment->
    qual[x ].comment_prsnl_id ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_comment = comment->
    qual[x ].allergy_comment ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_ind = comment->qual[x
    ].active_ind ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_cd = comment->
    qual[x ].active_status_cd ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_dt_tm =
    cnvtdatetime (curdate ,curtime3 ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_prsnl_id =
    reqinfo->updt_id ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].beg_effective_dt_tm =
    cnvtdatetime (comment->qual[x ].beg_effective_dt_tm ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].end_effective_dt_tm =
    cnvtdatetime (comment->qual[x ].end_effective_dt_tm ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].contributor_system_cd =
    comment->qual[x ].contributor_system_cd ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_cd = comment->
    qual[x ].data_status_cd ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_dt_tm =
    cnvtdatetime (curdate ,curtime3 ) ,
    req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_prsnl_id =
    reqinfo->updt_id
   WITH nocounter ,outerjoin (d3 ) ,dontexist
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "FILTER_COMMENT"
   GO TO exit_script
  ENDIF
 END ;Subroutine
 SUBROUTINE  load_existing_reactions (aidx )
  CALL echo ("" )
  CALL echo ("***" )
  CALL echo (" LOAD_EXISTING_REACTIONS " )
  CALL echo ("" )
  CALL echo (build ("request->allergy[aidx].reaction_cnt = " ,request->allergy[aidx ].reaction_cnt )
   )
  SET ierrcode = error (serrmsg ,1 )
  SET ierrcode = 0
  SELECT
   IF ((request->allergy[aidx ].reaction_cnt > 0 ) )
    FROM (reaction r ),
     (dummyt d WITH seq = value (request->allergy[aidx ].reaction_cnt ) ),
     (dummyt d1 WITH seq = 1 )
    PLAN (r
     WHERE (r.allergy_id = request->allergy[aidx ].allergy_id )
     AND (r.beg_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
     AND (r.end_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) ) )
     JOIN (d1 )
     JOIN (d
     WHERE (r.reaction_id = request->allergy[aidx ].reaction[d.seq ].reaction_id ) )
    WITH nocounter ,outerjoin = d1 ,dontexist
   ELSE
    FROM (reaction r )
    PLAN (r
     WHERE (r.allergy_id = request->allergy[aidx ].allergy_id )
     AND (r.beg_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
     AND (r.end_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) ) )
    WITH nocounter
   ENDIF
   INTO "nl:"
   HEAD REPORT
    knt = 0 ,
    stat = alterlist (reaction->qual ,10 )
   DETAIL
    knt = (knt + 1 ) ,
    reaction->qual[knt ].reaction_id = r.reaction_id ,
    reaction->qual[knt ].allergy_id = r.allergy_id ,
    reaction->qual[knt ].allergy_instance_id = r.allergy_instance_id ,
    reaction->qual[knt ].reaction_nom_id = r.reaction_nom_id ,
    reaction->qual[knt ].reaction_ftdesc = r.reaction_ftdesc ,
    reaction->qual[knt ].active_ind = r.active_ind ,
    reaction->qual[knt ].active_status_cd = r.active_status_cd ,
    reaction->qual[knt ].active_status_dt_tm = r.active_status_dt_tm ,
    reaction->qual[knt ].active_status_prsnl_id = r.active_status_prsnl_id ,
    reaction->qual[knt ].beg_effective_dt_tm = r.beg_effective_dt_tm ,
    reaction->qual[knt ].end_effective_dt_tm = r.end_effective_dt_tm ,
    reaction->qual[knt ].contributor_system_cd = r.contributor_system_cd ,
    reaction->qual[knt ].data_status_cd = r.data_status_cd ,
    reaction->qual[knt ].data_status_dt_tm = r.data_status_dt_tm ,
    reaction->qual[knt ].data_status_prsnl_id = r.data_status_prsnl_id
   FOOT REPORT
    reaction->qual_knt = knt ,
    stat = alterlist (reaction->qual ,knt )
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "REACTION"
   GO TO exit_script
  ENDIF
  CALL echo ("" )
  CALL echo (build ("reaction->qual_knt = " ,reaction->qual_knt ) )
  CALL echo ("" )
  CALL echo ("***" )
  CALL echo ("" )
 END ;Subroutine
 SUBROUTINE  init_srv_stuff (messageid ,get_hreq ,get_hrep )
  CALL echo ("In Init_Srv_Stuff() routine..." )
  SET m_idx = size (srvrec->qual ,5 )
  SET m_idx = (m_idx + 1 )
  SET stat = alterlist (srvrec->qual ,m_idx )
  SET srvrec->qual[m_idx ].msg_id = messageid
  CALL echo (build ("srvrec->qual[m_idx]->msg_id = " ,srvrec->qual[m_idx ].msg_id ) )
  SET srvrec->qual[m_idx ].hmsg = uar_srvselectmessage (srvrec->qual[m_idx ].msg_id )
  IF (srvrec->qual[m_idx ].hmsg )
   IF (get_hreq )
    SET srvrec->qual[m_idx ].hreq = uar_srvcreaterequest (srvrec->qual[m_idx ].hmsg )
    IF (NOT (srvrec->qual[m_idx ].hreq ) )
     CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
     RETURN (0 )
    ENDIF
   ENDIF
   IF (get_hrep )
    SET srvrec->qual[m_idx ].hrep = uar_srvcreatereply (srvrec->qual[m_idx ].hmsg )
    IF (NOT (srvrec->qual[m_idx ].hrep ) )
     CALL echo ("The uar_SrvCreateReply() FAILED!!" )
     CALL uar_srvdestoryinstance (srvrec->qual[m_idx ].hreq )
     SET srvrec->qual[m_idx ].hreq = 0
     RETURN (0 )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting Init_Srv_Stuff() routine... " )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  cleanup_srv_stuff (dummy1 )
  CALL echo ("In CleanUp_Srv_Stuff() routine..." )
  FOR (i = 1 TO size (srvrec->qual ,5 ) )
   CALL echo (build ("i = " ,i ) )
   IF ((srvrec->qual[i ].hreq > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hreq )
   ENDIF
   IF ((srvrec->qual[i ].hrep > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hrep )
   ENDIF
  ENDFOR
  IF (size (srvrec->qual ,5 ) )
   SET stat = alterlist (srvrec->qual ,0 )
  ENDIF
  CALL echo ("Exiting CleanUp_Srv_Stuff() routine..." )
  RETURN (1 )
 END ;Subroutine
 IF ((ob_trigger_on = true ) )
  FREE RECORD srvrec
  RECORD srvrec (
    1 qual [* ]
      2 msg_id = i4
      2 hmsg = i4
      2 hreq = i4
      2 hrep = i4
      2 status = i4
  )
  DECLARE init_srv_stuff (messageid ,get_hreq ,get_hrep ) = i2
  DECLARE cleanup_srv_stuff (dummy1 ) = i2
  DECLARE hmsgtype = i4
  DECLARE hmsgstruct = i4
  DECLARE hcqmstruct = i4
  DECLARE htrigitem = i4
  DECLARE hallergyitem = i4
  DECLARE hreactionitem = i4
  DECLARE hallergy_commentitem = i4
  DECLARE cqmmessageid = i4
  DECLARE trigmessageid = i4
  SET cqmmessageid = 1215001
  SET trigmessageid = 1215025
 ENDIF
 IF ((send_ob_add_req = true ) )
  CALL echo ("***" )
  CALL echo ("***   sending out-bound adds" )
  CALL echo ("***" )
  SET hmsgtype = 0
  SET hmsgstruct = 0
  SET hcqmstruct = 0
  SET htrigitem = 0
  SET hallergyitem = 0
  SET hreactionitem = 0
  SET hallergy_commentitem = 0
  SET cqmmessageid = 1215001
  SET trigmessageid = 1215025
  CALL init_srv_stuff (cqmmessageid ,1 ,1 )
  CALL init_srv_stuff (trigmessageid ,1 ,1 )
  SET hmsgtype = uar_srvcreaterequesttype (srvrec->qual[2 ].hmsg )
  SET stat = uar_srvrecreateinstance (srvrec->qual[1 ].hreq ,hmsgtype )
  CALL uar_srvdestroytype (hmsgtype )
  SET hmsgstruct = uar_srvgetstruct (srvrec->qual[1 ].hreq ,"message" )
  IF (hmsgstruct )
   SET hcqmstruct = uar_srvgetstruct (hmsgstruct ,"cqminfo" )
   IF (hcqmstruct )
    SET stat = uar_srvsetstring (hcqmstruct ,"AppName" ,"FSIESO" )
    SET stat = uar_srvsetstring (hcqmstruct ,"ContribAlias" ,"PM_ENS_ALLERGY" )
    SET stat = uar_srvsetstring (hcqmstruct ,"ContribRefnum" ,nullterm (trim (cnvtstring (req_out_add
        ->message.triginfo.allergy[1 ].allergy_instance_id ) ) ) )
    SET stat = uar_srvsetlong (hcqmstruct ,"Priority" ,99 )
    SET stat = uar_srvsetstring (hcqmstruct ,"Class" ,"PM_ALLERGY" )
    SET stat = uar_srvsetstring (hcqmstruct ,"Type" ,"ADT" )
    SET stat = uar_srvsetstring (hcqmstruct ,"Subtype" ,"A31" )
    SET stat = uar_srvsetstring (hcqmstruct ,"Subtype_detail" ,nullterm (trim (cnvtstring (
        req_out_add->message.triginfo.allergy[1 ].person_id ) ) ) )
    SET stat = uar_srvsetlong (hcqmstruct ,"Debug_Ind" ,0 )
    SET stat = uar_srvsetlong (hcqmstruct ,"Verbosity_Flag" ,0 )
    SET htrigitem = uar_srvadditem (hmsgstruct ,"TRIGInfo" )
    IF (htrigitem )
     SET al_cnt = 1
     SET stat = uar_srvsetlong (htrigitem ,"allergy_cnt" ,req_out_add->message.triginfo.allergy_cnt
      )
     SET aknt = 0
     WHILE ((aknt < req_out_add->message.triginfo.allergy_cnt ) )
      SET aknt = (aknt + 1 )
      SET hallergyitem = uar_srvadditem (htrigitem ,"allergy" )
      IF (hallergyitem )
       SET stat = uar_srvsetdouble (hallergyitem ,"interface_action_cd" ,req_out_add->message.
        triginfo.allergy[aknt ].interface_action_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"allergy_instance_id" ,req_out_add->message.
        triginfo.allergy[aknt ].allergy_instance_id )
       SET stat = uar_srvsetdouble (hallergyitem ,"allergy_id" ,req_out_add->message.triginfo.
        allergy[aknt ].allergy_id )
       SET stat = uar_srvsetdouble (hallergyitem ,"person_id" ,req_out_add->message.triginfo.allergy[
        aknt ].person_id )
       SET stat = uar_srvsetdouble (hallergyitem ,"encntr_id" ,req_out_add->message.triginfo.allergy[
        aknt ].encntr_id )
       SET stat = uar_srvsetdouble (hallergyitem ,"substance_nom_id" ,req_out_add->message.triginfo.
        allergy[aknt ].substance_nom_id )
       SET stat = uar_srvsetstring (hallergyitem ,"substance_ftdesc" ,nullterm (req_out_add->message.
         triginfo.allergy[aknt ].substance_ftdesc ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"substance_type_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].substance_type_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"reaction_class_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].reaction_class_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"severity_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].severity_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"source_of_info_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].source_of_info_cd )
       SET stat = uar_srvsetstring (hallergyitem ,"source_of_info_ft" ,nullterm (req_out_add->message
         .triginfo.allergy[aknt ].source_of_info_ft ) )
       SET stat = uar_srvsetdate (hallergyitem ,"onset_dt_tm" ,cnvtdatetime (req_out_add->message.
         triginfo.allergy[aknt ].onset_dt_tm ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"reaction_status_cd" ,req_out_add->message.triginfo
        .allergy[aknt ].reaction_status_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"cancel_reason_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].cancel_reason_cd )
       SET stat = uar_srvsetdate (hallergyitem ,"cancel_dt_tm" ,cnvtdatetime (req_out_add->message.
         triginfo.allergy[aknt ].cancel_dt_tm ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"cancel_prsnl_id" ,req_out_add->message.triginfo.
        allergy[aknt ].cancel_prsnl_id )
       SET stat = uar_srvsetshort (hallergyitem ,"active_ind" ,req_out_add->message.triginfo.allergy[
        aknt ].active_ind )
       SET stat = uar_srvsetdouble (hallergyitem ,"active_status_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].active_status_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"active_status_prsnl_id" ,reqinfo->updt_id )
       SET stat = uar_srvsetdate (hallergyitem ,"active_status_dt_tm" ,cnvtdatetime (curdate ,
         curtime3 ) )
       SET stat = uar_srvsetdate (hallergyitem ,"beg_effective_dt_tm" ,cnvtdatetime (req_out_add->
         message.triginfo.allergy[aknt ].beg_effective_dt_tm ) )
       SET stat = uar_srvsetdate (hallergyitem ,"end_effective_dt_tm" ,cnvtdatetime (req_out_add->
         message.triginfo.allergy[aknt ].end_effective_dt_tm ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"contributor_system_cd" ,req_out_add->message.
        triginfo.allergy[aknt ].contributor_system_cd )
       SET stat = uar_srvsetdouble (hallergyitem ,"data_status_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].data_status_cd )
       SET stat = uar_srvsetdate (hallergyitem ,"data_status_dt_tm" ,cnvtdatetime (curdate ,curtime3
         ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"data_status_prsnl_id" ,reqinfo->updt_id )
       SET stat = uar_srvsetshort (hallergyitem ,"verified_status_flag" ,req_out_add->message.
        triginfo.allergy[aknt ].verified_status_flag )
       SET stat = uar_srvsetdouble (hallergyitem ,"rec_src_vocab_cd" ,req_out_add->message.triginfo.
        allergy[aknt ].rec_src_vocab_cd )
       SET stat = uar_srvsetstring (hallergyitem ,"rec_src_identifier" ,nullterm (req_out_add->
         message.triginfo.allergy[aknt ].rec_src_identifier ) )
       SET stat = uar_srvsetstring (hallergyitem ,"rec_src_string" ,nullterm (req_out_add->message.
         triginfo.allergy[aknt ].rec_src_string ) )
       SET stat = uar_srvsetdouble (hallergyitem ,"reviewed_prsnl_id" ,req_out_add->message.triginfo.
        allergy[aknt ].reviewed_prsnl_id )
       SET stat = uar_srvsetdate (hallergyitem ,"reviewed_dt_tm" ,cnvtdatetime (req_out_add->message.
         triginfo.allergy[aknt ].reviewed_dt_tm ) )
       SET stat = uar_srvsetlong (hallergyitem ,"reaction_cnt" ,req_out_add->message.triginfo.
        allergy[aknt ].reaction_cnt )
       SET stat = uar_srvsetlong (hallergyitem ,"allergy_comment_cnt" ,req_out_add->message.triginfo.
        allergy[aknt ].allergy_comment_cnt )
       IF (validate (req_out_add->message.triginfo.allergy[aknt ].sub_concept_cki ) )
        SET stat = uar_srvsetstring (hallergyitem ,"sub_concept_cki" ,nullterm (req_out_add->message.
          triginfo.allergy[aknt ].sub_concept_cki ) )
       ENDIF
       SET cknt = 0
       WHILE ((cknt < req_out_add->message.triginfo.allergy[aknt ].allergy_comment_cnt ) )
        SET cknt = (cknt + 1 )
        SET hallergy_commentitem = uar_srvadditem (hallergyitem ,"allergy_comment" )
        IF (hallergy_commentitem )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"interface_action_cd" ,req_out_add->
          message.triginfo.allergy[aknt ].allergy_comment[cknt ].interface_action_cd )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"allergy_comment_id" ,req_out_add->
          message.triginfo.allergy[aknt ].allergy_comment[cknt ].allergy_comment_id )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"allergy_instance_id" ,req_out_add->
          message.triginfo.allergy[aknt ].allergy_comment[cknt ].allergy_instance_id )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"allergy_id" ,req_out_add->message.
          triginfo.allergy[aknt ].allergy_comment[cknt ].allergy_id )
         SET stat = uar_srvsetdate (hallergy_commentitem ,"comment_dt_tm" ,cnvtdatetime (req_out_add
           ->message.triginfo.allergy[aknt ].allergy_comment[cknt ].comment_dt_tm ) )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"comment_prsnl_id" ,req_out_add->message.
          triginfo.allergy[aknt ].allergy_comment[cknt ].comment_prsnl_id )
         SET stat = uar_srvsetstring (hallergy_commentitem ,"allergy_comment" ,nullterm (req_out_add
           ->message.triginfo.allergy[aknt ].allergy_comment[cknt ].allergy_comment ) )
         SET stat = uar_srvsetshort (hallergy_commentitem ,"active_ind" ,req_out_add->message.
          triginfo.allergy[aknt ].allergy_comment[cknt ].active_ind )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"active_status_cd" ,req_out_add->message.
          triginfo.allergy[aknt ].allergy_comment[cknt ].active_status_cd )
         SET stat = uar_srvsetdate (hallergy_commentitem ,"active_status_dt_tm" ,cnvtdatetime (
           curdate ,curtime3 ) )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"active_status_prsnl_id" ,reqinfo->
          updt_id )
         SET stat = uar_srvsetdate (hallergy_commentitem ,"beg_effective_dt_tm" ,cnvtdatetime (
           req_out_add->message.triginfo.allergy[aknt ].allergy_comment[cknt ].beg_effective_dt_tm )
          )
         SET stat = uar_srvsetdate (hallergy_commentitem ,"end_effective_dt_tm" ,cnvtdatetime (
           req_out_add->message.triginfo.allergy[aknt ].allergy_comment[cknt ].end_effective_dt_tm )
          )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"contributor_system_cd" ,req_out_add->
          message.triginfo.allergy[aknt ].allergy_comment[cknt ].contributor_system_cd )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"data_status_cd" ,req_out_add->message.
          triginfo.allergy[aknt ].allergy_comment[cknt ].data_status_cd )
         SET stat = uar_srvsetdate (hallergy_commentitem ,"data_status_dt_tm" ,cnvtdatetime (curdate
           ,curtime3 ) )
         SET stat = uar_srvsetdouble (hallergy_commentitem ,"data_status_prsnl_id" ,reqinfo->updt_id
          )
        ELSE
         CALL echo ("FAILURE hAllergy_CommentItem" )
        ENDIF
       ENDWHILE
       SET rknt = 0
       WHILE ((rknt < req_out_add->message.triginfo.allergy[aknt ].reaction_cnt ) )
        SET rknt = (rknt + 1 )
        SET hreactionitem = uar_srvadditem (hallergyitem ,"reaction" )
        IF (hreactionitem )
         SET stat = uar_srvsetdouble (hreactionitem ,"interface_action_cd" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].interface_action_cd )
         SET stat = uar_srvsetdouble (hreactionitem ,"reaction_id" ,req_out_add->message.triginfo.
          allergy[aknt ].reaction[rknt ].reaction_id )
         SET stat = uar_srvsetdouble (hreactionitem ,"allergy_instance_id" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].allergy_instance_id )
         SET stat = uar_srvsetdouble (hreactionitem ,"allergy_id" ,req_out_add->message.triginfo.
          allergy[aknt ].reaction[rknt ].allergy_id )
         SET stat = uar_srvsetdouble (hreactionitem ,"reaction_nom_id" ,req_out_add->message.triginfo
          .allergy[aknt ].reaction[rknt ].reaction_nom_id )
         SET stat = uar_srvsetstring (hreactionitem ,"reaction_ftdesc" ,nullterm (req_out_add->
           message.triginfo.allergy[aknt ].reaction[rknt ].reaction_ftdesc ) )
         SET stat = uar_srvsetshort (hreactionitem ,"active_ind" ,req_out_add->message.triginfo.
          allergy[aknt ].reaction[rknt ].active_ind )
         SET stat = uar_srvsetdouble (hreactionitem ,"active_status_cd" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].active_status_cd )
         SET stat = uar_srvsetdate (hreactionitem ,"active_status_dt_tm" ,cnvtdatetime (req_out_add->
           message.triginfo.allergy[aknt ].reaction[rknt ].active_status_dt_tm ) )
         SET stat = uar_srvsetdouble (hreactionitem ,"active_status_prsnl_id" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].active_status_prsnl_id )
         SET stat = uar_srvsetdate (hreactionitem ,"beg_effective_dt_tm" ,cnvtdatetime (req_out_add->
           message.triginfo.allergy[aknt ].reaction[rknt ].beg_effective_dt_tm ) )
         SET stat = uar_srvsetdate (hreactionitem ,"end_effective_dt_tm" ,cnvtdatetime (req_out_add->
           message.triginfo.allergy[aknt ].reaction[rknt ].end_effective_dt_tm ) )
         SET stat = uar_srvsetdouble (hreactionitem ,"contributor_system_cd" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].contributor_system_cd )
         SET stat = uar_srvsetdouble (hreactionitem ,"data_status_cd" ,req_out_add->message.triginfo.
          allergy[aknt ].reaction[rknt ].data_status_cd )
         SET stat = uar_srvsetdate (hreactionitem ,"data_status_dt_tm" ,cnvtdatetime (req_out_add->
           message.triginfo.allergy[aknt ].reaction[rknt ].data_status_dt_tm ) )
         SET stat = uar_srvsetdouble (hreactionitem ,"data_status_prsnl_id" ,req_out_add->message.
          triginfo.allergy[aknt ].reaction[rknt ].data_status_prsnl_id )
        ELSE
         CALL echo ("FAILURE hReactionItem" )
        ENDIF
       ENDWHILE
      ELSE
       CALL echo ("FAILURE hAllergyItem" )
      ENDIF
     ENDWHILE
    ELSE
     CALL echo ("FAILURE hTrigItem" )
    ENDIF
   ELSE
    CALL echo ("FAILURE!! hCqmStruct" )
   ENDIF
  ELSE
   CALL echo ("FAILURE!! hMsgStruct" )
  ENDIF
  CALL echo (
   "***   calling uar_SrvExecute( srvrec->qual[1]->hMsg, srvrec->qual[1]->hReq, srvrec->qual[1]->hRep )"
   )
  SET iret = uar_srvexecute (srvrec->qual[1 ].hmsg ,srvrec->qual[1 ].hreq ,srvrec->qual[1 ].hrep )
  CASE (iret )
   OF 0 :
    CALL echo ("Successful Srv Execute " )
   OF 1 :
    CALL echo ("Srv Execute failed - Communication Error - FSI Hold Release Server may be down" )
   OF 2 :
    IF ((messageid = 0 ) )
     CALL echo ("TDB Message Id is zero..." )
    ELSE
     CALL echo ("SrvSelectMessage failed -- May need to perfrom CCLSECLOGIN" )
    ENDIF
   OF 3 :
    CALL echo ("Failed to allocate either the Request or Reply Handle" )
  ENDCASE
  CALL cleanup_srv_stuff (1 )
  IF ((iret > 0 ) )
   SET req_out_add->message.cqminfo.appname = "FSIESO"
   SET req_out_add->message.cqminfo.contribalias = "PM_ENS_ALLERGY"
   SET req_out_add->message.cqminfo.contribrefnum = nullterm (trim (cnvtstring (req_out_add->message.
      triginfo.allergy[1 ].allergy_instance_id ) ) )
   SET req_out_add->message.cqminfo.priority = 99
   SET req_out_add->message.cqminfo.class = "PM_ALLERGY"
   SET req_out_add->message.cqminfo.type = "ADT"
   SET req_out_add->message.cqminfo.subtype = "A31"
   SET req_out_add->message.cqminfo.subtype_detail = nullterm (trim (cnvtstring (req_out_add->message
      .triginfo.allergy[1 ].person_id ) ) )
   SET req_out_add->message.cqminfo.debug_ind = 0
   SET req_out_add->message.cqminfo.verbosity_flag = 0
   EXECUTE eso_add_cqm_downtime WITH replace ("REQUEST" ,req_out_add )
  ENDIF
 ENDIF
 GO TO exit_script
 SUBROUTINE  is_reaction_current (aidx ,ridx )
  SET reaction_is_current = false
  SELECT INTO "nl:"
   FROM (reaction r )
   PLAN (r
    WHERE (r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id )
    AND (r.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (r.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
   DETAIL
    reaction_is_current = true
   WITH nocounter
  ;end select
  CALL echo ("***" )
  CALL echo (build ("***   reaction_is_current :" ,reaction_is_current ) )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  is_instance_current (aidx )
  SET instance_is_current = false
  SELECT INTO "nl:"
   FROM (allergy a )
   PLAN (a
    WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id )
    AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (a.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
   DETAIL
    instance_is_current = true
   WITH nocounter
  ;end select
  CALL echo ("***" )
  CALL echo (build ("***   instance_is_current :" ,instance_is_current ) )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  is_allergy_pure_dup (aidx )
  SET allergy_pure_dup = true
  SET allergy_reviewed = false
  SET current_active_ind = 0
  IF ((((found_org_id = false ) ) OR ((prev_org_id = 0.0 ) )) )
   SET ierrcode = error (serrmsg ,0 )
   SET ierrcode = 0
   SELECT INTO "nl:"
    FROM (allergy a )
    PLAN (a
     WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ) )
    DETAIL
     prev_org_id = a.organization_id ,
     IF ((found_org_id = false ) ) found_org_id = true ,org_id = a.organization_id
     ENDIF
    WITH nocounter
   ;end select
   SET ierrcode = error (serrmsg ,0 )
  ENDIF
  IF ((ierrcode < 1 ) )
   SET ierrcode = 0
   SELECT INTO "nl:"
    FROM (allergy a )
    PLAN (a
     WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ) )
    DETAIL
     IF ((combine_away = true ) ) prev_org_id = a.organization_id ,org_id = a.organization_id ,
      found_org_id = true
     ENDIF
     ,current_active_ind = a.active_ind ,
     IF ((request->allergy[aidx ].encntr_id < 1 )
     AND (request->allergy[aidx ].rec_src_vocab_cd >= 0 ) ) request->allergy[aidx ].encntr_id = a
      .encntr_id
     ENDIF
     ,
     IF (NOT ((request->allergy[aidx ].cancel_dt_tm > 0 ) ) ) request->allergy[aidx ].cancel_dt_tm =
      a.cancel_dt_tm
     ENDIF
     ,
     IF ((a.reaction_status_cd = canceled_cd )
     AND (request->allergy[aidx ].reaction_status_cd != canceled_cd ) ) request->allergy[aidx ].
      cancel_dt_tm = null
     ENDIF
     ,
     IF ((a.reaction_status_cd != request->allergy[aidx ].reaction_status_cd ) )
      reaction_status_dt_tm = cnvtdatetime (now_dt_tm )
     ELSEIF ((a.reaction_status_dt_tm = null ) ) reaction_status_dt_tm = null
     ELSE reaction_status_dt_tm = cnvtdatetime (a.reaction_status_dt_tm )
     ENDIF
     ,
     IF ((a.substance_type_cd != request->allergy[aidx ].substance_type_cd ) ) allergy_pure_dup =
      false
     ELSEIF ((a.reaction_class_cd != request->allergy[aidx ].reaction_class_cd ) ) allergy_pure_dup
      = false
     ELSEIF ((a.severity_cd != request->allergy[aidx ].severity_cd ) ) allergy_pure_dup = false
     ELSEIF ((a.source_of_info_cd != request->allergy[aidx ].source_of_info_cd ) ) allergy_pure_dup
      = false
     ELSEIF ((a.substance_nom_id != request->allergy[aidx ].substance_nom_id ) ) allergy_pure_dup =
      false
     ELSEIF ((((a.source_of_info_ft = null )
     AND (request->allergy[aidx ].source_of_info_ft > " " ) ) OR ((a.source_of_info_ft != null )
     AND (request->allergy[aidx ].source_of_info_ft > " " )
     AND (request->allergy[aidx ].source_of_info_ft != a.source_of_info_ft ) )) ) allergy_pure_dup =
      false
     ELSEIF ((a.cancel_reason_cd != request->allergy[aidx ].cancel_reason_cd ) ) allergy_pure_dup =
      false
     ENDIF
     ,
     IF ((a.reaction_status_cd != request->allergy[aidx ].reaction_status_cd ) )
      IF ((request->allergy[aidx ].reaction_status_cd = canceled_cd ) )
       IF (NOT ((request->allergy[aidx ].cancel_dt_tm > 0 ) ) ) request->allergy[aidx ].cancel_dt_tm
        = canceled_dt_tm
       ENDIF
      ENDIF
      ,allergy_pure_dup = false
     ENDIF
     ,
     IF ((request->allergy[aidx ].onset_dt_tm > 0 ) )
      IF ((((a.onset_dt_tm = null )
      AND (request->allergy[aidx ].onset_dt_tm > 0 ) ) OR ((a.onset_dt_tm != null )
      AND (request->allergy[aidx ].onset_dt_tm != a.onset_dt_tm ) )) ) allergy_pure_dup = false
      ENDIF
     ELSE request->allergy[aidx ].onset_dt_tm = a.onset_dt_tm ,request->allergy[aidx ].onset_tz = a
      .onset_tz
     ENDIF
     ,
     IF ((request->allergy[aidx ].onset_precision_cd > 0 ) )
      IF ((a.onset_precision_cd != request->allergy[aidx ].onset_precision_cd ) ) allergy_pure_dup =
       false
      ENDIF
     ELSE request->allergy[aidx ].onset_precision_cd = a.onset_precision_cd
     ENDIF
     ,history_combine = false ,
     IF ((request->allergy[aidx ].cmb_flag = 1 ) ) allergy_pure_dup = false ,request->allergy[aidx ].
      cmb_dt_tm = cnvtdatetime (curdate ,curtime3 )
     ENDIF
     ,
     IF ((request->allergy[aidx ].cmb_flag = 2 ) ) history_combine = true ,allergy_dup = false ,
      request->allergy[aidx ].cmb_dt_tm = cnvtdatetime (curdate ,curtime3 )
     ENDIF
     ,
     IF ((a.cmb_flag > 0 )
     AND (request->allergy[aidx ].cmb_flag = 0 ) ) request->allergy[aidx ].cmb_flag = 3 ,request->
      allergy[aidx ].cmb_prsnl_id = a.cmb_prsnl_id ,request->allergy[aidx ].cmb_person_id = a
      .cmb_person_id ,request->allergy[aidx ].cmb_dt_tm = cnvtdatetime (a.cmb_dt_tm ) ,request->
      allergy[aidx ].cmb_tz = a.cmb_tz
     ENDIF
     ,
     IF ((request->allergy[aidx ].onset_precision_flag > 0 ) )
      IF ((a.onset_precision_flag != request->allergy[aidx ].onset_precision_flag ) )
       allergy_pure_dup = false
      ENDIF
     ELSE request->allergy[aidx ].onset_precision_flag = a.onset_precision_flag
     ENDIF
     ,
     IF ((request->allergy[aidx ].created_prsnl_id > 0 ) )
      IF ((a.created_prsnl_id != request->allergy[aidx ].created_prsnl_id ) ) allergy_pure_dup =
       false
      ENDIF
     ELSEIF ((request->allergy[aidx ].created_prsnl_id = - (999 ) )
     AND (a.created_prsnl_id > 0 ) ) allergy_pure_dup = false
     ELSE request->allergy[aidx ].created_prsnl_id = a.created_prsnl_id
     ENDIF
     ,
     IF ((request->allergy[aidx ].reviewed_dt_tm > 0 ) )
      IF ((request->allergy[aidx ].reviewed_dt_tm = cnvtdatetime ("1-jan-1800 00:00:00" ) ) ) request
       ->allergy[aidx ].reviewed_dt_tm = null ,
       IF ((a.reviewed_dt_tm != null ) ) allergy_reviewed = true
       ENDIF
      ELSEIF ((((a.reviewed_dt_tm = null )
      AND (request->allergy[aidx ].reviewed_dt_tm > 0 ) ) OR ((a.reviewed_dt_tm != null )
      AND (request->allergy[aidx ].reviewed_dt_tm != a.reviewed_dt_tm ) )) ) allergy_reviewed = true
      ENDIF
     ELSE request->allergy[aidx ].reviewed_dt_tm = a.reviewed_dt_tm ,request->allergy[aidx ].
      reviewed_tz = a.reviewed_tz
     ENDIF
    WITH nocounter
   ;end select
   CALL echo ("***" )
   CALL echo (build ("***   allergy_pure_dup :" ,allergy_pure_dup ) )
   CALL echo (build ("***   allergy_reviewed :" ,allergy_reviewed ) )
   CALL echo (build ("***   history_combine  :" ,history_combine ) )
   CALL echo ("***" )
   SET ierrcode = error (serrmsg ,1 )
  ENDIF
  IF ((allergy_pure_dup = true ) )
   SET reaction_pure_dup = true
   SET reaction_is_current = true
   SET reaction_dup = true
   FOR (j = 1 TO request->allergy[aidx ].reaction_cnt )
    IF ((request->allergy[aidx ].reaction[j ].reaction_id > 0 ) )
     CALL is_reaction_current (aidx ,j )
     IF ((ierrcode > 0 ) )
      SET failed = select_error
      SET table_name = "REACTION_CHECK"
      GO TO exit_script
     ENDIF
     IF ((reaction_is_current = true ) )
      CALL is_reaction_pure_dup (aidx ,j )
      IF ((ierrcode > 0 ) )
       SET failed = select_error
       SET table_name = "REACTION"
       GO TO exit_script
      ENDIF
     ENDIF
    ELSE
     CALL is_reaction_dup (aidx ,j )
     IF ((ierrcode > 0 ) )
      SET failed = select_error
      SET table_name = "REACTION"
      GO TO exit_script
     ENDIF
     IF ((reaction_dup = true ) )
      CALL is_reaction_pure_dup (aidx ,j )
     ENDIF
    ENDIF
    IF ((((reaction_dup = false ) ) OR ((reaction_pure_dup = false ) )) )
     SET allergy_pure_dup = false
     RETURN
    ENDIF
   ENDFOR
  ENDIF
  IF ((allergy_pure_dup = true ) )
   SET cancel_comment = false
   SET comment_exist = false
   IF ((load_existing_comments_exec = false ) )
    CALL load_existing_comments (aidx )
   ENDIF
   FOR (k = 1 TO request->allergy[aidx ].allergy_comment_cnt )
    CALL does_comment_exist (aidx ,k )
    IF ((((comment_exist = false ) ) OR ((cancel_comment = true ) )) )
     SET allergy_pure_dup = false
     RETURN
    ENDIF
   ENDFOR
  ENDIF
 END ;Subroutine
 SUBROUTINE  is_allergy_dup (aidx )
  SET allergy_dup = true
  SET ierrcode = 0
  IF ((request->allergy[aidx ].substance_nom_id > 0 ) )
   SELECT INTO "nl:"
    n.nomenclature_id ,
    n.source_string
    FROM (nomenclature n )
    PLAN (n
     WHERE (n.nomenclature_id = request->allergy[aidx ].substance_nom_id ) )
    HEAD REPORT
     found_nomen_id = true
    HEAD n.nomenclature_id
     sub_nomen_text = n.source_string_keycap
    WITH nocounter
   ;end select
   CALL echo ("***" )
   CALL echo (build ("***   found_nomen_id :" ,found_nomen_id ) )
   CALL echo (build ("***   source string :" ,sub_nomen_text ) )
   CALL echo ("***" )
  ELSE
   SET sub_nomen_text = cnvtupper (request->allergy[aidx ].substance_ftdesc )
  ENDIF
  CALL echo ("***" )
  CALL echo ("***   Get Nomen_Id list for Substance Text" )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
  SET ierrcode = 0
  SELECT INTO "nl:"
   FROM (nomenclature n )
   PLAN (n
    WHERE (n.source_string_keycap = sub_nomen_text ) )
   HEAD REPORT
    knt = 0
   DETAIL
    knt = (knt + 1 ) ,
    IF ((mod (knt ,10 ) = 1 ) ) stat = alterlist (substance_nomen_id_list->id ,(knt + 9 ) )
    ENDIF
    ,substance_nomen_id_list->id[knt ].val = n.nomenclature_id
   FOOT REPORT
    stat = alterlist (substance_nomen_id_list->id ,knt ) ,
    substance_nomen_id_list->knt = knt
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
  IF ((ierrcode > 0 ) )
   SET failed = select_error
   SET table_name = "NOMENCLATURE"
   GO TO exit_script
  ENDIF
  SELECT INTO "nl:"
   a.allergy_instance_id ,
   a.updt_dt_tm ,
   n.nomeclature_id ,
   n.concept_source_cd
   FROM (allergy a ),
    (nomenclature n )
   PLAN (a
    WHERE (a.person_id = request->allergy[aidx ].person_id )
    AND ((expand (knt ,1 ,substance_nomen_id_list->knt ,a.substance_nom_id ,substance_nomen_id_list->
     id[knt ].val ) ) OR ((cnvtupper (a.substance_ftdesc ) = sub_nomen_text ) ))
    AND (a.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (a.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
    JOIN (n
    WHERE (n.nomenclature_id = outerjoin (a.substance_nom_id ) ) )
   ORDER BY a.updt_dt_tm DESC ,
    a.active_ind DESC ,
    a.allergy_instance_id DESC
   HEAD REPORT
    found_it = false
   HEAD a.allergy_instance_id
    IF ((found_it = false ) ) request->allergy[aidx ].allergy_instance_id = a.allergy_instance_id ,
     request->allergy[aidx ].allergy_id = a.allergy_id ,
     IF ((request->allergy[aidx ].substance_nom_id <= 0 )
     AND (a.substance_nom_id > 0 ) ) request->allergy[aidx ].substance_nom_id = a.substance_nom_id ,
      request->allergy[aidx ].substance_ftdesc = ""
     ELSEIF ((n.concept_source_cd IN (mul_algcat_cd ,
     mul_drug_cd ,
     dgddbmolcd ,
     dgddbsubstcd ,
     dgddbprodlncd ,
     dgddbactgrpcd ) ) ) request->allergy[aidx ].substance_nom_id = a.substance_nom_id
     ENDIF
     ,found_it = true
    ENDIF
   WITH nocounter
  ;end select
  IF ((curqual < 1 ) )
   SET allergy_dup = false
  ENDIF
  CALL echo ("***" )
  CALL echo (build ("***   allergy_dup :" ,allergy_dup ) )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  is_reaction_pure_dup (aidx ,ridx )
  SET reaction_pure_dup = true
  SET current_reaction_act_ind = 0
  SET ierrcode = 0
  SELECT
   IF ((request->allergy[aidx ].reaction[ridx ].reaction_nom_id > 0 ) )
    PLAN (r
     WHERE (r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id )
     AND (r.reaction_nom_id = request->allergy[aidx ].reaction[ridx ].reaction_nom_id ) )
   ELSE
    PLAN (r
     WHERE (r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id )
     AND (r.reaction_ftdesc = request->allergy[aidx ].reaction[ridx ].reaction_ftdesc ) )
   ENDIF
   INTO "nl:"
   FROM (reaction r )
   DETAIL
    current_reaction_act_ind = r.active_ind ,
    IF ((r.active_ind != request->allergy[aidx ].reaction[ridx ].active_ind ) ) reaction_pure_dup =
     false
    ENDIF
    ,history_combine = false ,
    IF ((request->allergy[aidx ].reaction[ridx ].cmb_flag = 1 ) ) reaction_pure_dup = false ,request
     ->allergy[aidx ].reaction[ridx ].cmb_dt_tm = cnvtdatetime (curdate ,curtime3 )
    ENDIF
    ,
    IF ((request->allergy[aidx ].reaction[ridx ].cmb_flag = 2 ) ) history_combine = true ,
     reaction_dup = false ,request->allergy[aidx ].reaction[ridx ].cmb_dt_tm = cnvtdatetime (curdate
      ,curtime3 )
    ENDIF
    ,
    IF ((r.cmb_flag > 0 )
    AND (request->allergy[aidx ].reaction[ridx ].cmb_flag = 0 ) ) request->allergy[aidx ].reaction[
     ridx ].cmb_flag = 3 ,request->allergy[aidx ].reaction[ridx ].cmb_prsnl_id = r.cmb_prsnl_id ,
     request->allergy[aidx ].reaction[ridx ].cmb_person_id = r.cmb_person_id ,request->allergy[aidx ]
     .reaction[ridx ].cmb_dt_tm = cnvtdatetime (r.cmb_dt_tm ) ,request->allergy[aidx ].reaction[ridx
     ].cmb_tz = r.cmb_tz
    ENDIF
   WITH nocounter
  ;end select
  IF ((curqual < 1 ) )
   SET reaction_pure_dup = false
  ENDIF
  CALL echo ("***" )
  CALL echo (build ("***   reaction_pure_dup :" ,reaction_pure_dup ) )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  is_reaction_dup (aidx ,ridx )
  SET reaction_dup = true
  SET ierrcode = 0
  SELECT
   IF ((request->allergy[aidx ].reaction[ridx ].reaction_nom_id > 0 ) )
    PLAN (r
     WHERE (r.allergy_id = request->allergy[aidx ].allergy_id )
     AND (r.reaction_nom_id = request->allergy[aidx ].reaction[ridx ].reaction_nom_id ) )
   ELSE
    PLAN (r
     WHERE (r.allergy_id = request->allergy[aidx ].allergy_id )
     AND (r.reaction_ftdesc = request->allergy[aidx ].reaction[ridx ].reaction_ftdesc ) )
   ENDIF
   INTO "nl:"
   r.reaction_id ,
   r.updt_dt_tm
   FROM (reaction r )
   ORDER BY r.updt_dt_tm DESC ,
    r.reaction_id DESC
   HEAD REPORT
    found_it = false
   HEAD r.reaction_id
    IF ((found_it = false ) ) request->allergy[aidx ].reaction[ridx ].reaction_id = r.reaction_id ,
     found_it = true
    ENDIF
   WITH nocounter
  ;end select
  IF ((curqual < 1 ) )
   SET reaction_dup = false
  ENDIF
  CALL echo ("***" )
  CALL echo (build ("***   reaction_dup :" ,reaction_dup ) )
  CALL echo ("***" )
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  does_comment_exist (aidx ,cidx )
  SET comment_exist = false
  SET cancel_comment = false
  FOR (p = 1 TO existing_comment_nbr )
   IF ((request->allergy[aidx ].allergy_comment[cidx ].allergy_comment = comment->qual[p ].
   allergy_comment ) )
    SET comment_exist = true
    SET request->allergy[aidx ].allergy_comment[cidx ].allergy_comment_id = comment->qual[p ].
    allergy_comment_id
    IF ((request->allergy[aidx ].allergy_comment[cidx ].active_ind = 0 ) )
     SET cancel_comment = true
    ENDIF
   ENDIF
  ENDFOR
  CALL echo ("***" )
  CALL echo (build ("***   comment_exist  :" ,comment_exist ) )
  CALL echo (build ("***   cancel_comment :" ,cancel_comment ) )
  CALL echo ("***" )
 END ;Subroutine
 SUBROUTINE  load_existing_comments (aidx )
  SET existing_comment_nbr = 0
  SET load_existing_comments_exec = true
  SET ierrcode = 0
  SELECT INTO "nl:"
   ac.allergy_comment_id ,
   ac.updt_dt_tm
   FROM (allergy_comment ac )
   PLAN (ac
    WHERE (ac.allergy_id = request->allergy[aidx ].allergy_id )
    AND (ac.active_ind = 1 )
    AND (ac.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (ac.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
   ORDER BY ac.updt_dt_tm DESC ,
    ac.allergy_comment_id DESC
   HEAD REPORT
    knt = 0 ,
    stat = alterlist (comment->qual ,10 )
   DETAIL
    knt = (knt + 1 ) ,
    IF ((mod (knt ,10 ) = 1 )
    AND (knt != 1 ) ) stat = alterlist (comment->qual ,(knt + 9 ) )
    ENDIF
    ,comment->qual[knt ].allergy_comment_id = ac.allergy_comment_id ,
    comment->qual[knt ].allergy_comment = ac.allergy_comment ,
    comment->qual[knt ].allergy_comment_id = ac.allergy_comment_id ,
    comment->qual[knt ].comment_dt_tm = ac.comment_dt_tm ,
    comment->qual[knt ].comment_tz = ac.comment_tz ,
    comment->qual[knt ].comment_prsnl_id = ac.comment_prsnl_id ,
    comment->qual[knt ].active_ind = ac.active_ind ,
    comment->qual[knt ].active_status_cd = ac.active_status_cd ,
    comment->qual[knt ].active_status_dt_tm = ac.active_status_dt_tm ,
    comment->qual[knt ].active_status_prsnl_id = ac.active_status_prsnl_id ,
    comment->qual[knt ].beg_effective_dt_tm = ac.beg_effective_dt_tm ,
    comment->qual[knt ].beg_effective_tz = ac.beg_effective_tz ,
    comment->qual[knt ].end_effective_dt_tm = ac.end_effective_dt_tm ,
    comment->qual[knt ].contributor_system_cd = ac.contributor_system_cd ,
    comment->qual[knt ].data_status_cd = ac.data_status_cd ,
    comment->qual[knt ].data_status_dt_tm = ac.data_status_dt_tm ,
    comment->qual[knt ].data_status_prsnl_id = ac.data_status_prsnl_id
   FOOT REPORT
    comment->qual_knt = knt ,
    stat = alterlist (comment->qual ,knt ) ,
    existing_comment_nbr = knt
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  get_next_allergy_seq (tvar )
  SET new_id = 0.0
  SET ierrcode = 0
  SELECT INTO "nl:"
   num = seq (health_status_seq ,nextval )
   FROM (dual )
   DETAIL
    new_id = cnvtreal (num )
   WITH nocounter
  ;end select
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  insert_allergy (aidx )
  CALL echo ("***" )
  CALL echo (build ("***   allergy_instance_id :" ,request->allergy[aidx ].allergy_instance_id ) )
  CALL echo (build ("***   allergy_id          :" ,request->allergy[aidx ].allergy_id ) )
  CALL echo ("***" )
  SET ierrcode = 0
  INSERT FROM (allergy a )
   SET a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    a.allergy_id = request->allergy[aidx ].allergy_id ,
    a.person_id = request->allergy[aidx ].person_id ,
    a.encntr_id = request->allergy[aidx ].encntr_id ,
    a.organization_id = org_id ,
    a.sub_concept_cki = request->allergy[aidx ].sub_concept_cki ,
    a.substance_nom_id = request->allergy[aidx ].substance_nom_id ,
    a.substance_ftdesc = request->allergy[aidx ].substance_ftdesc ,
    a.substance_type_cd = request->allergy[aidx ].substance_type_cd ,
    a.reaction_status_cd = request->allergy[aidx ].reaction_status_cd ,
    a.reaction_status_dt_tm =
    IF ((request->allergy[aidx ].reaction_status_dt_tm > 0 ) ) cnvtdatetime (request->allergy[aidx ].
      reaction_status_dt_tm )
    ELSEIF ((reaction_status_dt_tm = null ) ) null
    ELSE cnvtdatetime (reaction_status_dt_tm )
    ENDIF
    ,a.orig_prsnl_id =
    IF ((request->allergy[aidx ].orig_prsnl_id > 0 ) ) request->allergy[aidx ].orig_prsnl_id
    ELSE reqinfo->updt_id
    ENDIF
    ,a.reaction_class_cd = request->allergy[aidx ].reaction_class_cd ,
    a.severity_cd = request->allergy[aidx ].severity_cd ,
    a.source_of_info_cd = request->allergy[aidx ].source_of_info_cd ,
    a.source_of_info_ft = request->allergy[aidx ].source_of_info_ft ,
    a.onset_dt_tm =
    IF ((request->allergy[aidx ].onset_dt_tm > 0 ) ) cnvtdatetime (request->allergy[aidx ].
      onset_dt_tm )
    ELSE null
    ENDIF
    ,a.onset_tz =
    IF ((request->allergy[aidx ].onset_tz > 0 ) ) request->allergy[aidx ].onset_tz
    ELSE user_tz
    ENDIF
    ,a.onset_precision_cd = request->allergy[aidx ].onset_precision_cd ,
    a.onset_precision_flag = request->allergy[aidx ].onset_precision_flag ,
    a.created_dt_tm =
    IF ((request->allergy[aidx ].created_dt_tm > 0 ) ) cnvtdatetime (request->allergy[aidx ].
      created_dt_tm )
    ELSE cnvtdatetime (curdate ,curtime3 )
    ENDIF
    ,a.created_prsnl_id = request->allergy[aidx ].created_prsnl_id ,
    a.cancel_reason_cd = request->allergy[aidx ].cancel_reason_cd ,
    a.cancel_dt_tm = cnvtdatetime (request->allergy[aidx ].cancel_dt_tm ) ,
    a.cancel_prsnl_id = request->allergy[aidx ].cancel_prsnl_id ,
    a.contributor_system_cd = request->allergy[aidx ].contributor_system_cd ,
    a.reviewed_dt_tm =
    IF ((request->allergy[aidx ].reviewed_dt_tm = cnvtdatetime ("1-jan-1800 00:00:00" ) ) ) null
    ELSEIF ((request->allergy[aidx ].reviewed_dt_tm > 0 ) ) cnvtdatetime (request->allergy[aidx ].
      reviewed_dt_tm )
    ELSE null
    ENDIF
    ,a.reviewed_tz =
    IF ((request->allergy[aidx ].reviewed_tz > 0 ) ) request->allergy[aidx ].reviewed_tz
    ELSE user_tz
    ENDIF
    ,a.reviewed_prsnl_id = request->allergy[aidx ].reviewed_prsnl_id ,
    a.verified_status_flag = request->allergy[aidx ].verified_status_flag ,
    a.rec_src_vocab_cd = request->allergy[aidx ].rec_src_vocab_cd ,
    a.rec_src_identifer = request->allergy[aidx ].rec_src_identifier ,
    a.rec_src_string = request->allergy[aidx ].rec_src_string ,
    a.data_status_cd =
    IF ((request->allergy[aidx ].data_status_cd < 1 ) ) unauth_cd
    ELSE request->allergy[aidx ].data_status_cd
    ENDIF
    ,a.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.data_status_prsnl_id = reqinfo->updt_id ,
    a.beg_effective_dt_tm =
    IF ((request->allergy[aidx ].beg_effective_dt_tm < 1 ) ) cnvtdatetime (curdate ,curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].beg_effective_dt_tm )
    ENDIF
    ,a.beg_effective_tz =
    IF ((request->allergy[aidx ].beg_effective_tz > 0 ) ) request->allergy[aidx ].beg_effective_tz
    ELSE user_tz
    ENDIF
    ,a.end_effective_dt_tm =
    IF ((request->allergy[aidx ].end_effective_dt_tm < 1 ) ) cnvtdatetime ("31-dec-2100 23:59:59" )
    ELSE cnvtdatetime (request->allergy[aidx ].end_effective_dt_tm )
    ENDIF
    ,a.active_ind = request->allergy[aidx ].active_ind ,
    a.active_status_cd =
    IF ((request->allergy[aidx ].active_status_cd < 1 ) ) active_cd
    ELSE request->allergy[aidx ].active_status_cd
    ENDIF
    ,a.active_status_prsnl_id =
    IF ((request->allergy[aidx ].active_status_prsnl_id < 1 ) ) reqinfo->updt_id
    ELSE request->allergy[aidx ].active_status_prsnl_id
    ENDIF
    ,a.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.updt_cnt = 0 ,
    a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.updt_id =
    IF ((request->allergy[aidx ].updt_id > 0 ) ) request->allergy[aidx ].updt_id
    ELSE reqinfo->updt_id
    ENDIF
    ,a.updt_task = reqinfo->updt_task ,
    a.updt_applctx = reqinfo->updt_applctx ,
    a.cmb_instance_id = request->allergy[aidx ].cmb_instance_id ,
    a.cmb_flag = request->allergy[aidx ].cmb_flag ,
    a.cmb_prsnl_id = request->allergy[aidx ].cmb_prsnl_id ,
    a.cmb_person_id = request->allergy[aidx ].cmb_person_id ,
    a.cmb_dt_tm =
    IF ((request->allergy[aidx ].cmb_dt_tm > 0 ) ) cnvtdatetime (request->allergy[aidx ].cmb_dt_tm )
    ELSE null
    ENDIF
    ,a.cmb_tz =
    IF ((((request->allergy[aidx ].cmb_dt_tm = null ) ) OR ((request->allergy[aidx ].cmb_dt_tm < 1 )
    )) ) 0
    ELSEIF ((request->allergy[aidx ].cmb_tz > 0 ) ) request->allergy[aidx ].cmb_tz
    ELSE user_tz
    ENDIF
   PLAN (a
    WHERE (0 = 0 ) )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  deactivate_allergy (aidx )
  CALL echo ("***" )
  CALL echo (build ("***   allergy_instance_id :" ,request->allergy[aidx ].allergy_instance_id ) )
  CALL echo (build ("***   allergy_id          :" ,request->allergy[aidx ].allergy_id ) )
  CALL echo ("***" )
  SET ierrcode = 0
  UPDATE FROM (allergy a )
   SET a.updt_cnt = (a.updt_cnt + 1 ) ,
    a.active_ind = false ,
    a.active_status_cd = inactive_cd ,
    a.active_status_prsnl_id = reqinfo->updt_id ,
    a.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.end_effective_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.updt_id = reqinfo->updt_id ,
    a.updt_applctx = reqinfo->updt_applctx ,
    a.updt_task = reqinfo->updt_task
   PLAN (a
    WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ) )
   WITH nocounter
  ;end update
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  stamp_reviewed (aidx )
  SET ierrcode = 0
  UPDATE FROM (allergy a )
   SET a.reviewed_dt_tm = cnvtdatetime (request->allergy[aidx ].reviewed_dt_tm ) ,
    a.reviewed_tz =
    IF ((request->allergy[aidx ].reviewed_tz > 0 ) ) request->allergy[aidx ].reviewed_tz
    ELSE user_tz
    ENDIF
    ,a.reviewed_prsnl_id =
    IF ((request->allergy[aidx ].reviewed_dt_tm = null ) ) 0.0
    ELSEIF ((request->allergy[aidx ].reviewed_prsnl_id < 1 ) ) reqinfo->updt_id
    ELSE request->allergy[aidx ].reviewed_prsnl_id
    ENDIF
   PLAN (a
    WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ) )
   WITH nocounter
  ;end update
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  insert_new_reaction (aidx )
  SET ierrcode = 0
  INSERT FROM (reaction r ),
    (dummyt d WITH seq = value (request->allergy[aidx ].reaction_cnt ) )
   SET r.reaction_id = cnvtreal (seq (health_status_seq ,nextval ) ) ,
    r.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    r.allergy_id = request->allergy[aidx ].allergy_id ,
    r.reaction_nom_id = request->allergy[aidx ].reaction[d.seq ].reaction_nom_id ,
    r.reaction_ftdesc = request->allergy[aidx ].reaction[d.seq ].reaction_ftdesc ,
    r.contributor_system_cd = request->allergy[aidx ].reaction[d.seq ].contributor_system_cd ,
    r.data_status_cd =
    IF ((request->allergy[aidx ].reaction[d.seq ].data_status_cd < 1 ) ) unauth_cd
    ELSE request->allergy[aidx ].reaction[d.seq ].data_status_cd
    ENDIF
    ,r.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.data_status_prsnl_id = reqinfo->updt_id ,
    r.beg_effective_dt_tm =
    IF ((request->allergy[aidx ].reaction[d.seq ].beg_effective_dt_tm < 1 ) ) cnvtdatetime (curdate ,
      curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[d.seq ].beg_effective_dt_tm )
    ENDIF
    ,r.end_effective_dt_tm =
    IF ((request->allergy[aidx ].reaction[d.seq ].end_effective_dt_tm < 1 ) ) cnvtdatetime (
      "31-dec-2100 23:59:59" )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[d.seq ].end_effective_dt_tm )
    ENDIF
    ,r.active_ind = request->allergy[aidx ].reaction[d.seq ].active_ind ,
    r.active_status_cd =
    IF ((request->allergy[aidx ].reaction[d.seq ].active_status_cd < 1 ) ) active_cd
    ELSE request->allergy[aidx ].reaction[d.seq ].active_status_cd
    ENDIF
    ,r.active_status_prsnl_id = reqinfo->updt_id ,
    r.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.updt_cnt = 0 ,
    r.updt_dt_tm =
    IF ((request->allergy[aidx ].reaction[d.seq ].updt_dt_tm < 1 ) ) cnvtdatetime (curdate ,curtime3
      )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[d.seq ].updt_dt_tm )
    ENDIF
    ,r.updt_id =
    IF ((request->allergy[aidx ].reaction[d.seq ].updt_id > 0 ) ) request->allergy[aidx ].reaction[d
     .seq ].updt_id
    ELSE reqinfo->updt_id
    ENDIF
    ,r.updt_applctx = reqinfo->updt_applctx ,
    r.updt_task = reqinfo->updt_task ,
    r.cmb_reaction_id = request->allergy[aidx ].reaction[d.seq ].cmb_reaction_id ,
    r.cmb_flag = request->allergy[aidx ].reaction[d.seq ].cmb_flag ,
    r.cmb_prsnl_id = request->allergy[aidx ].reaction[d.seq ].cmb_prsnl_id ,
    r.cmb_person_id = request->allergy[aidx ].reaction[d.seq ].cmb_person_id ,
    r.cmb_dt_tm =
    IF ((request->allergy[aidx ].reaction[d.seq ].cmb_dt_tm > 0 ) ) cnvtdatetime (request->allergy[
      aidx ].reaction[d.seq ].cmb_dt_tm )
    ELSE null
    ENDIF
    ,r.cmb_tz =
    IF ((((request->allergy[aidx ].reaction[d.seq ].cmb_dt_tm = null ) ) OR ((request->allergy[aidx ]
    .reaction[d.seq ].cmb_dt_tm < 1 ) )) ) 0
    ELSEIF ((request->allergy[aidx ].reaction[d.seq ].cmb_tz > 0 ) ) request->allergy[aidx ].
     reaction[d.seq ].cmb_tz
    ELSE user_tz
    ENDIF
   PLAN (d
    WHERE (d.seq > 0 ) )
    JOIN (r
    WHERE (0 = 0 ) )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  insert_reaction (aidx ,ridx )
  SET ierrcode = 0
  INSERT FROM (reaction r )
   SET r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id ,
    r.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    r.allergy_id = request->allergy[aidx ].allergy_id ,
    r.reaction_nom_id = request->allergy[aidx ].reaction[ridx ].reaction_nom_id ,
    r.reaction_ftdesc = request->allergy[aidx ].reaction[ridx ].reaction_ftdesc ,
    r.contributor_system_cd = request->allergy[aidx ].reaction[ridx ].contributor_system_cd ,
    r.data_status_cd =
    IF ((request->allergy[aidx ].reaction[ridx ].data_status_cd < 1 ) ) unauth_cd
    ELSE request->allergy[aidx ].reaction[ridx ].data_status_cd
    ENDIF
    ,r.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.data_status_prsnl_id = reqinfo->updt_id ,
    r.beg_effective_dt_tm =
    IF ((request->allergy[aidx ].reaction[ridx ].beg_effective_dt_tm < 1 ) ) cnvtdatetime (curdate ,
      curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[ridx ].beg_effective_dt_tm )
    ENDIF
    ,r.end_effective_dt_tm =
    IF ((request->allergy[aidx ].reaction[ridx ].end_effective_dt_tm < 1 ) ) cnvtdatetime (
      "31-dec-2100 23:59:59" )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[ridx ].end_effective_dt_tm )
    ENDIF
    ,r.active_ind = request->allergy[aidx ].reaction[ridx ].active_ind ,
    r.active_status_cd =
    IF ((request->allergy[aidx ].reaction[ridx ].active_status_cd < 1 ) ) active_cd
    ELSE request->allergy[aidx ].reaction[ridx ].active_status_cd
    ENDIF
    ,r.active_status_prsnl_id =
    IF ((request->allergy[aidx ].reaction[ridx ].active_status_prsnl_id < 1 ) ) reqinfo->updt_id
    ELSE request->allergy[aidx ].reaction[ridx ].active_status_prsnl_id
    ENDIF
    ,r.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.updt_cnt = 0 ,
    r.updt_dt_tm =
    IF ((request->allergy[aidx ].reaction[ridx ].updt_dt_tm < 1 ) ) cnvtdatetime (curdate ,curtime3
      )
    ELSE cnvtdatetime (request->allergy[aidx ].reaction[ridx ].updt_dt_tm )
    ENDIF
    ,r.updt_id =
    IF ((request->allergy[aidx ].reaction[ridx ].updt_id > 0 ) ) request->allergy[aidx ].reaction[
     ridx ].updt_id
    ELSE reqinfo->updt_id
    ENDIF
    ,r.updt_applctx = reqinfo->updt_applctx ,
    r.updt_task = reqinfo->updt_task ,
    r.cmb_reaction_id = request->allergy[aidx ].reaction[ridx ].cmb_reaction_id ,
    r.cmb_flag = request->allergy[aidx ].reaction[ridx ].cmb_flag ,
    r.cmb_prsnl_id = request->allergy[aidx ].reaction[ridx ].cmb_prsnl_id ,
    r.cmb_person_id = request->allergy[aidx ].reaction[ridx ].cmb_person_id ,
    r.cmb_dt_tm =
    IF ((request->allergy[aidx ].reaction[ridx ].cmb_dt_tm > 0 ) ) cnvtdatetime (request->allergy[
      aidx ].reaction[ridx ].cmb_dt_tm )
    ELSE null
    ENDIF
    ,r.cmb_tz =
    IF ((((request->allergy[aidx ].reaction[ridx ].cmb_dt_tm = null ) ) OR ((request->allergy[aidx ].
    reaction[ridx ].cmb_dt_tm < 1 ) )) ) 0
    ELSEIF ((request->allergy[aidx ].reaction[ridx ].cmb_tz > 0 ) ) request->allergy[aidx ].reaction[
     ridx ].cmb_tz
    ELSE user_tz
    ENDIF
   PLAN (r
    WHERE (0 = 0 ) )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  deactivate_reaction (aidx ,ridx )
  SET ierrcode = 0
  UPDATE FROM (reaction r )
   SET r.active_ind = false ,
    r.active_status_cd = inactive_cd ,
    r.active_status_prsnl_id = r.active_status_prsnl_id ,
    r.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.updt_cnt = (r.updt_cnt + 1 ) ,
    r.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.updt_id = reqinfo->updt_id ,
    r.updt_applctx = reqinfo->updt_applctx ,
    r.updt_task = reqinfo->updt_task
   PLAN (r
    WHERE (r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id ) )
   WITH nocounter
  ;end update
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  end_effective_reaction (aidx ,ridx )
  SET ierrcode = 0
  UPDATE FROM (reaction r )
   SET r.active_status_prsnl_id = request->allergy[aidx ].reaction[ridx ].active_status_prsnl_id ,
    r.active_status_dt_tm =
    IF ((request->allergy[aidx ].reaction[ridx ].active_status_dt_tm > 0 ) ) cnvtdatetime (request->
      allergy[aidx ].reaction[ridx ].active_status_dt_tm )
    ELSE cnvtdatetime (curdate ,curtime3 )
    ENDIF
    ,r.end_effective_dt_tm =
    IF ((datetimediff (cnvtdatetime (curdate ,curtime3 ) ,request->allergy[aidx ].reaction[ridx ].
     end_effective_dt_tm ) > 0 ) ) cnvtdatetime (request->allergy[aidx ].reaction[ridx ].
      end_effective_dt_tm )
    ELSE cnvtdatetime (curdate ,curtime3 )
    ENDIF
    ,r.updt_cnt = (r.updt_cnt + 1 ) ,
    r.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    r.updt_id = reqinfo->updt_id ,
    r.updt_applctx = reqinfo->updt_applctx ,
    r.updt_task = reqinfo->updt_task
   PLAN (r
    WHERE (r.reaction_id = request->allergy[aidx ].reaction[ridx ].reaction_id ) )
   WITH nocounter
  ;end update
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  insert_new_comment (aidx )
  SET ierrcode = 0
  INSERT FROM (allergy_comment ac ),
    (dummyt d WITH seq = value (request->allergy[aidx ].allergy_comment_cnt ) )
   SET ac.allergy_comment_id = cnvtreal (seq (health_status_seq ,nextval ) ) ,
    ac.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    ac.allergy_id = request->allergy[aidx ].allergy_id ,
    ac.comment_dt_tm = cnvtdatetime (request->allergy[aidx ].allergy_comment[d.seq ].comment_dt_tm )
    ,ac.comment_tz =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].comment_tz > 0 ) ) request->allergy[aidx ].
     allergy_comment[d.seq ].comment_tz
    ELSE user_tz
    ENDIF
    ,ac.comment_prsnl_id = request->allergy[aidx ].allergy_comment[d.seq ].comment_prsnl_id ,
    ac.allergy_comment = request->allergy[aidx ].allergy_comment[d.seq ].allergy_comment ,
    ac.contributor_system_cd = request->allergy[aidx ].allergy_comment[d.seq ].contributor_system_cd
    ,ac.data_status_cd =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].data_status_cd < 1 ) ) unauth_cd
    ELSE request->allergy[aidx ].allergy_comment[d.seq ].data_status_cd
    ENDIF
    ,ac.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    ac.data_status_prsnl_id = reqinfo->updt_id ,
    ac.beg_effective_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].beg_effective_dt_tm < 1 ) ) cnvtdatetime (
      curdate ,curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].allergy_comment[d.seq ].beg_effective_dt_tm )
    ENDIF
    ,ac.beg_effective_tz =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].beg_effective_tz > 0 ) ) request->allergy[
     aidx ].allergy_comment[d.seq ].beg_effective_tz
    ELSE user_tz
    ENDIF
    ,ac.end_effective_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].end_effective_dt_tm < 1 ) ) cnvtdatetime (
      "31-dec-2100 23:59:59" )
    ELSE cnvtdatetime (request->allergy[aidx ].allergy_comment[d.seq ].end_effective_dt_tm )
    ENDIF
    ,ac.active_ind = request->allergy[aidx ].allergy_comment[d.seq ].active_ind ,
    ac.active_status_cd =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].active_status_cd < 1 ) ) active_cd
    ELSE request->allergy[aidx ].allergy_comment[d.seq ].active_status_cd
    ENDIF
    ,ac.active_status_prsnl_id = reqinfo->updt_id ,
    ac.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    ac.updt_cnt = 0 ,
    ac.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    ac.updt_id =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].updt_id > 0 ) ) request->allergy[aidx ].
     allergy_comment[d.seq ].updt_id
    ELSE reqinfo->updt_id
    ENDIF
    ,ac.updt_applctx = reqinfo->updt_applctx ,
    ac.updt_task = reqinfo->updt_task ,
    ac.cmb_comment_id = request->allergy[aidx ].allergy_comment[d.seq ].cmb_comment_id ,
    ac.cmb_flag = request->allergy[aidx ].allergy_comment[d.seq ].cmb_flag ,
    ac.cmb_prsnl_id = request->allergy[aidx ].allergy_comment[d.seq ].cmb_prsnl_id ,
    ac.cmb_person_id = request->allergy[aidx ].allergy_comment[d.seq ].cmb_person_id ,
    ac.cmb_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[d.seq ].cmb_dt_tm > 0 ) ) cnvtdatetime (request->
      allergy[aidx ].allergy_comment[d.seq ].cmb_dt_tm )
    ELSE null
    ENDIF
    ,ac.cmb_tz =
    IF ((((request->allergy[aidx ].allergy_comment[d.seq ].cmb_dt_tm = null ) ) OR ((request->
    allergy[aidx ].allergy_comment[d.seq ].cmb_dt_tm < 1 ) )) ) 0
    ELSEIF ((request->allergy[aidx ].allergy_comment[d.seq ].cmb_dt_tm > 0 ) ) request->allergy[aidx
     ].allergy_comment[d.seq ].cmb_tz
    ELSE user_tz
    ENDIF
   PLAN (d
    WHERE (d.seq > 0 ) )
    JOIN (ac
    WHERE (0 = 0 ) )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  deactivate_allergy_comment (aidx ,cidx )
  SET ierrcode = 0
  UPDATE FROM (allergy_comment ac )
   SET ac.active_ind = 0 ,
    ac.end_effective_dt_tm = cnvtdatetime (curdate ,curtime3 )
   PLAN (ac
    WHERE (ac.allergy_comment_id = request->allergy[aidx ].allergy_comment[cidx ].allergy_comment_id
    ) )
   WITH nocounter
  ;end update
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  insert_comment (aidx ,cidx )
  SET ierrcode = 0
  INSERT FROM (allergy_comment ac )
   SET ac.allergy_comment_id = request->allergy[aidx ].allergy_comment[cidx ].allergy_comment_id ,
    ac.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    ac.allergy_id = request->allergy[aidx ].allergy_id ,
    ac.comment_dt_tm = cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].comment_dt_tm ) ,
    ac.comment_tz =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].comment_tz > 0 ) ) request->allergy[aidx ].
     allergy_comment[cidx ].comment_tz
    ELSE user_tz
    ENDIF
    ,ac.comment_prsnl_id = request->allergy[aidx ].allergy_comment[cidx ].comment_prsnl_id ,
    ac.allergy_comment = request->allergy[aidx ].allergy_comment[cidx ].allergy_comment ,
    ac.contributor_system_cd = request->allergy[aidx ].allergy_comment[cidx ].contributor_system_cd ,
    ac.data_status_cd =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].data_status_cd < 1 ) ) unauth_cd
    ELSE request->allergy[aidx ].allergy_comment[cidx ].data_status_cd
    ENDIF
    ,ac.data_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    ac.data_status_prsnl_id = reqinfo->updt_id ,
    ac.beg_effective_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].beg_effective_dt_tm < 1 ) ) cnvtdatetime (
      curdate ,curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].beg_effective_dt_tm )
    ENDIF
    ,ac.beg_effective_tz =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].beg_effective_tz > 0 ) ) request->allergy[
     aidx ].allergy_comment[cidx ].beg_effective_tz
    ELSE user_tz
    ENDIF
    ,ac.end_effective_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].end_effective_dt_tm < 1 ) ) cnvtdatetime (
      "31-dec-2100 23:59:59" )
    ELSE cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].end_effective_dt_tm )
    ENDIF
    ,ac.active_ind = true ,
    ac.active_status_cd =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].active_status_cd < 1 ) ) active_cd
    ELSE request->allergy[aidx ].allergy_comment[cidx ].active_status_cd
    ENDIF
    ,ac.active_status_prsnl_id = reqinfo->updt_id ,
    ac.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    ac.updt_cnt = 0 ,
    ac.updt_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].updt_dt_tm < 1 ) ) cnvtdatetime (curdate ,
      curtime3 )
    ELSE cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].updt_dt_tm )
    ENDIF
    ,ac.updt_id =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].updt_id > 0 ) ) request->allergy[aidx ].
     allergy_comment[cidx ].updt_id
    ELSE reqinfo->updt_id
    ENDIF
    ,ac.updt_applctx = reqinfo->updt_applctx ,
    ac.updt_task = reqinfo->updt_task ,
    ac.cmb_comment_id = request->allergy[aidx ].allergy_comment[cidx ].cmb_comment_id ,
    ac.cmb_flag = request->allergy[aidx ].allergy_comment[cidx ].cmb_flag ,
    ac.cmb_prsnl_id = request->allergy[aidx ].allergy_comment[cidx ].cmb_prsnl_id ,
    ac.cmb_person_id = request->allergy[aidx ].allergy_comment[cidx ].cmb_person_id ,
    ac.cmb_dt_tm =
    IF ((request->allergy[aidx ].allergy_comment[cidx ].cmb_dt_tm > 0 ) ) cnvtdatetime (request->
      allergy[aidx ].allergy_comment[cidx ].cmb_dt_tm )
    ELSE null
    ENDIF
    ,ac.cmb_tz =
    IF ((((request->allergy[aidx ].allergy_comment[cidx ].cmb_dt_tm = null ) ) OR ((request->allergy[
    aidx ].allergy_comment[cidx ].cmb_dt_tm < 1 ) )) ) 0
    ELSEIF ((request->allergy[aidx ].allergy_comment[cidx ].cmb_tz > 0 ) ) request->allergy[aidx ].
     allergy_comment[cidx ].cmb_tz
    ELSE user_tz
    ENDIF
   PLAN (ac
    WHERE (0 = 0 ) )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  mark_allergy_review_hist (aidx )
  SET allergy_review_hist_nbr = 0.0
  SET ierrcode = 0
  CALL get_next_allergy_seq (aidx )
  IF ((ierrcode > 0 ) )
   SET failed = gen_nbr_error
   SET table_name = "HEALTH_STATUS_SEQ"
   GO TO exit_script
  ENDIF
  SET allergy_review_hist_nbr = new_id
  INSERT FROM (allergy_review_hist a )
   SET a.allergy_review_hist_id = allergy_review_hist_nbr ,
    a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ,
    a.reviewed_dt_tm = cnvtdatetime (request->allergy[aidx ].reviewed_dt_tm ) ,
    a.reviewed_tz =
    IF ((request->allergy[aidx ].reviewed_tz > 0 ) ) request->allergy[aidx ].reviewed_tz
    ELSE user_tz
    ENDIF
    ,a.reviewed_prsnl_id = request->allergy[aidx ].reviewed_prsnl_id ,
    a.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
    a.updt_id = reqinfo->updt_id ,
    a.updt_applctx = reqinfo->updt_applctx ,
    a.updt_task = reqinfo->updt_task ,
    a.updt_cnt = 0
   PLAN (a )
   WITH nocounter
  ;end insert
  SET ierrcode = error (serrmsg ,1 )
 END ;Subroutine
 SUBROUTINE  allergy_review_hist_needed (aidx )
  SET ierrcode = 0
  IF ((request->allergy[aidx ].allergy_instance_id > 0 ) )
   SELECT INTO "nl:"
    FROM (allergy a )
    PLAN (a
     WHERE (a.allergy_instance_id = request->allergy[aidx ].allergy_instance_id ) )
    DETAIL
     IF ((request->allergy[aidx ].reviewed_dt_tm > 0 )
     AND (request->allergy[aidx ].reviewed_dt_tm != cnvtdatetime ("1-jan-1800 00:00:00" ) )
     AND (((a.reviewed_dt_tm = null ) ) OR ((a.reviewed_dt_tm != null )
     AND (request->allergy[aidx ].reviewed_dt_tm != a.reviewed_dt_tm ) )) )
      allergy_review_hist_needed = true
     ENDIF
    WITH nocounter
   ;end select
   SET ierrcode = error (serrmsg ,1 )
  ELSEIF ((request->allergy[aidx ].reviewed_dt_tm > 0 )
  AND (request->allergy[aidx ].reviewed_dt_tm != cnvtdatetime ("1-jan-1800 00:00:00" ) ) )
   SET allergy_review_hist_needed = true
  ENDIF
 END ;Subroutine
 SUBROUTINE  add_allergy_ob (aidx )
  SET ob_i = (ob_i + 1 )
  SET req_out_add->message.triginfo.allergy_cnt = ob_i
  SET stat = alterlist (req_out_add->message.triginfo.allergy ,ob_i )
  SET req_out_add->message.triginfo.allergy[ob_i ].interface_action_cd = interface_action_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_instance_id = request->allergy[aidx ].
  allergy_instance_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_id = request->allergy[aidx ].allergy_id
  SET req_out_add->message.triginfo.allergy[ob_i ].person_id = request->allergy[aidx ].person_id
  SET req_out_add->message.triginfo.allergy[ob_i ].encntr_id = request->allergy[aidx ].encntr_id
  SET req_out_add->message.triginfo.allergy[ob_i ].substance_nom_id = request->allergy[aidx ].
  substance_nom_id
  SET req_out_add->message.triginfo.allergy[ob_i ].substance_ftdesc = request->allergy[aidx ].
  substance_ftdesc
  SET req_out_add->message.triginfo.allergy[ob_i ].substance_type_cd = request->allergy[aidx ].
  substance_type_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].reaction_class_cd = request->allergy[aidx ].
  reaction_class_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].severity_cd = request->allergy[aidx ].severity_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].source_of_info_cd = request->allergy[aidx ].
  source_of_info_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].source_of_info_ft = request->allergy[aidx ].
  source_of_info_ft
  SET req_out_add->message.triginfo.allergy[ob_i ].onset_dt_tm = cnvtdatetime (request->allergy[aidx
   ].onset_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].reaction_status_cd = request->allergy[aidx ].
  reaction_status_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].cancel_reason_cd = request->allergy[aidx ].
  cancel_reason_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].cancel_dt_tm = cnvtdatetime (request->allergy[
   aidx ].cancel_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].cancel_prsnl_id = request->allergy[aidx ].
  cancel_prsnl_id
  SET req_out_add->message.triginfo.allergy[ob_i ].active_ind = request->allergy[aidx ].active_ind
  SET req_out_add->message.triginfo.allergy[ob_i ].active_status_cd = request->allergy[aidx ].
  active_status_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].active_status_prsnl_id = reqinfo->updt_id
  SET req_out_add->message.triginfo.allergy[ob_i ].active_status_dt_tm = cnvtdatetime (curdate ,
   curtime3 )
  SET req_out_add->message.triginfo.allergy[ob_i ].beg_effective_dt_tm = cnvtdatetime (request->
   allergy[aidx ].beg_effective_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].end_effective_dt_tm = cnvtdatetime (request->
   allergy[aidx ].end_effective_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].contributor_system_cd = request->allergy[aidx ].
  contributor_system_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].data_status_cd = request->allergy[aidx ].
  data_status_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].data_status_dt_tm = cnvtdatetime (curdate ,
   curtime3 )
  SET req_out_add->message.triginfo.allergy[ob_i ].data_status_prsnl_id = reqinfo->updt_id
  SET req_out_add->message.triginfo.allergy[ob_i ].verified_status_flag = request->allergy[aidx ].
  verified_status_flag
  SET req_out_add->message.triginfo.allergy[ob_i ].rec_src_vocab_cd = request->allergy[aidx ].
  rec_src_vocab_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].rec_src_identifier = request->allergy[aidx ].
  rec_src_identifier
  SET req_out_add->message.triginfo.allergy[ob_i ].rec_src_string = request->allergy[aidx ].
  rec_src_string
  SET req_out_add->message.triginfo.allergy[ob_i ].reviewed_prsnl_id = request->allergy[aidx ].
  reviewed_prsnl_id
  SET req_out_add->message.triginfo.allergy[ob_i ].reviewed_dt_tm = cnvtdatetime (request->allergy[
   aidx ].reviewed_dt_tm )
  IF (validate (req_out_add->message.triginfo.allergy[ob_i ].sub_concept_cki ) )
   SET req_out_add->message.triginfo.allergy[ob_i ].sub_concept_cki = request->allergy[aidx ].
   sub_concept_cki
  ENDIF
 END ;Subroutine
 SUBROUTINE  add_reaction_ob (aidx ,ridx )
  IF ((reaction_active_ind > 0 ) )
   IF ((request->allergy[aidx ].reaction[ridx ].active_ind = reaction_active_ind ) )
    SET ob_n = (ob_n + 1 )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction_cnt = ob_n
    SET stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].reaction ,ob_n )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].interface_action_cd =
    interface_action_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_id = request->allergy[
    aidx ].reaction[ridx ].reaction_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_instance_id = request->
    allergy[aidx ].allergy_instance_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_id = request->allergy[
    aidx ].allergy_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_nom_id = request->
    allergy[aidx ].reaction[ridx ].reaction_nom_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_ftdesc = request->
    allergy[aidx ].reaction[ridx ].reaction_ftdesc
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_ind = request->allergy[
    aidx ].reaction[ridx ].active_ind
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_cd = request->
    allergy[aidx ].reaction[ridx ].active_status_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_dt_tm =
    cnvtdatetime (request->allergy[aidx ].reaction[ridx ].active_status_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_prsnl_id = request
    ->allergy[aidx ].reaction[ridx ].active_status_prsnl_id
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].beg_effective_dt_tm =
    cnvtdatetime (request->allergy[aidx ].reaction[ridx ].beg_effective_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].end_effective_dt_tm =
    cnvtdatetime (request->allergy[aidx ].reaction[ridx ].end_effective_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].contributor_system_cd = request
    ->allergy[aidx ].reaction[ridx ].contributor_system_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_cd = request->
    allergy[aidx ].reaction[ridx ].data_status_cd
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_dt_tm =
    cnvtdatetime (request->allergy[aidx ].reaction[ridx ].data_status_dt_tm )
    SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_prsnl_id = request->
    allergy[aidx ].reaction[ridx ].data_status_prsnl_id
   ENDIF
  ELSE
   SET ob_n = (ob_n + 1 )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction_cnt = ob_n
   SET stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].reaction ,ob_n )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].interface_action_cd =
   interface_action_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_id = request->allergy[
   aidx ].reaction[ridx ].reaction_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_instance_id = request->
   allergy[aidx ].allergy_instance_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].allergy_id = request->allergy[
   aidx ].allergy_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_nom_id = request->
   allergy[aidx ].reaction[ridx ].reaction_nom_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].reaction_ftdesc = request->
   allergy[aidx ].reaction[ridx ].reaction_ftdesc
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_ind = request->allergy[
   aidx ].reaction[ridx ].active_ind
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_cd = request->
   allergy[aidx ].reaction[ridx ].active_status_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_dt_tm =
   cnvtdatetime (request->allergy[aidx ].reaction[ridx ].active_status_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].active_status_prsnl_id = request
   ->allergy[aidx ].reaction[ridx ].active_status_prsnl_id
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].beg_effective_dt_tm =
   cnvtdatetime (request->allergy[aidx ].reaction[ridx ].beg_effective_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].end_effective_dt_tm =
   cnvtdatetime (request->allergy[aidx ].reaction[ridx ].end_effective_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].contributor_system_cd = request->
   allergy[aidx ].reaction[ridx ].contributor_system_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_cd = request->
   allergy[aidx ].reaction[ridx ].data_status_cd
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_dt_tm = cnvtdatetime
   (request->allergy[aidx ].reaction[ridx ].data_status_dt_tm )
   SET req_out_add->message.triginfo.allergy[ob_i ].reaction[ob_n ].data_status_prsnl_id = request->
   allergy[aidx ].reaction[ridx ].data_status_prsnl_id
  ENDIF
 END ;Subroutine
 SUBROUTINE  add_comment_ob (aidx ,cidx )
  SET ob_q = (ob_q + 1 )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment_cnt = ob_q
  SET stat = alterlist (req_out_add->message.triginfo.allergy[ob_i ].allergy_comment ,ob_q )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].interface_action_cd =
  interface_action_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_comment_id =
  request->allergy[aidx ].allergy_comment[cidx ].allergy_comment_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_instance_id =
  request->allergy[aidx ].allergy_instance_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_id = request->
  allergy[aidx ].allergy_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].comment_dt_tm =
  cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].comment_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].comment_prsnl_id = request
  ->allergy[aidx ].allergy_comment[cidx ].comment_prsnl_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].allergy_comment = request->
  allergy[aidx ].allergy_comment[cidx ].allergy_comment
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_ind = request->
  allergy[aidx ].allergy_comment[cidx ].active_ind
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_cd = request
  ->allergy[aidx ].allergy_comment[cidx ].active_status_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_dt_tm =
  cnvtdatetime (curdate ,curtime3 )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].active_status_prsnl_id =
  reqinfo->updt_id
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].beg_effective_dt_tm =
  cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].beg_effective_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].end_effective_dt_tm =
  cnvtdatetime (request->allergy[aidx ].allergy_comment[cidx ].end_effective_dt_tm )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].contributor_system_cd =
  request->allergy[aidx ].allergy_comment[cidx ].contributor_system_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_cd = request->
  allergy[aidx ].allergy_comment[cidx ].data_status_cd
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_dt_tm =
  cnvtdatetime (curdate ,curtime3 )
  SET req_out_add->message.triginfo.allergy[ob_i ].allergy_comment[ob_q ].data_status_prsnl_id =
  reqinfo->updt_id
 END ;Subroutine
#exit_script
 IF ((failed != false ) )
  IF ((pco_combine = false ) )
   ROLLBACK
  ENDIF
  SET reqinfo->commit_ind = false
  SET reply->status_data.status = "F"
  SET reply->status_data.subeventstatus[1 ].operationstatus = "F"
  SET reply->status_data.subeventstatus[1 ].targetobjectvalue = serrmsg
  SET reply->status_data.subeventstatus[1 ].targetobjectname = table_name
  IF ((failed = select_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
  ELSEIF ((failed = insert_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "INSERT"
  ELSEIF ((failed = gen_nbr_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "GEN_SEQ_NBR"
  ELSEIF ((failed = update_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "UPDATE"
  ELSEIF ((failed = input_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "VALIDATE"
  ELSEIF ((failed = lock_error ) )
   SET reply->status_data.subeventstatus[1 ].operationname = "LOCK"
  ELSE
   SET reply->status_data.subeventstatus[1 ].operationname = "UNKNOWN"
  ENDIF
 ELSE
  SET reqinfo->commit_ind = true
  SET reply->status_data.status = "S"
 ENDIF
 SET script_version = "046 05/29/17 BM020518"
END GO
1)

191106:083743 CCUMMIN4_DVD4               Cost 0.00 Cpu 0.00 Ela 0.01 Dio   0 O0M0R0 P1R0
