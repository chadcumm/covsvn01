/*****************************************************************************
      *                                                                      *
      *  Copyright Notice:  (c) 1983 Laboratory Information Systems &        *
      *                              Technology, Inc.                        *
      *       Revision      (c) 2008 Cerner Corporation                      *
      *                                                                      *
      *  Cerner (R) Proprietary Rights Notice:  All rights reserved.         *
      *  This material contains the valuable properties and trade secrets of *
      *  Cerner Corporation of Kansas City, Missouri, United States of       *
      *  America (Cerner), embodying substantial creative efforts and        *
      *  confidential information, ideas and expressions, no part of which   *
      *  may be reproduced or transmitted in any form or by any means, or    *
      *  retained in any storage or retrieval system without the express     *
      *  written permission of Cerner.                                       *
      *                                                                      *
      *  Cerner is a registered mark of Cerner Corporation.                  *
      *                                                                      *
      ***********************************************************************/
 
/*****************************************************************************
 
******************************************************************************/
/***********************************************************************************************************************
*                           GENERATED MODIFICATION CONTROL LOG
************************************************************************************************************************
*                                                                                                                      *
* Feature	Mod	Date		Engineer	Comment                                                                        *
* -------	---	----------	----------	-------------------------------------------------------------------------------*
			000	09/14/2018	ARG			Initial release (Alix Govatsos)
			001	10/24/2018	TAB			Updated list of radiologists.
			002	10/29/2018	TAB			Adjusted start date prompt.
			003	01/04/2019	TAB			Updated list of radiologists.
			004	01/16/2019	TAB			Updated list of radiologists.
			005	01/17/2019	TAB			Removed accession exclusion of CA.
			006	02/01/2019	TAB			Updated list of radiologists.
			007	06/06/2019	TAB			Updated list of radiologists.
			008	06/14/2019	TAB			Updated list of radiologists.
			009	08/02/2019	TAB			Updated list of radiologists.
			010	08/26/2019	TAB			Updated list of radiologists.
			011	09/23/2019	TAB			Corrected list of radiologists.
			012	09/24/2019	TAB			Moved list of radiologists to include file.
 
************************* END OF ALL MODCONTROL BLOCKS *****************************************************************/
 
 
DROP PROGRAM 	cov_aur_rad_dailyactivity:dba GO
CREATE PROGRAM 	cov_aur_rad_dailyactivity:dba
 
prompt
	"Output to File/Printer/MINE" = "MINE"           ;* Enter or select the printer or file name to send this report to.
	, "Start Date:" = "SYSDATE"
	, "End Date:" = "SYSDATE"
	, "Select a Facility:" = VALUE(0.0           )
 
with pOUTDEV, pSTART_DATE, pEND_DATE, pFACILITY
 
/***************************************************************************************
* Prompt Evaluation																	   *
***************************************************************************************/
 
;ops setup
if (VALIDATE(request->batch_selection) = 1)
	SET iOpsInd = 1
 	SET START_DATE = DATETIMEFIND(CNVTDATETIME(CURDATE-3, 000000),'D','B','B')
	SET END_DATE   = DATETIMEFIND(CNVTDATETIME(CURDATE-3, 235959),'D','B','E')
else
 
	SET START_DATE  = CNVTDATETIME($pSTART_DATE)
	SET END_DATE    = CNVTDATETIME($pEND_DATE)
 
endif
 
CALL ECHO(BUILD('bdate :', START_DATE))
CALL ECHO(BUILD('edate :', END_DATE))
 
/***************************************************************************************
* Variable Declarations																   *
***************************************************************************************/
record output (
	1 temp = vc
	1 locator = vc
	1 filename = vc
	1 filenameD = vc
	1 directory = vc
	1 astream = vc
	1 temp_demo = vc
	1 temp_dict = vc
	1 dt_range = vc
)
 
set output->directory = logical("cer_temp")
set output->filename  = concat('aurdaily',format(curdate, "yyyymmdd;;d"), '_cer',  '.txt')
set output->astream = "/cerner/w_custom/p0665_cust/to_client_site/ClinicalAncillary/Radiology/Extracts/AUR/"
set output->temp_demo = concat('cer_temp:aurdaily' ,  format(curdate, "yyyymmdd;;d"),'_cer', '.txt')
 
call echorecord (output)
 
 RECORD rDATA(
1 ENC[*]						;one occurrence per exam per encouonter per patient
2	ENCNTR_ID	= 	f8
2	PERSON_ID	= 	f8
2	FIRST_NAME	= 	C18
2	LAST_NAME	= 	C25
2	M_name 		= 	C18
2	NAME		= 	vc ;
2	ADDRESS		= 	C30	 ;
2	ADDRESS2	= 	C30	 ;
2	CITY	 	= 	vc	 ;
2	STATE	 	= 	vc	 ;
2	ZIPCODE	 	= 	C9	 ;
2	PHONE_HOME	= 	C10	 ;
2	PHONE_BIZ	= 	C10	 ;
2	BIRTH_DT_TM	= 	dq8
2	deceased_dt_tm = dq8
2	student_ind	= 	vc
2	emp_stat_ind	= vc
2	DOB	 		= 	c6
2	dob_year	= c4	;	format(p.birth_dt_tm ,"yyyy;;d")
2	dob_month	= c2  	;	format(p.birth_dt_tm ,"mm;;d")
2	dob_day		= c2	;	format(p.birth_dt_tm ,"dd;;d")
2	SEX	 		= 	VC
2	SEX_ALIAS	= 	C1
2	FIN	 = 	C20
2	emp_status	= vc
2 	emp_name 	= C33
2 	EMP_CITY 	= vc
2 	EMP_ADDR1 	= C30
2 	EMP_ADDR2 	= C30
2 	EMP_ZIP		= C9
2 	EMP_ST 		= vc
2	SSN	 		= 	C9
2	FAMILY_NAME	= 	vc
2	MARITAL	 = 	VC
2   ethnicity = vc
2	MARITAL_ALIAS	 = 	C1
2	admit_dt_tm	 = 	dq8
2	admit_date	 = 	c6
2	disch_dt_tm	 = 	dq8
2	disch_date	 = 	c6
2	pat_type_ioe = 	c1
2	MRN	 		= 	C20
;daily activity
2 	ORDERING_ID		= VC
2 	ord_dr_name_f	= vc
2 	ord_dr_name_l  	= vc
2 	ord_dr_name 	= vc
2 	order_id 		= f8
2 	order_mnem		= vc
2 	accession		= vc
2 	accessiond  	= vc
2   exam_status		= vc
2	cptcd 			= vc
2   cptcdmod		= vc
2 	check_in_dt_tm	= dq8
2 	order_mnem 		= vc
2 	RAD_PROC_TYPE 	= vc
2 	order_cat_cd  	= vc
2 	rad_report_id 	= f8
;
 
 
 
2 	ATTENDING_ID	=	 VC
2   REFERRING_ID	=	 VC
2   referring_name	=    Vc
2   referring_upin	=    Vc
2 expired			=	 vc
2 expired_alias		= 	 vc
2 FACILITY_CD		=	 F8
2 FACILITYCD		=	 vc
2 FACILITY			=	 VC
2 site				= vc
2 NU_CD				=	 F8
2 NU 				=	 VC
2 acc_dt_tm			= 	dq8
2 acc_loc			=   Vc
2 acc_st 			= vc
2 acc_type			= 	vc
2 acc_ore			= 	vc
2 pat_type			=	vc
2 pat_type_alias	=	c3
2 pat_type_class	=	vc
1 total = i4
1 subt_demo = i4
1 subt_dict = i4
)
 
set ins_seq_count = 0
 
;CREATE RECORD STRUCTURE
FREE RECORD FREC
RECORD FREC(
    1 FILE_DESC = I4
    1 FILE_NAME = VC
    1 FILE_BUF = VC
    1 FILE_DIR = I4
    1 FILE_OFFSET = I4
)
 
 
set ins_seq_count = 0
 
;CREATE RECORD STRUCTURE
FREE RECORD FREC
RECORD FREC(
    1 FILE_DESC = I4
    1 FILE_NAME = VC
    1 FILE_BUF = VC
    1 FILE_DIR = I4
    1 FILE_OFFSET = I4
)
 
;***********************************************************************************************************
;Non constants
SET CNT = 0 ;Already defined in include file
 
DECLARE OUTPUT_FILENAME = VC
DECLARE OUTPUT_STRING = VC WITH NOCONSTANT(" "), PUBLIC
SET CARRIAGE_RETURN  = CHAR(13)
declare num = i4 with noconstant(0), protect
declare cntr = i4 with noconstant(0), protect
declare numx = i4 with noconstant(0), protect
declare cntx = i4 with noconstant(0), protect
declare pos = i4 with noconstant(0), protect
declare idx = i4 with noconstant(0), protect
set pcvar = concat("|",char(9))
 
;Clinical_event Status
DECLARE INERROR_ROW_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!8419")) ;Row created in error
DECLARE INERROR_MUT_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!20644")) ;In Error - Non-mutable
DECLARE INERROR_DISP_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!20645")) ;In Error - do not display
DECLARE INERROR_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!7982")) ;In Error
declare auth_ver_cd		= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!2628")) ;AUTH
DECLARE TRANSCRIBED_CD  = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY", 8, "TRANSCRIBED")) ;TRANSCRIBED
declare altered_cd		= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!16901"));	MODIFIED
declare modified_cd		= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!2636"));	MODIFIED
 
;event actions
declare	MODIFY_21_cd	 	= 	 f8 with Constant(uar_get_code_by("MEANING",21, "MODIFY"	)),protect
declare	PERFORM_21_cd	 	= 	 f8 with Constant(uar_get_code_by("MEANING",21, "PERFORM"	)),protect
declare	REVIEW_21_cd	 	= 	 f8 with Constant(uar_get_code_by("MEANING",21, "REVIEW"	)),protect
declare	SIGN_21_cd	 		= 	 f8 with Constant(uar_get_code_by("MEANING",21, "SIGN"	)),protect
declare	TRANSCRIBE_21_cd	= 	 f8 with Constant(uar_get_code_by("MEANING",21, "TRANSCRIBE"	)),protect
declare	VERIFY_21_cd	 	= 	 f8 with Constant(uar_get_code_by("MEANING",21, "VERIFY"	)),protect
 
declare	ADDENDED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "ADDENDED")),protect
declare	APPROVED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "APPROVED")),protect
declare	CORRECTED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "CORRECTED")),protect
declare	COSIGNED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "COSIGNED")),protect
declare	DICTATED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "DICTATED")),protect
declare	MODIFIED_28880_cd	 = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "MODIFIED")),protect
declare	TRANSCRIBED_28880_cd = 	 f8 with Constant(uar_get_code_by("MEANING",28880, "TRANSCRIBED")),protect
 
DECLARE OTHERETHNICITY_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",356,"OTHERETHNICITY"))
DECLARE OTHERRACE_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",356,"OTHERRACE"))
DECLARE HISPANIC_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",27,"HISPANIC"))
DECLARE NOTHISPANIC_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",27,"NOTHISPANIC"))
 
declare defguar_cd 			= f8 with Constant(uar_get_code_by("MEANING", 351, "DEFGUAR")), protect
declare  nok_cd 			= f8 with Constant(uar_get_code_by("MEANING", 351, "NOK")), protect
 
;dept status 14281
declare	COMPLETED_14281_CD 		= f8 with Constant(uar_get_code_by("MEANING",14281, "COMPLETED")),protect
declare	CVSIGNED_14281_CD  		= f8 with Constant(uar_get_code_by("MEANING",14281, "CVSIGNED")),protect
declare	CVVERIFIED_14281_CD 	= f8 with Constant(uar_get_code_by("MEANING",14281, "CVVERIFIED")),protect
declare	RADCOMPLETED_14281_CD 	= f8 with Constant(uar_get_code_by("MEANING",14281, "RADCOMPLETED")),protect
 
 
;Order Status
DECLARE COMPLETED_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!3100")) ;COMPLETED
DECLARE CANCELED_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!3099")) ;Canceled
DECLARE DELETED_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!44311")) ;Void W/o Results
DECLARE VOIDWRESULT_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!2488992")) ;Void W Results
DECLARE TRANSFER_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!406488")) ;Transfer/Cancel
 
 ; patient events
declare STARTINPAT_CD 	= f8 with Constant(uar_get_code_by("MEANING",4002773,"STARTINPAT")),protect
declare STARTOBS_CD 	= f8 with Constant(uar_get_code_by("MEANING",4002773,"STARTOBS")),protect
declare OUTPATINBED_CD 	= f8 with Constant(uar_get_code_by("MEANING",4002773,"OUTPATINBED")),protect
declare DISCHRG_CD		= f8 with Constant(uar_get_code_by("MEANING",4002773,"DISCHRG")),protect
 
 
;EPR reltn
DECLARE ATTENDDOC_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!4024"))
DECLARE REFERDOC_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!4597"))
DECLARE PROVIDER_GROUP_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!111133"))
 
;PPR reltn
declare PCP_CD 		= f8 with Constant(uar_get_code_by("MEANING",331,"PCP")),protect
declare FAMILY_CD	= f8 with Constant(uar_get_code_by("MEANING",331,"FAMILYDOC")),protect
 
;NPI ALIAS
DECLARE NPI_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!2160654021"))
 
 ;Problem/DX vocabulary (code set 400)
DECLARE ICD10_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!56781"))
DECLARE FINAL_DX_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"FINAL"))
DECLARE PRINCIPAL_DX_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"PRINCIPAL"))
DECLARE VISITREASON_DX_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"REASONFORVISIT"))
DECLARE ADMIT_DX_CD         = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"ADMITTING"))
DECLARE DISCH_DX_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"DISCHARGE"))
DECLARE WORKING_DX_CD		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",17,"WORKING"))
DECLARE ICD10PCS_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!4101496118"))
DECLARE ICD10CM_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!4101498946"))
 
DECLARE HCPCS_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!42457"))
declare pned_cd 			= f8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!723952686"))
 DECLARE CPT4_CD			= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",14002,"CPT"))
 DECLARE CPT4_MOD_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",14002,"CPTMODIFIER"))
 
 
;Procedure rank
DECLARE CM_ICD9PROC_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!3474"))
 
;Address type
DECLARE HOME_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!4018"))
DECLARE TEMPORARY_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!8014"))
DECLARE ALTERNATE_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY_CKI("CKI.CODEVALUE!9559"))
DECLARE USA_CD	 	 = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",15,"US"))
 
;Financial class
DECLARE MEDICAID_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",354,"MEDICAID"))
DECLARE WORKERSCOMP_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",354,"WORKERSCOMP"))
DECLARE AUTO_CD 			= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",354,"AUTO"))
DECLARE FREECARE_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",354,"FREECARE"))
DECLARE SELFPAY_CD 			= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",354,"SELFPAY"))
 
;Encounter types
DECLARE OUTPATIENT_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"OUTPATIENT"))
DECLARE INPATIENT_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"INPATIENT"))
DECLARE EMERGENCY_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"EMERGENCY"))
DECLARE OBSERVATION_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",71,"OBSERVATION"))
DECLARE INPATIENT_CLASS_CD = F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",69,"INPATIENT"))
 
;Radiology order exam status
declare rad_canceled_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"CANCELED"))
declare rad_completed_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"COMPLETED"))
declare rad_inprocess_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"INPROCESS"))
declare rad_onhold_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"ONHOLD"))
declare rad_ordered_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"ORDERED"))
declare rad_removed_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"REMOVED"))
declare rad_replaced_CD 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"REPLACED"))
declare rad_started_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY" ,14192 ,"STARTED"))
 
 
;Alias
DECLARE MRN_CD	 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",4,"MRN"))
declare cmrn_cd 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",4,"CMRN"))
DECLARE MRN_POOL_CD	= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",263,"MRN"))
DECLARE SSN_CD	 	= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",4,"SSN"))
DECLARE FIN_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("MEANING",319,"FIN NBR"))
 
 
if(substring(1,1,reflect(parameter(parameter2($pFACILITY),0))) = "L") ;multiple dispositions were selected
	set FAC_VAR = "in"
	elseif(parameter(parameter2($pFACILITY),1) = 0.0) ;all (any) dispositions were selected
		set FAC_VAR = "!="
	else ;a single value was selected
		set FAC_VAR = "="
endif
 
 
;contributor source
DECLARE COV_CD 		= F8 WITH CONSTANT(UAR_GET_CODE_BY("DISPLAYKEY",73,"COVENANT"))
declare iso_cd 		= f8 with constant(uar_Get_code_by("DISPLAYKEY", 73, "ISO"))
 
;HEALTH PLAN POOL
declare hplan_cd 	= f8 with constant(uar_Get_code_by("DISPLAYKEY", 263, "HEALTHPLAN"))
 
;doc numbers
declare stardoc_cd	= f8 with constant(uar_Get_code_by("DISPLAYKEY", 263, "STARDOCTORNUMBER"))
declare statedoc_cd	= f8 with constant(uar_Get_code_by("DISPLAYKEY", 263, "STATELICENSENUMBER"))


%i cust_script:aur_radiologists.inc 
 
 
/***************************************************************************************
* SUBROUTINE
***************************************************************************************/
DECLARE GET_CODE_VALUE_ALIAS(_CODE_VALUE = F8) = VC
 
SUBROUTINE GET_CODE_VALUE_ALIAS(_CODE_VALUE)
	DECLARE _CV_ALIAS = VC
 	IF (_CODE_VALUE > 0.0)
		SELECT into "nl:"
		CVA.ALIAS
		FROM CODE_VALUE_OUTBOUND CVA
		WHERE CVA.CODE_VALUE = _CODE_VALUE
			AND CVA.CONTRIBUTOR_SOURCE_CD = COV_CD
		DETAIL
			_CV_ALIAS = CVA.ALIAS
		WITH nocounter
		IF (TRIM(_CV_ALIAS) > "")
			RETURN(_CV_ALIAS)
		ELSE
			RETURN("X")
		ENDIF
 
	ELSE
		RETURN("")
	ENDIF
END ;SUBROUTINE
 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!***ENCOUNTER & PATIENT DATA
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SELECT distinct INTO "NL:"
;SELECT DISTINCT INTO VALUE ($POUTDEV)
	  encntr_id 			= e.encntr_id
	, person_id 			= e.person_id
	, name_first 			= p.name_first
	, name_last 			= p.name_last
	, marital 				= cnvtstring(p.marital_type_cd)
	, name_mi 				= cnvtupper(substring(1,1,p.name_middle))
	, dob_year  			= format(p.birth_dt_tm ,"yyyy;;d")
	, dob_month  			= format(p.birth_dt_tm ,"mm;;d")
	, dob_day  				= format(p.birth_dt_tm ,"dd;;d")
	, fin  					= ea.alias
	, cmrn  				= cnvtalias(pa3.alias, pa3.alias_pool_cd)
	, ssn  			 		= pa2.alias
	, sex  			 		= cnvtstring( p.sex_cd )
	, expired  				= cnvtstring(p.deceased_cd)
	, pat_type  			= cnvtstring(e.encntr_type_cd)
	, PAT_TYPE_CLASS  		= CNVTSTRING(E.encntr_type_class_cD)
	, fac  			 		= cnvtstring(e.loc_facility_cd)
	, fac_disp  			= uar_get_code_display(e.loc_facility_cd)
	, nu_disp  				= uar_get_code_display(e.loc_nurse_unit_cd)
	, reg_dt_tm  			= e.reg_dt_tm "mm/dd/yyyy hh:mm;;d"
	, dsch_dt_tm  			= e.disch_dt_tm "mm/dd/yyyy hh:mm;;d"
	, o.accession
	, accession_ce  		= cnvtacc (ce.accession_nbr)
	, rad_order  			= uar_get_code_display (o.catalog_cd)
	, order_dt_tm  			= o.start_dt_tm "mm/dd/yyyy hh:mm;;d"
	, complete_dt_tm  		= o.complete_dt_tm "mm/dd/yyyy hh:mm;;d"
	, order_id  			= o.order_id
	, ord_type  			= uar_get_code_display(ord.catalog_type_cd )
	, CE.parent_event_id
	, ce.event_id
 	, ORD_PHYS_NAME_FIRST 	=  pr.name_first
	, ORD_PHYS_NAME_LAST 	=  pr.name_last
	, ORD_PHYS_ALIAS 		=  pa.alias
	, ord_phys_ap 			=  uar_get_code_display(PA.alias_pool_cd)
	, exam_status			=  uar_get_code_display(o.exam_status_cd)
 
 
FROM
	OMF_RADMGMT_ORDER_ST   OROS
	,ENCOUNTER   E
	, (left JOIN person_alias pa2 ON (e.person_id = pa2.person_id
 			AND pa2.person_alias_type_cd = SSN_CD
			AND pa2.ACTIVE_IND = 1
			AND pa2.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE,CURTIME3)))
	, person   p
	, encntr_alias   ea
	, person_alias   pa3
	, orders   ord
	, PRSNL   PR
	, PRSNL_ALIAS   PA
	, clinical_event   ce
	, order_radiology   o
	, OMF_RADREPORT_ST ORRS
	, ce_blob cb
 
 
plan oros
where operator(oros.loc_at_exam_cmplt_cd,  FAC_VAR, $pFACILITY)
 
join e
where e.encntr_id = oros.encntr_id
 
JOIN  ea where ea.encntr_id = e.encntr_id
 			AND EA.ENCNTR_ALIAS_TYPE_CD = FIN_CD
			AND EA.ACTIVE_IND = 1
			AND EA.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE,CURTIME3)
 
join 	p where  p.person_id = e.person_id
and  	p.active_ind = 1
; eliminate the zzz patients
and  	p.name_last_key !="Z*TEST*"
 
 
 
JOIN   pa3 where e.person_id = pa3.person_id
 			AND pa3.person_alias_type_cd = CMRN_CD;
			AND pa3.ACTIVE_IND = 1
			AND pa3.END_EFFECTIVE_DT_TM >= CNVTDATETIME(CURDATE,CURTIME3)
 
join  	o
where 	o.encntr_id = e.encntr_id
;and  	o.exam_status_cd in (rad_completed_CD) ;confirm
and 	o.accession = oros.accession_nbr
 
join ord
where ord.order_id = o.order_id
and ord.order_status_cd = COMPLETED_CD
 
join 	ce  ; do NOT use ce.encntr_id as some report records dont store the encntr_id issue for ambulatory discovered 8/23
where   ce.person_id = o.person_id
and 	ce.order_id = o.order_id
and		ce.valid_from_dt_tm >= cnvtdatetime(start_date)
and 	ce.valid_until_dt_tm > cnvtdatetime(curdate, curtime3)
and 	ce.event_end_dt_tm >= cnvtdatetime(start_date )
and 	ce.result_status_cd in ( auth_ver_cd, altered_cd, modified_cd)
and 	not substring(6,2,ce.accession_nbr) in ('NP', 'SC') ;005
 
join cb
where cb.event_id = ce.event_id
 
join pr
where pr.person_id  = o.order_physician_id
 
join pa
where 	pa.person_id = pr.person_id
and 	PA.alias_pool_cd in (STARDOC_CD, statedoc_cd)
and 	(pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3) ; check on this type
or 		pa.end_effective_dt_tm between cnvtdatetime(start_date ) and cnvtdatetime(end_date))
 
 
join 	orrs
where 	((o.parent_order_id > 0.00 AND orrs.order_id = o.parent_order_id)
OR 		orrs.order_id = o.order_id)
and 	orrs.order_ID != 0.00
AND 	orrs.final_dt_tm  between cnvtdatetime(start_date ) and cnvtdatetime(end_date)
 
; AUR docs from include file
  and expand(num, 1, radiologists->cnt, orrs.radiologist_id, radiologists->list[num].person_id) ;012
 
join pa2
 
ORDER BY
  encntr_id
 ,fin
 ,oros.order_id
 ,oros.final_dt_tm
 ,accession_ce
 ,rad_order
 ,order_id
 ,ce.event_id
 
HEAD REPORT
CNT = 0
 
HEAD CE.EVENT_ID  ; need to use this now that the doc license id either star or state ID
;detail
CNT = CNT + 1
STAT = ALTERLIST (rData->ENC, cnt)
 
rDATA->ENC[cnt].ENCNTR_ID 	= e.encntr_id
rDATA->ENC[cnt].PERSON_ID 	= e.person_id
rDATA->ENC[cnt].NAME 		= ;concat(trim(p.name_first,3), char(32), trim(p.name_middle,3), char(32), trim(p.name_last,3))
SUBSTRING(1,25,
	concat(TRIM(P.name_last_key,3),char(44), CHAR(32),TRIM(P.name_first_key,3),CHAR(32),substring(1,1,trim(p.name_middle_key,3))))
 
rDATA->ENC[cnt].FIRST_NAME = p.name_first
rDATA->ENC[cnt].LAST_NAME 	= p.name_last ; concat("TEST",cnvtstring(cnt)) ;for testing only - mask the namep.name_last
rDATA->ENC[cnt].M_NAME 		= name_mi
rDATA->ENC[cnt].marital 	= marital
rDATA->ENC[cnt].MRN 		= cmrn
rDATA->ENC[cnt].FIN 		= fin
rDATA->ENC[cnt].DOB 		= format(p.birth_dt_tm, "MMDDYY;;d")
rDATA->ENC[cnt].deceased_dt_tm = p.deceased_dt_tm
rDATA->ENC[cnt].dob_year  	= dob_year
rDATA->ENC[cnt].dob_month  	= dob_month
rDATA->ENC[cnt].dob_day  	= dob_day
rDATA->ENC[cnt].birth_dt_tm = p.birth_dt_tm
rDATA->ENC[cnt].SEX 		= sex
rDATA->ENC[cnt].disch_dt_tm = e.disch_dt_tm
rDATA->ENC[cnt].admit_dt_tm = e.reg_dt_tm
rDATA->ENC[cnt].FACILITY_CD = E.loc_facility_cd
rDATA->ENC[cnt].FACILITY 	= cnvtstring(e.loc_facility_cd)
rDATA->ENC[cnt].NU_CD 		= E.loc_nurse_unit_cd
rDATA->ENC[cnt].NU 			= UAR_GET_CODE_DISPLAY(E.loc_nurse_unit_cd)
rDATA->ENC[cnt].PAT_TYPE  	=  cnvtstring(e.encntr_type_cd)
rDATA->ENC[cnt].PAT_TYPE_CLASS	= PAT_TYPE_CLASS
rDATA->ENC[cnt].expired 	= expired
rDATA->ENC[cnt].ethnicity = cnvtstring( p.ethnic_grp_cd)
rDATA->ENC[CNT].SSN	= format( trim(PA2.ALIAS,3),"#########;p0")
;daily activity
rDATA->ENC[cnt].ORDERING_ID = ORD_PHYS_ALIAS
rDATA->ENC[cnt].order_id 	= o.order_id
rDATA->ENC[cnt].accession 	=  ce.accession_nbr
rDATA->ENC[cnt].accessiond 	= cnvtacc(ce.accession_nbr)
rDATA->ENC[cnt].ord_dr_name_f = ORD_PHYS_NAME_FIRST
rDATA->ENC[cnt].ord_dr_name_l = ORD_PHYS_NAME_LAST
rDATA->ENC[cnt].ord_dr_name = pr.name_full_formatted
rDATA->ENC[cnt].order_mnem 	= ord.order_mnemonic
rDATA->ENC[cnt].exam_status	 = exam_status
 
 
 
 
;ssn formatting
; rDATA->ENC[cnt].SSN = ssn
 rDATA->ENC[CNT].SSN					= format( trim(PA2.ALIAS,3),"###-##-####;p0")
;	IF (cnvtint(rDATA->ENC[CNT].SSN) <=0  )
;		rDATA->ENC[CNT].SSN	 = ""
 
;	ENDIF
 
  foot report
 rDATA->total = cnt
 
WITH NOCOUNTER , memsort ;  , format, separator = " ", check
 
 
;-----------------------------------
; radiologist alias
 
SELECT DISTINCT INTO "NL:"
;SELECT DISTINCT INTO value ($poutdev)
	  fin = rdata->ENC[d.seq].fin
	, exam_st_dt = oros.Start_dt_tm
	, exam_end_dt = oros.exam_complete_dt_tm
	, RAD_PROC_TYPE = UAR_GET_CODE_DISPLAY(O.catalog_type_cd)
	, doc_name = pr.name_full_formatted
	, alias = trim(pa.alias,3)
	, rrp.ACTION_DT_TM
	, RRD_TASK_ASSAY_DISP = UAR_GET_CODE_DISPLAY(RRD.TASK_ASSAY_CD)
 
FROM
	(dummyt   d  with seq = value (size(rDATA->ENC,5)))
	, order_Radiology   ord
	, orders   o
	, rad_report   rr
	, rad_report_prsnl   rrp
	, rad_report_detail   rrd
	, OMF_RADMGMT_ORDER_ST   OROS
	, prsnl_alias   pa
	, prsnl   pr
 
Plan d
join ord where ord.order_id = rDATA->ENC[d.seq].order_id
join o where o.order_id = ord.order_id
join oros where oros.order_id = ord.order_id
join rr where (rr.order_id = ord.parent_order_id)
join rrd where (rrd.rad_report_id = rr.rad_report_id)
join rrp where (rrp.rad_report_id = rr.rad_report_id
and rrp.prsnl_relation_flag = 2)
join pa
where 	pa.person_id = rrp.report_prsnl_id
and 	PA.alias_pool_cd = STARDOC_CD
and 	pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3) ; check on this type
join pr
where pr.person_id = pa.person_id
 
order by d.seq, ord.order_id, rr.rad_report_id
 
detail
rDATA->ENC[d.seq].check_in_dt_tm   	= exam_st_dt
rDATA->ENC[d.seq].order_mnem 		= o.order_mnemonic
rDATA->ENC[d.seq].RAD_PROC_TYPE 	= RAD_PROC_TYPE
rDATA->ENC[d.seq].order_cat_cd  	= cnvtstring(o.catalog_cd)
 
WITH NOCOUNTER ;,  format, separator = " ", check
 ; ------------------------------------------------------------------------
; get cpt
;SELECT   INTO VALUE ($poutdev)
SELECT   INTO "nl:"
FROM
	(dummyt   d  with seq = value (size(rDATA->ENC,5)))
	, charge_event   ce
	, charge   c
	, charge_mod   cm
	, orders   ord
plan d
join ce where ce.accession =  rData->ENC[d.seq].accession
;and ce.ext_i_event_cont_cd =        3445.00  7/31 issue reported where the cmg clinics use a different code
join c where c.charge_event_id = ce.charge_event_id
join cm where cm.charge_item_id = c.charge_item_id
and cm.field1_id in ( cpt4_cd, cpt4_mod_cd )
				  AND NOT CM.FIELD6 = NULL
  				  AND CM.ACTIVE_IND = 1
  				  and cm.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
join ord
where ord.order_id = ce.order_id
 
ORDER BY
	 d.seq
	, ce.order_id
	, ce.charge_event_id
	, cm.charge_item_id
	, cm.charge_mod_id
	, cm.field1_id
	, cm.field6
 
detail
 
if (cm.field1_id = cpt4_cd)
	rDATA->ENC[d.seq].cptcd = trim(cm.field6,3)
elseif(cm.field1_id = cpt4_mod_cd)
	rDATA->ENC[d.seq].cptcdmod  = trim(cm.field6,3)
endif
 
WITH NOCOUNTER ; , format, separator = " ", check
 
 
 
 
 
 
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
; outbound aliasing
FOR (I = 1 TO SIZE(rDATA->ENC,5))
	set rDATA->ENC[I].PAT_TYPE	= concat(
										trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].pat_type)),3),
										trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].facility)),3))
	SET rDATA->ENC[I].SEX_alias			=  trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].SEX)),3)
	set rDATA->ENC[I].pat_type_ioe	    =  trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].PAT_TYPE_CLASS)),3)
	set rDATA->ENC[I].expired_alias 	=  trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].expired)),3)
	set rDATA->ENC[I].marital_alias 	=  trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].marital)),3)
 	set rDATA->ENC[I].FACILITY			=  trim(GET_CODE_VALUE_ALIAS(CNVTREAL(rDATA->ENC[I].FACILITY)),3)
 
 endfor ;end call to the aliasing subroutine
 
 
; CALL ECHORECORD(rData)
 
;demographic output
;SELECT distinct INTO VALUE ($POUTDEV)
SELECT distinct INTO VALUE (output->temp_demo)
;select distinct  into "NL:"
 
 001_FAC  	 	= concat (substring(1,1,trim(rDATA->ENC[d.seq].FACILITY,3)),substring(1,20,trim(rDATA->ENC[d.seq].fin,3)))
,002_NAME_full  = evaluate2 (if (trim(rDATA->ENC[d.seq].NAME,3) > char(32))
	trim(rDATA->ENC[d.seq].name,3) else "|" endif)
,003_PMRN 		= evaluate2 (if (trim(rDATA->ENC[d.seq].mrn ,3) > char(32))
	trim(rDATA->ENC[d.seq].mrn,3) else "|" endif)
,004_IOE  		= evaluate2 (if (trim(rDATA->ENC[d.seq].pat_type_ioe,3) > char(32))
	trim(rDATA->ENC[d.seq].pat_type_ioe,3) else "|" endif)
,005_exam_name 	= evaluate2 (if (trim(rDATA->ENC[d.seq].order_mnem ,3)	> char(32))
	trim(rDATA->ENC[d.seq].order_mnem ,3)else "|" endif)
,006_ck_in_nbr 	= evaluate2 (if (trim(rDATA->ENC[d.seq].accessiond ,3)	> char(32))
	trim(rDATA->ENC[d.seq].accessiond ,3)else "|" endif)
,007_exam_stat 	= evaluate2 (if (trim(rDATA->ENC[d.seq].exam_status ,3)	> char(32))
	trim(rDATA->ENC[d.seq].exam_status ,3)else "|" endif)
,008_ord_phys 	= evaluate2 (if (trim(rDATA->ENC[d.seq].ord_dr_name ,3)	> char(32))
	trim(rDATA->ENC[d.seq].ord_dr_name ,3)else "|" endif)
,009_pat_type 	= evaluate2 (if (trim(rDATA->ENC[d.seq].pat_type ,3)	> char(32))
	trim(rDATA->ENC[d.seq].pat_type ,3)else "|" endif)
,010_ck_in_dt 	= evaluate2 (if (format(rDATA->ENC[d.seq].check_in_dt_tm ,"mm/dd/yyyy;;d")	> char(32))
	format(rDATA->ENC[d.seq].check_in_dt_tm,"mm/dd/yyyy;;d") else "|" endif)
,011_hcpcs		= evaluate2 (if (trim(rDATA->ENC[d.seq].cptcd ,3)	> char(32))
			concat(trim(rDATA->ENC[d.seq].cptcd,3), trim(rDATA->ENC[d.seq].cptcdmod,3)) else "|" endif)
 
FROM
(dummyt   d  with seq = value (size(rDATA->ENC,5)))
 
 
 
 order by
  001_FAC
 ,003_PMRN
 ,006_ck_in_nbr
 
 
 	WITH PCFORMAT ("", value(char(9)) ,1,1)  ,FORMAT = CRSTREAM, memsort
;	with nocounter, format, separator = " "
;
;
;
;; for testing only once this is validated then the calls to astream file location will be via operations
;; ;with format, separator = " ", check
  set statx = 0
;
; ; demo file
;
set  output->temp  = concat("cp $cer_temp/", output->filename," ",output->astream, output->filename)
call echo (output->temp);
call dcl( output->temp ,size(output->temp  ), statx)
set output->temp = ""
;
;
 
#exit_script
 FREE RECORD rdata
end go
