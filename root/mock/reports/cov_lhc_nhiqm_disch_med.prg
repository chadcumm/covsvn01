;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM cov_lhc_nhiqm_disch_med :dba GO
CREATE PROGRAM cov_lhc_nhiqm_disch_med :dba
 FREE RECORD filter_request
 RECORD filter_request (
   1 category_mean = vc
   1 location_cd = f8
   1 position_cd = f8
   1 encounter_id = f8
   1 filter [* ]
     2 filter_cat_mean = vc
     2 filter_mean = vc
 )
 FREE RECORD filter_reply
 RECORD filter_reply (
   1 category_mean = vc
   1 br_datamart_catagory_mean_id = f8
   1 flex_id = f8
   1 filter [* ]
     2 br_datamart_filter_id = f8
     2 filter_cat_mean = vc
     2 filter_mean = vc
     2 filter_display = vc
     2 value [* ]
       3 parent_entity_name = vc
       3 parent_entity_id = f8
       3 value_dt_tm = dq8
       3 freetext_desc = vc
       3 qualifier_flag = i2
       3 value_seq = i4
       3 value_type_flag = i2
       3 group_seq = i4
       3 mpage_param_mean = vc
       3 mpage_param_value = vc
       3 parent_entity_name2 = vc
       3 parent_entity_id2 = f8
       3 map_data_type_cd = f8
       3 map_data_type_meaning = vc
       3 map_data_type_display = vc
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD tmp_bdrk_parent_child_reltn
 RECORD tmp_bdrk_parent_child_reltn (
   1 parent_list [* ]
     2 event_cd = f8
     2 nomen_id = f8
     2 seq = i4
 )
 FREE RECORD tmp_bdrk_parent_child
 RECORD tmp_bdrk_parent_child (
   1 parent_list [* ]
     2 event_cd = f8
     2 child_list [* ]
       3 nomen_id = f8
 )
 FREE RECORD tmp_event_cd_level
 RECORD tmp_event_cd_level (
   1 event_list [* ]
     2 event_id = f8
     2 clinical_event_id = f8
     2 event_cd = f8
     2 parent_entity_id = f8
     2 nomen_id = f8
     2 diff_con_imp_days = i4
 )
 FREE RECORD temp_event_cd
 RECORD temp_event_cd (
   1 event_list [* ]
     2 event_cd = f8
 )
 FREE RECORD syn_request
 RECORD syn_request (
   1 category_mean = vc
   1 location_cd = f8
   1 position_cd = f8
   1 encounter_id = f8
   1 filter [* ]
     2 filter_cat_mean = vc
     2 filter_mean = vc
 )
 FREE RECORD syn_reply
 RECORD syn_reply (
   1 category_mean = vc
   1 br_datamart_catagory_mean_id = f8
   1 flex_id = f8
   1 filter [* ]
     2 br_datamart_filter_id = f8
     2 filter_cat_mean = vc
     2 filter_mean = vc
     2 filter_display = vc
     2 value [* ]
       3 parent_entity_name = vc
       3 parent_entity_id = f8
       3 value_dt_tm = dq8
       3 freetext_desc = vc
       3 qualifier_flag = i2
       3 value_seq = i4
       3 value_type_flag = i2
       3 group_seq = i4
       3 mpage_param_mean = vc
       3 mpage_param_value = vc
       3 parent_entity_name2 = vc
       3 parent_entity_id2 = f8
       3 map_data_type_cd = f8
       3 map_data_type_meaning = vc
       3 map_data_type_display = vc
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD synonyms
 RECORD synonyms (
   1 value [* ]
     2 parent_entity_id = f8
 )
 DECLARE searchforproblems (null ) = i2
 DECLARE searchfororders (null ) = i2
 DECLARE medicationhxsearch (null ) = i2
 DECLARE medicationhxsearchsyn (null ) = i2
 DECLARE homemedsearch (null ) = i2
 DECLARE searchforallergies (null ) = i2
 DECLARE searchforcodedresults (null ) = i2
 DECLARE searchforallergiesreactionclass (null ) = i2
 DECLARE searchforevents (null ) = null
 DECLARE checknoldlfound (null ) = null
 DECLARE checkorderrecononcurrentenc (null ) = null
 DECLARE getbedrockfilters ((getextrafilters = i2 ) ) = i2
 DECLARE removenomenleveldtas (null ) = null
 DECLARE searchforeventslevel (null ) = null
 DECLARE getbdrkparentchilddtareltn (null ) = null
 DECLARE removeduplicateparentdtas (null ) = null
 DECLARE order_completed = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,6004 ,"COMPLETED"
   ) )
 DECLARE order_ordered = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,6004 ,"ORDERED" ) )
 DECLARE order_suspended = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,6004 ,"SUSPENDED"
   ) )
 DECLARE resolved_var = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12030 ,"RESOLVED" ) )
 DECLARE inactive_var = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12030 ,"INACTIVE" ) )
 DECLARE active_var = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12030 ,"ACTIVE" ) )
 DECLARE canceled_var = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12030 ,"CANCELED" ) )
 DECLARE active_status = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,48 ,"ACTIVE" ) )
 DECLARE active_reaction = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12025 ,"ACTIVE" )
  )
 DECLARE allergy_cd = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12021 ,"ALLERGY" ) )
 DECLARE intollerance_cd = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12021 ,
   "INTOLERANCE" ) )
 DECLARE seceffect_cd = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12021 ,"SECEFFECT" )
  )
 DECLARE sideffect_cd = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,12021 ,"SIDEEFFECT" )
  )
 DECLARE auth = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,8 ,"AUTH" ) )
 DECLARE modified = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,8 ,"MODIFIED" ) )
 DECLARE altered = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,8 ,"ALTERED" ) )
 DECLARE placeholder = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,53 ,"PLACEHOLDER" ) )
 DECLARE continue_order = i4 WITH protect ,constant (1 )
 DECLARE continue_ord_change = i4 WITH protect ,constant (3 )
 DECLARE acknowledge_ord = i4 WITH protect ,constant (4 )
 DECLARE convert_hx = vc WITH protect ,constant ("CONVERT_HX" )
 DECLARE inpatient_ord = i4 WITH protect ,constant (0 )
 DECLARE prescription_discharge_ord = i4 WITH protect ,constant (1 )
 DECLARE recorded_homemeds_ord = i4 WITH protect ,constant (2 )
 DECLARE cross_encounter = i2 WITH protect ,noconstant (0 )
 DECLARE reconcile_found = i2 WITH protect ,noconstant (0 )
 DECLARE cognitive_impairment = i2 WITH protect ,noconstant (0 )
 DECLARE diff_congnitive_impair_days = i4 WITH protect ,noconstant (- (1 ) )
 DECLARE cognitiveatevent = i2 WITH protect ,noconstant (0 )
 DECLARE ldl_event_found = i2 WITH protect ,noconstant (0 )
 DECLARE clinical_compare_reg = i4 WITH protect ,noconstant (0 )
 DECLARE reg_compare_clinical = i4 WITH protect ,noconstant (0 )
 DECLARE future_or_prior = i4 WITH protect ,noconstant (0 )
 DECLARE numeric_result = i2 WITH protect ,constant (1 )
 DECLARE equalto = i2 WITH protect ,constant (1 )
 DECLARE notequalto = i2 WITH protect ,constant (2 )
 DECLARE greaterthan = i2 WITH protect ,constant (3 )
 DECLARE lessthan = i2 WITH protect ,constant (4 )
 DECLARE greater_or_equal = i2 WITH protect ,constant (5 )
 DECLARE less_or_equal = i2 WITH protect ,constant (6 )
 DECLARE clinical_trail = i2 WITH protect ,noconstant (0 )
 DECLARE filtersize = i4 WITH protect ,noconstant (- (1 ) )
 DECLARE addfiltersize = i4 WITH protect ,noconstant (- (1 ) )
 DECLARE synsize = i4 WITH protect ,noconstant (- (1 ) )
 DECLARE synidx = i4 WITH protect ,noconstant (0 )
 DECLARE eventidx = i4 WITH protect ,noconstant (0 )
 DECLARE eventdtacnt = i4 WITH protect ,noconstant (0 )
 DECLARE eventdtasize = i4 WITH protect ,noconstant (0 )
 DECLARE bdrckdtacnt = i4 WITH protect ,noconstant (0 )
 DECLARE bdrckdtasize = i4 WITH protect ,noconstant (0 )
 DECLARE comorclinatevent = i2 WITH protect ,noconstant (0 )
 DECLARE synex = vc WITH protect ,noconstant ("1 = 1" )
 DECLARE diagnosis = i2 WITH protect ,noconstant (0 )
 DECLARE category_mean = vc WITH protect ,noconstant ("" )
 DECLARE filter_category_mean = vc WITH protect ,noconstant ("" )
 DECLARE filter_mean = vc WITH protect ,noconstant ("" )
 DECLARE additional_filter_category_mean = vc WITH protect ,noconstant ("" )
 DECLARE additional_filter_mean = vc WITH protect ,noconstant ("" )
 DECLARE order_status_ind = i2 WITH protect ,noconstant (0 )
 DECLARE medicationhx = i2 WITH protect ,noconstant (0 )
 DECLARE allergy = i2 WITH protect ,noconstant (0 )
 DECLARE problem = i2 WITH protect ,noconstant (0 )
 DECLARE event_type = i2 WITH protect ,noconstant (0 )
 DECLARE result_value = f8 WITH protect ,noconstant (0 )
 DECLARE operator = i2 WITH protect ,noconstant (0 )
 DECLARE length_of_time = i4 WITH protect ,noconstant (0 )
 DECLARE unit_of_time = i4 WITH protect ,noconstant (0 )
 DECLARE ncnt = i4 WITH protect ,noconstant (0 )
 DECLARE rqual = i4 WITH protect ,noconstant (0 )
 DECLARE errmsg = c132 WITH protect ,noconstant (fillstring (132 ," " ) )
 DECLARE error_check = i2 WITH protect ,noconstant (error (errmsg ,1 ) )
 DECLARE debug_ind = i2 WITH protect ,noconstant (0 )
 IF ((link_encntrid = 0 ) )
  CALL echo ("No linked encounter id" )
  SET log_message = "No template that remembers encounter id linked to the script."
  SET retval = - (1 )
  GO TO exit_script
 ENDIF
 SET category_mean = cnvtupper ( $1 )
 SET filter_category_mean = cnvtupper ( $2 )
 SET filter_mean = cnvtupper ( $3 )
 IF ((size (trim (reflect (parameter (4 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (4 ,0 ) ) ) )
   SET order_status_ind = cnvtint (value (parameter (4 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (5 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (5 ,0 ) ) ) )
   SET medicationhx = cnvtint (value (parameter (5 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (6 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (6 ,0 ) ) ) )
   SET allergy = cnvtint (value (parameter (6 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (7 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (7 ,0 ) ) ) )
   SET problem = cnvtint (value (parameter (7 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (8 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (8 ,0 ) ) ) )
   SET event_type = cnvtint (value (parameter (8 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (9 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (9 ,0 ) ) ) )
   SET result_value = cnvtreal (value (parameter (9 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (10 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (10 ,0 ) ) ) )
   SET operator = cnvtint (value (parameter (10 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (11 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (11 ,0 ) ) ) )
   SET length_of_time = cnvtint (value (parameter (11 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (12 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (12 ,0 ) ) ) )
   SET unit_of_time = cnvtint (value (parameter (12 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (13 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (13 ,0 ) ) ) )
   SET cross_encounter = cnvtint (value (parameter (13 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (14 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (14 ,0 ) ) ) )
   SET cognitive_impairment = cnvtint (value (parameter (14 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (15 ,0 ) ) ) ,1 ) > 0 ) )
  SET additional_filter_category_mean = cnvtupper (value (parameter (15 ,0 ) ) )
 ENDIF
 IF ((size (trim (reflect (parameter (16 ,0 ) ) ) ,1 ) > 0 ) )
  SET additional_filter_mean = cnvtupper (value (parameter (16 ,0 ) ) )
 ENDIF
 IF ((size (trim (reflect (parameter (17 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (17 ,0 ) ) ) )
   SET clinical_trail = cnvtint (value (parameter (17 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((size (trim (reflect (parameter (18 ,0 ) ) ) ,1 ) > 0 ) )
  IF (isnumeric (value (parameter (18 ,0 ) ) ) )
   SET diagnosis = cnvtint (value (parameter (18 ,0 ) ) )
  ENDIF
 ENDIF
 IF ((debug_ind = 1 ) )
  CALL echo (category_mean )
  CALL echo (filter_category_mean )
  CALL echo (filter_mean )
  CALL echo (order_status_ind )
  CALL echo (medicationhx )
  CALL echo (allergy )
  CALL echo (problem )
  CALL echo (event_type )
  CALL echo (result_value )
  CALL echo (operator )
  CALL echo (length_of_time )
  CALL echo (unit_of_time )
  CALL echo (cross_encounter )
  CALL echo (cognitive_impairment )
  CALL echo (additional_filter_category_mean )
  CALL echo (additional_filter_mean )
  CALL echo (clinical_trail )
  CALL echo (diagnosis )
 ENDIF
 IF ((category_mean = "" ) )
  CALL echo ("Parameter 1 must be set" )
  SET log_message = "Parameter 1 must be set with a valid Category Meaning."
  SET retval = - (1 )
  GO TO exit_script
 ENDIF
 IF ((filter_category_mean = "" ) )
  CALL echo ("Parameter 2 must be set with a valid Category Filter Meaning." )
  SET log_message = "Parameter 2 must be set with a valid Category Filter Meaning."
  SET retval = - (1 )
  GO TO exit_script
 ENDIF
 IF ((filter_mean = "" ) )
  CALL echo ("Parameter 3 must be set." )
  SET log_message = "Parameter 3 must be set with a valid Filter Meaning."
  SET retval = - (1 )
  GO TO exit_script
 ENDIF
 SET log_accessionid = link_accessionid
 SET log_orderid = link_orderid
 SET log_encntrid = link_encntrid
 SET log_personid = link_personid
 SET log_taskassaycd = link_taskassaycd
 SET log_clineventid = link_clineventid
 SET retval = - (1 )
 SET ncnt = 0
 CALL getbedrockfilters (0 )
 IF ((size (filter_reply->filter[1 ].value ,5 ) > 0 ) )
  CALL getbdrkparentchilddtareltn (0 )
 ENDIF
 CALL removeduplicateparentdtas (0 )
 CASE (filter_category_mean )
  OF "YES_NO" :
   SET rqual = size (filter_reply->filter[1 ].value ,5 )
   IF ((rqual > 1 ) )
    CALL echo ("Invalid number of rows returned for filter." )
    SET rqual = 0
   ENDIF
   ,
   IF ((cnvtint (trim (filter_reply->filter[1 ].value[rqual ].freetext_desc ) ) = 0 ) )
    SET retval = 0
    IF ((filter_mean = "QM_COMP_CONTROL" ) )
     SET log_message = "Not using eMeasures, use Bedrock filters."
    ELSE
     SET log_message = concat (filter_mean ," is No." )
    ENDIF
   ELSE
    SET retval = 100
    IF ((filter_mean = "QM_COMP_CONTROL" ) )
     SET log_message = "Using eMeasures."
    ELSE
     SET log_message = concat (filter_mean ," is Yes." )
    ENDIF
   ENDIF
   ,
   GO TO exit_script
  OF "ORDER" :
   IF ((additional_filter_category_mean = "SYNONYM" ) )
    SET syn_request->category_mean = category_mean
    SET syn_request->encounter_id = link_encntrid
    SET stat = alterlist (syn_request->filter ,1 )
    SET syn_request->filter[1 ].filter_cat_mean = additional_filter_category_mean
    SET syn_request->filter[1 ].filter_mean = additional_filter_mean
    EXECUTE lhc_get_br_filter_val WITH replace ("REQUEST" ,syn_request ) ,
    replace ("REPLY" ,syn_reply )
    SET synsize = size (syn_reply->filter[1 ].value ,5 )
    IF ((synsize > 0 ) )
     SET synex =
     "not expand(synIdx,1,synSize,o.synonym_id,synonyms->value[synIdx].PARENT_ENTITY_ID)"
     SET stat = alterlist (synonyms->value ,synsize )
     FOR (idx = 1 TO synsize )
      SET synonyms->value[idx ].parent_entity_id = syn_reply->filter[1 ].value[idx ].parent_entity_id
     ENDFOR
    ENDIF
    IF ((debug_ind = 1 ) )
     CALL echorecord (syn_reply )
     CALL echo (size (syn_reply->filter[1 ].value ,5 ) )
     CALL echorecord (synonyms )
    ENDIF
   ENDIF
   ,
   IF ((medicationhx = 1 ) )
    CALL medicationhxsearch (0 )
   ELSEIF ((medicationhx = 2 ) )
    CALL homemedsearch (0 )
   ELSEIF ((allergy = 1 ) )
    CALL searchforallergies (0 )
   ELSEIF ((allergy = 2 ) )
    CALL searchforallergiesreactionclass (0 )
   ELSE
    CALL searchfororders (0 )
   ENDIF
  OF "EVENT" :
   CALL searchforevents (0 )
  OF "PROBLEM_RELTN" :
   CALL searchforproblems (0 )
  OF "PROBLEM" :
   CALL searchforproblems (0 )
  OF "EVENT_NOMEN" :
   IF ((event_type != 1 )
   AND (filtersize > 0 ) )
    SELECT INTO "nl:"
     FROM (clinical_event ce ),
      (ce_coded_result cr ),
      (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
      (br_datamart_filter f ),
      (br_datamart_filter f2 ),
      (br_datamart_value v2 ),
      (encounter e )
     PLAN (dt
      WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_name = "NOMENCLATURE" ) )
      JOIN (f
      WHERE (f.br_datamart_filter_id = filter_reply->filter[1 ].br_datamart_filter_id ) )
      JOIN (f2
      WHERE (f2.br_datamart_category_id = f.br_datamart_category_id )
      AND (f2.filter_seq = f.filter_seq ) )
      JOIN (v2
      WHERE (v2.br_datamart_category_id = f2.br_datamart_category_id )
      AND (v2.br_datamart_filter_id = f2.br_datamart_filter_id )
      AND (v2.br_datamart_filter_id != f.br_datamart_filter_id )
      AND (v2.value_seq = filter_reply->filter[1 ].value[dt.seq ].value_seq ) )
      JOIN (ce
      WHERE (ce.encntr_id = link_encntrid )
      AND (((clinical_trail = 1 ) ) OR ((ce.event_cd = v2.parent_entity_id ) ))
      AND (ce.event_class_cd != placeholder )
      AND (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100" ) )
      AND (ce.result_status_cd IN (modified ,
      auth ,
      altered ) )
      AND (v2.parent_entity_name = "CODE_VALUE" ) )
      JOIN (cr
      WHERE (cr.event_id = ce.event_id )
      AND (cr.nomenclature_id = filter_reply->filter[1 ].value[dt.seq ].parent_entity_id ) )
      JOIN (e
      WHERE (e.encntr_id = link_encntrid ) )
     HEAD REPORT
      eventdtacnt = 0
     DETAIL
      IF ((clinical_trail = 1 ) )
       IF ((ce.event_cd = v2.parent_entity_id ) )
        IF ((((ce.result_status_cd = modified ) ) OR ((ce.result_status_cd = altered ) )) )
         eventdtacnt = (eventdtacnt + 1 ) ,stat = alterlist (tmp_event_cd_level->event_list ,
          eventdtacnt ) ,tmp_event_cd_level->event_list[eventdtacnt ].event_id = ce.event_id ,
         tmp_event_cd_level->event_list[eventdtacnt ].clinical_event_id = ce.clinical_event_id ,
         tmp_event_cd_level->event_list[eventdtacnt ].event_cd = ce.event_cd ,tmp_event_cd_level->
         event_list[eventdtacnt ].parent_entity_id = v2.parent_entity_id ,tmp_event_cd_level->
         event_list[eventdtacnt ].nomen_id = filter_reply->filter[1 ].value[dt.seq ].parent_entity_id
        ELSE ncnt = (ncnt + 1 )
        ENDIF
       ENDIF
      ELSEIF ((cognitive_impairment = 1 ) )
       IF ((ce.event_end_dt_tm >= e.reg_dt_tm ) ) diff_congnitive_impair_days = datetimecmp (ce
         .event_end_dt_tm ,e.reg_dt_tm )
       ENDIF
       ,
       IF ((diff_congnitive_impair_days >= 0 )
       AND (diff_congnitive_impair_days <= length_of_time ) )
        IF ((((ce.result_status_cd = modified ) ) OR ((ce.result_status_cd = altered ) )) )
         eventdtacnt = (eventdtacnt + 1 ) ,stat = alterlist (tmp_event_cd_level->event_list ,
          eventdtacnt ) ,tmp_event_cd_level->event_list[eventdtacnt ].event_id = ce.event_id ,
         tmp_event_cd_level->event_list[eventdtacnt ].clinical_event_id = ce.clinical_event_id ,
         tmp_event_cd_level->event_list[eventdtacnt ].event_cd = ce.event_cd ,tmp_event_cd_level->
         event_list[eventdtacnt ].parent_entity_id = v2.parent_entity_id ,tmp_event_cd_level->
         event_list[eventdtacnt ].nomen_id = filter_reply->filter[1 ].value[dt.seq ].parent_entity_id
          ,tmp_event_cd_level->event_list[eventdtacnt ].diff_con_imp_days =
         diff_congnitive_impair_days
        ELSE ncnt = (ncnt + 1 )
        ENDIF
       ENDIF
      ELSE
       IF ((((ce.result_status_cd = modified ) ) OR ((ce.result_status_cd = altered ) )) )
        eventdtacnt = (eventdtacnt + 1 ) ,stat = alterlist (tmp_event_cd_level->event_list ,
         eventdtacnt ) ,tmp_event_cd_level->event_list[eventdtacnt ].event_id = ce.event_id ,
        tmp_event_cd_level->event_list[eventdtacnt ].clinical_event_id = ce.clinical_event_id ,
        tmp_event_cd_level->event_list[eventdtacnt ].event_cd = ce.event_cd ,tmp_event_cd_level->
        event_list[eventdtacnt ].parent_entity_id = v2.parent_entity_id ,tmp_event_cd_level->
        event_list[eventdtacnt ].nomen_id = filter_reply->filter[1 ].value[dt.seq ].parent_entity_id
       ELSE ncnt = (ncnt + 1 )
       ENDIF
      ENDIF
     WITH nocounter
    ;end select
    IF ((size (tmp_event_cd_level->event_list ,5 ) > 0.0 ) )
     SET ncnt = 0
    ENDIF
    IF ((debug_ind = 1 ) )
     CALL echorecord (tmp_event_cd_level )
    ENDIF
    IF ((ncnt = 0 )
    AND (size (tmp_event_cd_level->event_list ,5 ) > 0.0 ) )
     DECLARE idxnomen = i4 WITH protect ,noconstant (0 )
     DECLARE idxdta = i4 WITH protect ,noconstant (0 )
     DECLARE locposdta = i4 WITH protect ,noconstant (0 )
     DECLARE locposnomen = i4 WITH protect ,noconstant (0 )
     DECLARE bdrkeventcd = f8 WITH protect ,noconstant (0 )
     DECLARE locposmodifydta = i4 WITH protect ,noconstant (0 )
     SET eventdtasize = size (tmp_event_cd_level->event_list ,5 )
     SET bdrckdtasize = size (tmp_bdrk_parent_child->parent_list ,5 )
     SELECT INTO "nl:"
      FROM (clinical_event ce ),
       (ce_coded_result cr )
      PLAN (ce
       WHERE expand (eventidx ,1 ,eventdtasize ,ce.clinical_event_id ,tmp_event_cd_level->event_list[
        eventidx ].clinical_event_id )
       AND (ce.result_status_cd IN (modified ,
       altered ) )
       AND (ce.event_class_cd != placeholder )
       AND (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100" ) ) )
       JOIN (cr
       WHERE (cr.event_id = ce.event_id )
       AND (cr.valid_until_dt_tm >= cnvtdatetime ("31-DEC-2100" ) ) )
      ORDER BY cr.updt_dt_tm DESC
      HEAD ce.event_cd
       locposdta = locateval (idxdta ,1 ,bdrckdtasize ,ce.event_cd ,tmp_bdrk_parent_child->
        parent_list[idxdta ].event_cd ) ,
       IF ((locposdta > 0 ) ) bdrkeventcd = tmp_bdrk_parent_child->parent_list[locposdta ].event_cd ,
        IF ((bdrkeventcd > 0 ) ) locposmodifydta = locateval (idxdta ,1 ,bdrckdtasize ,bdrkeventcd ,
          tmp_event_cd_level->event_list[idxdta ].event_cd )
        ENDIF
       ENDIF
      HEAD cr.nomenclature_id
       IF ((locposdta > 0 ) ) locposnomen = locateval (idxnomen ,1 ,size (tmp_bdrk_parent_child->
          parent_list[locposdta ].child_list ,5 ) ,cr.nomenclature_id ,tmp_bdrk_parent_child->
         parent_list[locposdta ].child_list[idxnomen ].nomen_id ) ,
        IF ((locposnomen > 0 ) )
         IF ((cognitive_impairment = 1 )
         AND (locposmodifydta > 0 ) )
          IF ((tmp_event_cd_level->event_list[locposmodifydta ].diff_con_imp_days <= length_of_time
          ) ) ncnt = (ncnt + 1 )
          ENDIF
         ELSEIF ((clinical_trail = 1 ) ) ncnt = (ncnt + 1 )
         ELSE ncnt = (ncnt + 1 )
         ENDIF
        ENDIF
       ENDIF
      WITH nocounter ,expand = 1
     ;end select
    ENDIF
   ENDIF
   ,
   CALL echo (build ("ncnt alpha ..." ,ncnt ) )
   IF ((ncnt = 0 )
   AND (additional_filter_category_mean > "" )
   AND (additional_filter_mean > "" ) )
    IF ((filtersize = 0 ) )
     CALL getbedrockfilters (1 )
     IF ((addfiltersize > 0 ) )
      CALL searchforevents (0 )
     ENDIF
    ELSE
     CALL getbedrockfilters (1 )
     CALL removenomenleveldtas (0 )
     IF ((size (temp_event_cd->event_list ,5 ) > 0 ) )
      CALL searchforeventslevel (0 )
     ENDIF
    ENDIF
   ENDIF
   ,
   IF ((ncnt = 0 )
   AND (filter_mean IN ("HF_LVEF_MOD_SEV_NOMEN" ,
   "AMI_LVEF_MOD_SEV_NOMEN" ,
   "TOB_USE_5_MORE" ,
   "TOB_USE_EVERYDAY" ) ) )
    SELECT INTO "nl:"
     FROM (clinical_event ce ),
      (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
      (br_datamart_filter f ),
      (br_datamart_filter f2 ),
      (br_datamart_value v2 )
     PLAN (dt
      WHERE (filter_reply->filter[1 ].value[dt.seq ].value_type_flag = numeric_result ) )
      JOIN (f
      WHERE (f.br_datamart_filter_id = filter_reply->filter[1 ].br_datamart_filter_id ) )
      JOIN (f2
      WHERE (f2.br_datamart_category_id = f.br_datamart_category_id )
      AND (f2.filter_seq = f.filter_seq ) )
      JOIN (v2
      WHERE (v2.br_datamart_category_id = f2.br_datamart_category_id )
      AND (v2.br_datamart_filter_id = f2.br_datamart_filter_id )
      AND (v2.br_datamart_filter_id != f.br_datamart_filter_id )
      AND (v2.value_seq = filter_reply->filter[1 ].value[dt.seq ].value_seq ) )
      JOIN (ce
      WHERE (ce.encntr_id = link_encntrid )
      AND (ce.event_cd = v2.parent_entity_id )
      AND (ce.event_class_cd != placeholder )
      AND (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100" ) )
      AND (ce.result_status_cd IN (modified ,
      auth ,
      altered ) )
      AND (v2.parent_entity_name = "CODE_VALUE" ) )
     DETAIL
      IF ((isnumeric (ce.result_val ) > 0 )
      AND (((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag = equalto )
      AND (cnvtreal (ce.result_val ) = cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) ) OR ((((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag =
      notequalto )
      AND (cnvtreal (ce.result_val ) != cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) ) OR ((((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag =
      greaterthan )
      AND (cnvtreal (ce.result_val ) > cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) ) OR ((((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag = lessthan
      )
      AND (cnvtreal (ce.result_val ) < cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) ) OR ((((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag =
      greater_or_equal )
      AND (cnvtreal (ce.result_val ) >= cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) ) OR ((filter_reply->filter[1 ].value[dt.seq ].qualifier_flag =
      less_or_equal )
      AND (cnvtreal (ce.result_val ) <= cnvtreal (filter_reply->filter[1 ].value[dt.seq ].
       freetext_desc ) ) )) )) )) )) )) ) ncnt = (ncnt + 1 )
      ENDIF
     WITH nocounter
    ;end select
    CALL echo (build ("ncnt numeric ..." ,ncnt ) )
   ENDIF
 ENDCASE
 IF ((event_type = 1 )
 AND (filter_category_mean != "EVENT" ) )
  CALL searchforcodedresults (0 )
 ENDIF
 SET error_check = error (errmsg ,0 )
 IF ((error_check != 0 ) )
  SET log_message = concat ("SCRIPT FAILURE(Unable to find " ,filter_category_mean ,
   " for encounter.):  " ,errmsg )
  SET retval = 0
  GO TO exit_script
 ENDIF
 IF ((ncnt = 0 ) )
  SET log_message = concat ("No " ,filter_category_mean ," found that matches the criteria." )
  SET retval = 0
  GO TO exit_script
 ELSE
  IF ((((cognitiveatevent = 1 ) ) OR ((comorclinatevent = 1 ) )) )
   SET log_message = concat (additional_filter_category_mean ,
    " records found that match the criteria." )
  ELSE
   SET log_message = concat (filter_category_mean ," records found that match the criteria." )
  ENDIF
  SET retval = 100
  GO TO exit_script
 ENDIF
 SUBROUTINE  getbedrockfilters (getextrafilters )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entering - GetBedrockFilters" )
  ENDIF
  SET filter_request->category_mean = category_mean
  SET filter_request->encounter_id = link_encntrid
  SET stat = alterlist (filter_request->filter ,1 )
  IF ((getextrafilters = 1 ) )
   SET filter_request->filter[1 ].filter_cat_mean = additional_filter_category_mean
   SET filter_request->filter[1 ].filter_mean = additional_filter_mean
   CALL echo ("leaving extra filters" )
  ELSE
   SET filter_request->filter[1 ].filter_cat_mean = filter_category_mean
   SET filter_request->filter[1 ].filter_mean = filter_mean
  ENDIF
  EXECUTE lhc_get_br_filter_val WITH replace ("REQUEST" ,filter_request ) ,
  replace ("REPLY" ,filter_reply )
  IF ((additional_filter_category_mean > "" )
  AND (additional_filter_mean > "" ) )
   IF ((getextrafilters = 1 ) )
    SET addfiltersize = size (filter_reply->filter[1 ].value ,5 )
   ELSE
    SET filtersize = size (filter_reply->filter[1 ].value ,5 )
   ENDIF
  ELSE
   IF ((getextrafilters = 0 ) )
    SET filtersize = size (filter_reply->filter[1 ].value ,5 )
   ENDIF
  ENDIF
  IF ((filter_reply->status_data.status = "F" ) )
   SET log_message = "Error retrieving Bedrock filter data."
   SET retval = 0
   GO TO exit_script
  ENDIF
  IF ((filter_category_mean > "" )
  AND (filter_mean > "" )
  AND (additional_filter_category_mean > "" )
  AND (additional_filter_mean > "" ) )
   IF ((((addfiltersize = 0 ) ) OR ((additional_filter_category_mean = "SYNONYM" ) )) )
    IF ((size (filter_reply->filter[1 ].value ,5 ) = 0 ) )
     SET log_message = "No related Bedrock filter data found."
     SET log_misc1 = "No Bedrock data found."
     SET retval = 0
     GO TO exit_script
    ENDIF
   ENDIF
  ELSE
   IF ((size (filter_reply->filter[1 ].value ,5 ) = 0 ) )
    SET log_message = "No related Bedrock filter data found."
    SET log_misc1 = "No Bedrock data found."
    SET retval = 0
    GO TO exit_script
   ENDIF
  ENDIF
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving - GetBedrockFilters" )
  ENDIF
 END ;Subroutine
 SUBROUTINE  getbdrkparentchilddtareltn (null )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entering - GetBdRkParentChildDtaReltn" )
  ENDIF
  SELECT INTO "nl:"
   FROM (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
    (br_datamart_filter f ),
    (br_datamart_filter f2 ),
    (br_datamart_value v2 )
   PLAN (dt
    WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_name = "NOMENCLATURE" ) )
    JOIN (f
    WHERE (f.br_datamart_filter_id = filter_reply->filter[1 ].br_datamart_filter_id ) )
    JOIN (f2
    WHERE (f2.br_datamart_category_id = f.br_datamart_category_id )
    AND (f2.filter_seq = f.filter_seq ) )
    JOIN (v2
    WHERE (v2.br_datamart_category_id = f2.br_datamart_category_id )
    AND (v2.br_datamart_filter_id = f2.br_datamart_filter_id )
    AND (v2.br_datamart_filter_id != f.br_datamart_filter_id )
    AND (v2.value_seq = filter_reply->filter[1 ].value[dt.seq ].value_seq ) )
   HEAD dt.seq
    bdrckdtacnt = (bdrckdtacnt + 1 ) ,stat = alterlist (tmp_bdrk_parent_child_reltn->parent_list ,
     bdrckdtacnt ) ,tmp_bdrk_parent_child_reltn->parent_list[bdrckdtacnt ].event_cd = v2
    .parent_entity_id ,tmp_bdrk_parent_child_reltn->parent_list[bdrckdtacnt ].nomen_id = filter_reply
    ->filter[1 ].value[dt.seq ].parent_entity_id ,tmp_bdrk_parent_child_reltn->parent_list[
    bdrckdtacnt ].seq = v2.value_seq ,
    IF ((debug_ind = 1 ) )
     CALL echo (build ("parent_entity_id:" ,v2.parent_entity_id ) ) ,
     CALL echo (build ("parent_entity_id:" ,filter_reply->filter[1 ].value[dt.seq ].parent_entity_id
      ) )
    ENDIF
   WITH nocounter
  ;end select
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving - GetBdRkParentChildDtaReltn" )
   CALL echorecord (tmp_bdrk_parent_child_reltn )
  ENDIF
 END ;Subroutine
 SUBROUTINE  removeduplicateparentdtas (null )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entering - RemoveDuplicateParentDtas" )
  ENDIF
  DECLARE idxevent = i4 WITH protect ,noconstant (0 )
  DECLARE eventpos = i4 WITH protect ,noconstant (0 )
  DECLARE idxnomen = i4 WITH protect ,noconstant (0 )
  DECLARE nomenpos = i4 WITH protect ,noconstant (0 )
  DECLARE bdrcknomencnt = i4 WITH protect ,noconstant (0 )
  DECLARE eventcdcnt = i4 WITH protect ,noconstant (0 )
  DECLARE nomencd = f8 WITH protect ,noconstant (0 )
  SET bdrckdtasize = size (tmp_bdrk_parent_child_reltn->parent_list ,5 )
  IF ((bdrckdtasize > 0 ) )
   SELECT INTO "nl:"
    tmpeventcd = tmp_bdrk_parent_child_reltn->parent_list[dt.seq ].event_cd ,
    tmpnomenid = tmp_bdrk_parent_child_reltn->parent_list[dt.seq ].nomen_id
    FROM (dummyt dt WITH seq = size (tmp_bdrk_parent_child_reltn->parent_list ,5 ) )
    HEAD tmpeventcd
     eventpos = locateval (idxevent ,1 ,size (tmp_bdrk_parent_child->parent_list ,5 ) ,tmpeventcd ,
      tmp_bdrk_parent_child->parent_list[idxevent ].event_cd ) ,
     IF ((eventpos = 0 ) ) eventcdcnt = (eventcdcnt + 1 ) ,stat = alterlist (tmp_bdrk_parent_child->
       parent_list ,eventcdcnt ) ,tmp_bdrk_parent_child->parent_list[eventcdcnt ].event_cd =
      tmpeventcd
     ENDIF
    HEAD tmpnomenid
     nomenpos = locateval (idxnomen ,1 ,size (tmp_bdrk_parent_child->parent_list ,5 ) ,tmpeventcd ,
      tmp_bdrk_parent_child->parent_list[idxnomen ].event_cd ) ,
     IF ((nomenpos > 0 ) ) bdrcknomencnt = (size (tmp_bdrk_parent_child->parent_list[nomenpos ].
       child_list ,5 ) + 1 ) ,stat = alterlist (tmp_bdrk_parent_child->parent_list[nomenpos ].
       child_list ,bdrcknomencnt ) ,tmp_bdrk_parent_child->parent_list[nomenpos ].child_list[
      bdrcknomencnt ].nomen_id = tmpnomenid
     ENDIF
    WITH nocounter
   ;end select
  ENDIF
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving - RemoveDuplicateParentDtas" )
   CALL echorecord (tmp_bdrk_parent_child )
  ENDIF
 END ;Subroutine
 SUBROUTINE  removenomenleveldtas (null )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entring RemoveNomenLevelDtas" )
  ENDIF
  DECLARE idxevent = i4 WITH protect ,noconstant (0 )
  DECLARE eventpos = i4 WITH protect ,noconstant (- (1 ) )
  DECLARE eventcdcnt = i4 WITH protect ,noconstant (0 )
  SET bdrckdtasize = size (tmp_bdrk_parent_child->parent_list ,5 )
  SELECT INTO "nl:"
   FROM (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) )
   HEAD dt.seq
    eventpos = locateval (idxevent ,1 ,bdrckdtasize ,filter_reply->filter[1 ].value[dt.seq ].
     parent_entity_id ,tmp_bdrk_parent_child->parent_list[idxevent ].event_cd ) ,
    IF ((eventpos = 0 ) ) eventcdcnt = (eventcdcnt + 1 ) ,stat = alterlist (temp_event_cd->event_list
       ,eventcdcnt ) ,temp_event_cd->event_list[eventcdcnt ].event_cd = filter_reply->filter[1 ].
     value[dt.seq ].parent_entity_id
    ENDIF
   WITH nocounter
  ;end select
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving RemoveNomenLevelDtas" )
  ENDIF
 END ;Subroutine
 SUBROUTINE  searchforeventslevel (null )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entering SearchForEventsLevel" )
  ENDIF
  DECLARE eventidx = i4 WITH protect ,noconstant (0 )
  DECLARE eventcdcnt = i4 WITH protect ,noconstant (0 )
  DECLARE eventsize = i4 WITH protect ,noconstant (0 )
  SET eventsize = size (temp_event_cd->event_list ,5 )
  SELECT INTO "nl:"
   FROM (clinical_event ce ),
    (encounter e )
   PLAN (ce
    WHERE expand (eventidx ,1 ,eventsize ,ce.event_cd ,temp_event_cd->event_list[eventidx ].event_cd
     )
    AND (ce.encntr_id = link_encntrid )
    AND (ce.event_class_cd != placeholder )
    AND (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100" ) )
    AND (ce.result_status_cd IN (modified ,
    auth ,
    altered ) )
    AND (ce.result_val > "" ) )
    JOIN (e
    WHERE (e.encntr_id = link_encntrid ) )
   DETAIL
    IF ((cognitive_impairment = 1 ) )
     IF ((ce.event_end_dt_tm >= e.reg_dt_tm ) ) diff_congnitive_impair_days = datetimecmp (ce
       .event_end_dt_tm ,e.reg_dt_tm )
     ENDIF
     ,
     IF ((diff_congnitive_impair_days >= 0 )
     AND (diff_congnitive_impair_days <= length_of_time ) ) ncnt = (ncnt + 1 ) ,cognitiveatevent = 1
     ENDIF
    ELSE ncnt = (ncnt + 1 ) ,comorclinatevent = 1
    ENDIF
   WITH nocounter
  ;end select
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving SearchForEventsLevel" )
  ENDIF
 END ;Subroutine
 SUBROUTINE  searchfororders (null )
  IF ((debug_ind = 1 ) )
   CALL echo ("Entering SearchForOrders" )
  ENDIF
  SELECT INTO "nl:"
   FROM (orders o ),
    (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) )
   PLAN (o
    WHERE (o.encntr_id = link_encntrid )
    AND (((order_status_ind = 0 ) ) OR ((((order_status_ind = 1 )
    AND (o.order_status_cd = order_ordered ) ) OR ((((order_status_ind = 2 )
    AND (o.order_status_cd = order_completed ) ) OR ((order_status_ind = 3 )
    AND (o.order_status_cd IN (order_ordered ,
    order_completed ) ) )) )) )) )
    JOIN (dt
    WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
   DETAIL
    ncnt = (ncnt + 1 )
   WITH nocounter
  ;end select
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving SearchForOrders" )
  ENDIF
 END ;Subroutine
 SUBROUTINE  searchforallergies (null )
  CALL echo ("Entering SearchForAllergies" )
  SELECT INTO "nl:"
   FROM (allergy a ),
    (nomenclature n ),
    (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
    (order_catalog o )
   PLAN (a
    WHERE (a.person_id = link_personid )
    AND (a.reaction_status_cd = active_reaction )
    AND (a.active_ind = 1 ) )
    JOIN (n
    WHERE (n.nomenclature_id = a.substance_nom_id ) )
    JOIN (o
    WHERE (o.cki = concat ("MUL.ORD!" ,n.concept_identifier ) ) )
    JOIN (dt
    WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
   DETAIL
    ncnt = (ncnt + 1 )
   WITH nocounter
  ;end select
  CALL echo ("Leaving SearchForAllergies" )
 END ;Subroutine
 SUBROUTINE  searchforallergiesreactionclass (null )
  CALL echo ("Entering SearchForAllergiesReactionClass" )
  SELECT INTO "nl:"
   FROM (allergy a ),
    (nomenclature n ),
    (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
    (order_catalog o )
   PLAN (a
    WHERE (a.person_id = link_personid )
    AND (a.reaction_status_cd = active_reaction )
    AND (a.reaction_class_cd IN (allergy_cd ,
    intollerance_cd ,
    seceffect_cd ,
    sideffect_cd ) )
    AND (a.active_ind = 1 )
    AND (cnvtdatetime (curdate ,curtime3 ) BETWEEN a.beg_effective_dt_tm AND a.end_effective_dt_tm )
    )
    JOIN (n
    WHERE (n.nomenclature_id = a.substance_nom_id ) )
    JOIN (o
    WHERE (o.cki = concat ("MUL.ORD!" ,n.concept_identifier ) ) )
    JOIN (dt
    WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
   DETAIL
    ncnt = (ncnt + 1 )
   WITH nocounter
  ;end select
  CALL echo ("Leaving SearchForAllergiesReactionClass" )
 END ;Subroutine
 SUBROUTINE  searchforcodedresults (null )
  CALL echo ("Entering SearchForCodedResults" )
  SELECT INTO "nl:"
   FROM (clinical_event ce ),
    (ce_coded_result cr ),
    (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
    (br_datamart_filter f ),
    (br_datamart_filter f2 ),
    (br_datamart_value v2 )
   PLAN (ce
    WHERE (ce.encntr_id = link_encntrid )
    AND (ce.result_val > "" ) )
    JOIN (cr
    WHERE (cr.event_id = ce.event_id ) )
    JOIN (dt
    WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = cr.result_cd ) )
    JOIN (f
    WHERE (f.br_datamart_filter_id = filter_reply->filter[1 ].br_datamart_filter_id ) )
    JOIN (f2
    WHERE (f2.br_datamart_category_id = f.br_datamart_category_id )
    AND (f2.filter_seq = f.filter_seq ) )
    JOIN (v2
    WHERE (v2.br_datamart_category_id = f2.br_datamart_category_id )
    AND (v2.br_datamart_filter_id = f2.br_datamart_filter_id )
    AND (v2.br_datamart_filter_id != f.br_datamart_filter_id )
    AND (v2.value_seq = filter_reply->filter[1 ].value[dt.seq ].value_seq )
    AND (v2.parent_entity_id = ce.event_cd )
    AND (v2.parent_entity_name = "CODE_VALUE" ) )
   DETAIL
    ncnt = (ncnt + 1 )
   WITH nocounter
  ;end select
  CALL echo ("Leaving SearchForCodedResults" )
 END ;Subroutine

;--------------------------------------------------------------------------------------------------------

 SUBROUTINE  medicationhxsearch (null )

  if ((debug_ind = 1 ) )
  	call echo ("Entering - MedicationHxSearch" )
  	call echo (build ("value of parser" ,synex ) )
  endif

  select into "nl:"
   from (orders o ),
    (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) )

   plan (o where (o.encntr_id = link_encntrid )
    and (o.orig_ord_as_flag = prescription_discharge_ord )
    and (order_status_ind = 3 )
    and ((o.order_status_cd + 0 ) in (order_ordered , order_completed ) )
    and parser (synex ) )

   join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )

   Detail
    ncnt = (ncnt + 1 )
   with nocounter ,expand = 1
  
  ;end select ----------------------------
	
  if ((ncnt = 0 ) )
   select into "nl:"
    from (orders o ),
     (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) ),
     (order_recon_detail ocd ),
     (order_recon oc )
  
    plan (o where (o.encntr_id = link_encntrid )
     and (o.orig_ord_as_flag = recorded_homemeds_ord )
     and (order_status_ind = 3 )
     and (o.order_status_cd in (order_ordered , order_completed ) )
     and parser (synex ) )
     
    join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )

    join (ocd where (ocd.order_nbr = o.order_id )
     and (ocd.recon_order_action_mean = convert_hx ) )
     
    join (oc where (oc.order_recon_id = ocd.order_recon_id ) )
    
    Detail
    	ncnt = (ncnt + 1 )
    with nocounter ,expand = 1
  endif
  
  ;end select----------------------------------------------

  if ((ncnt = 0 ) )
   call checkorderrecononcurrentenc (null )
   if ((reconcile_found = 1 ) )
    select into "nl:"
     from (orders o ),
      (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) ),
      (order_recon_detail ocd ),
      (order_recon orc )
     plan (o
      where (o.encntr_id = link_encntrid )
      and (o.orig_ord_as_flag in (prescription_discharge_ord ,
      recorded_homemeds_ord ) )
      and (order_status_ind = 3 )
      and ((o.order_status_cd + 0 ) in (order_ordered ,
      order_completed ) )
      and parser (synex ) )
      join (dt
      where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
      join (ocd
      where (ocd.order_nbr = o.order_id )
      and (ocd.continue_order_ind in (continue_order ,
      continue_ord_change ,
      acknowledge_ord ) ) )
      join (orc
      where (orc.order_recon_id = ocd.order_recon_id )
      and (orc.recon_type_flag = 3 ) )
     detail
      ncnt = (ncnt + 1 )
     with nocounter ,expand = 1
    ;end select
   endif
  endif
  
  IF ((ncnt = 0 )
  AND (reconcile_found = 2 ) )
   SELECT INTO "nl:"
    FROM (orders o ),
     (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
     (order_recon_detail ocd ),
     (order_recon orc )
    PLAN (o
     WHERE (o.person_id = link_personid )
     AND (o.orig_ord_as_flag IN (inpatient_ord ,
     prescription_discharge_ord ,
     recorded_homemeds_ord ) )
     AND (o.order_status_cd IN (order_ordered ,
     order_completed ,
     order_suspended ) )
     AND parser (synex ) )
     JOIN (dt
     WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
     JOIN (ocd
     WHERE (ocd.order_nbr = o.order_id )
     AND (ocd.continue_order_ind IN (continue_order ,
     continue_ord_change ,
     acknowledge_ord ) ) )
     JOIN (orc
     WHERE (orc.order_recon_id = ocd.order_recon_id )
     AND (orc.recon_type_flag = 2 ) )
    DETAIL
     ncnt = (ncnt + 1 )
    WITH nocounter ,expand = 1
   ;end select
  ENDIF
  IF ((ncnt = 0 )
  AND (cross_encounter = 1 )
  AND (reconcile_found = 1 ) )
   SELECT INTO "nl:"
    FROM (orders o ),
     (dummyt dt WITH seq = size (filter_reply->filter[1 ].value ,5 ) ),
     (order_recon_detail ocd ),
     (order_recon orc )
    PLAN (o
     WHERE (o.person_id = link_personid )
     AND (o.orig_ord_as_flag IN (prescription_discharge_ord ,
     recorded_homemeds_ord ) )
     AND (order_status_ind = 3 )
     AND ((o.order_status_cd + 0 ) IN (order_ordered ,
     order_completed ) )
     AND parser (synex ) )
     JOIN (dt
     WHERE (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
     JOIN (ocd
     WHERE (ocd.order_nbr = o.order_id )
     AND (ocd.continue_order_ind IN (continue_order ,
     continue_ord_change ,
     acknowledge_ord ) ) )
     JOIN (orc
     WHERE (orc.order_recon_id = ocd.order_recon_id )
     AND (orc.recon_type_flag = 3 ) )
    DETAIL
     ncnt = (ncnt + 1 )
    WITH nocounter ,expand = 1
   ;end select
  ENDIF
  IF ((debug_ind = 1 ) )
   CALL echo ("Leaving - MedicationHxSearch" )
  ENDIF
 END ;Subroutine
 
;--------------------------------------------------------------------------------------------------------
 
 SUBROUTINE  checkorderrecononcurrentenc (null )
 
  if ((debug_ind = 1 ) )
  	call echo ("Entering - CheckOrderReconOnCurrentEnc" )
  endif
  
  select into "nl:"
  
   from (order_recon orc ),
    (order_recon_detail ord ),
    (orders o ),
    (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) )
  
   plan (orc where (orc.encntr_id = link_encntrid )
   	and (orc.recon_type_flag in (2 , 3 ) ) )
    
   join (ord where (ord.order_recon_id = orc.order_recon_id )
   	and (ord.continue_order_ind in (1 , 3 , 4 ) ) )

   join (o where (o.order_id = ord.order_nbr )
   	and (o.order_status_cd in (order_ordered ,order_completed , order_suspended ) ) )
   
   join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )

   Detail
    reconcile_found = 0 ,
    if ((orc.recon_type_flag = 2 )
    	and (orc.cross_encntr_ind = 1 ) ) reconcile_found = 2
    else
     	if ((o.order_status_cd in (order_ordered , order_completed ) ) ) reconcile_found = 1
     	endif
    endif
   with nocounter
   
  
  if ((debug_ind = 1 ) )
  	call echo ("Leaving - CheckOrderReconOnCurrentEnc" )
  endif
 end ;subroutine

;--------------------------------------------------------------------------------------------------------


 SUBROUTINE  homemedsearch (null )
 
  if ((debug_ind = 1 ) )
 	 call echo ("Entering - HomeMedSearch" )
  endif
  
  select into "nl:"
   from (orders o ),
    (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) )
  
   plan (o where (o.encntr_id = link_encntrid )
	   and (o.orig_ord_as_flag = 2 ) )
   
   join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = o.catalog_cd ) )
   
   detail
   	ncnt = (ncnt + 1 )
   with nocounter

  if ((debug_ind = 1 ) )
  	call echo ("Leaving - HomeMedSearch" )
  endif
 end ;subroutine
 
;--------------------------------------------------------------------------------------------------------
 
 SUBROUTINE  searchforproblems (null )
  
  if ((debug_ind = 1 ) )
  	call echo ("Entering - SearchForProblems" )
  endif
  
  select into "nl:"
   from problem p, encounter e ,
    (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) )
   
   plan (p where (p.person_id = link_personid )
    and (p.active_ind > 0 )
    and (((problem = 0 ) ) or ((((problem = 1 )
    and (p.life_cycle_status_cd = active_var ) ) or ((((problem = 2 )
    and (p.life_cycle_status_cd = inactive_var ) ) or ((((problem = 3 )
    and (p.life_cycle_status_cd = resolved_var ) ) or ((((problem = 4 )
    and (p.life_cycle_status_cd = canceled_var ) ) or ((((problem = 5 )
    and (p.life_cycle_status_cd in (active_var ,inactive_var ) ) ) or ((((problem = 6 )
    and (p.life_cycle_status_cd in (active_var ,resolved_var ) ) ) or ((((problem = 7 )
    and (p.life_cycle_status_cd in (active_var ,inactive_var , resolved_var ) ) ) or ((((problem = 8 )
    and (p.life_cycle_status_cd in (inactive_var , resolved_var ) ) ) or ((problem = 9 )   
    and (p.life_cycle_status_cd in (inactive_var , resolved_var , canceled_var ) ) )) )) )) )) )) )) )) )) )) )
    
   join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = p.nomenclature_id ) )

   join (e where (((diagnosis = 0 )
    and (e.person_id = p.person_id ) ) or ((diagnosis = 1 )
    and (e.encntr_id = link_encntrid )
    and (e.reg_dt_tm <= p.beg_effective_dt_tm ) )) )

  detail
    ncnt = (ncnt + 1 )
  with nocounter
   
  if ((ncnt = 0 ) )
   select into "nl:"
    from (diagnosis dx ),
     (dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ) )
   
    plan (dx where (((diagnosis = 1 )
     and (dx.encntr_id = link_encntrid ) ) or ((diagnosis = 0 )
     and (dx.person_id = link_personid ) ))
     and (dx.active_ind = 1 )
     and (dx.active_status_cd = active_status ) )
     
    join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = dx.nomenclature_id ) )
    
    Detail
    	ncnt = (ncnt + 1 )
    with nocounter
  endif
  
  if ((debug_ind = 1 ) )
  	call echo ("Leaving - SearchForProblems" )
  endif
 
 end ;subroutine
 
;--------------------------------------------------------------------------------------------------------
 
 SUBROUTINE  searchforevents (null )
 
  if ((debug_ind = 1 ) )
 	 call echo ("Entering - SearchForEvents" )
  endif
  
  select into "nl:"
   
   from clinical_event ce,
    dummyt dt with seq = size (filter_reply->filter[1 ].value ,5 ),
    encounter e
    
   plan (ce where (((unit_of_time = 0 )
    and (ce.encntr_id = link_encntrid ) ) or ((unit_of_time > 0 )
    and (ce.person_id = link_personid ) ))
    and (ce.event_class_cd != placeholder )
    and (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100" ) )
    and (ce.result_status_cd in (modified , auth , altered ) )
    and (ce.result_val > "" ) )
    
   join (dt where (filter_reply->filter[1 ].value[dt.seq ].parent_entity_id = ce.event_cd )
    and (((operator = 0 ) ) or ((((operator = 1 )
    and (cnvtreal (ce.result_val ) = result_value ) ) or ((((operator = 2 )
    and (cnvtreal (ce.result_val ) != result_value ) ) or ((((operator = 3 )
    and (cnvtreal (ce.result_val ) > result_value ) ) or ((((operator = 4 )
    and (cnvtreal (ce.result_val ) < result_value ) ) or ((((operator = 5 )
    and (cnvtreal (ce.result_val ) >= result_value ) ) or ((operator = 6 )
    and (cnvtreal (ce.result_val ) <= result_value ) )) )) )) )) )) )) )

   join (e where e.encntr_id = link_encntrid)
   
   detail
   if ((unit_of_time > 0 ) and (cognitive_impairment = 0 ) )
    	if ((e.reg_dt_tm > ce.event_end_dt_tm ) ) reg_compare_clinical = datetimecmp (e.reg_dt_tm ,ce.event_end_dt_tm )
      	if ((reg_compare_clinical <= length_of_time ) ) ncnt = (ncnt + 1 )
      	endif
    	endif
     
     if ((ncnt = 0 )
     		and (((ce.event_end_dt_tm > e.reg_dt_tm )
     		and (e.disch_dt_tm = null ) ) or ((e.disch_dt_tm != null )
     		and (e.disch_dt_tm > ce.event_end_dt_tm )
     		and (ce.event_end_dt_tm > e.reg_dt_tm ) )) ) ncnt = (ncnt + 1 )
     endif
   else
     	if ((cognitive_impairment = 1 ) )
   	   	if ((ce.event_end_dt_tm >= e.reg_dt_tm ) ) diff_congnitive_impair_days = datetimecmp (ce
      	  .event_end_dt_tm ,e.reg_dt_tm )
      	endif
            if ((diff_congnitive_impair_days >= 0 )
      		and (diff_congnitive_impair_days <= length_of_time ) ) ncnt = (ncnt + 1 ) ,cognitiveatevent = 1
      	endif
     	else ncnt = (ncnt + 1 ) ,comorclinatevent = 1
     	endif
    endif
   with nocounter
   
  if ((ncnt = 0 )
  	and (unit_of_time > 0 )
  	and (cognitive_impairment = 0 ) )
   	call checknoldlfound (0 )
  endif
  
  if ((debug_ind = 1 ) )
  	call echo ("Leaving - SearchForEvents" )
  endif
 
 end ;subroutine

;--------------------------------------------------------------------------------------------------------
 SUBROUTINE  checknoldlfound (null )
 
  if ((debug_ind = 1 ) )
  	call echo ("Entering - CheckNoLDLFound" )
  endif
 
  select into "nl:"
   from clinical_event ce,
    dummyt dt with seq = size(filter_reply->filter[1].value ,5 ),
    encounter e 
    
   plan ce where ce.person_id = link_personid
   	and ce.result_val > "" 
    	and ce.event_class_cd != placeholder
    	and ce.valid_until_dt_tm = cnvtdatetime ("31-dec-2100" ) 
    	and ce.result_status_cd in(modified ,auth, altered)

  join dt where filter_reply->filter[1].value[dt.seq].parent_entity_id = ce.event_cd
  	and cnvtreal(ce.result_val) > 0.0

  join e where e.encntr_id = link_encntrid 
   
  Detail
    if(e.reg_dt_tm > ce.event_end_dt_tm) 
    		reg_compare_clinical = datetimecmp(e.reg_dt_tm ,ce.event_end_dt_tm)
     		if(reg_compare_clinical <= length_of_time) 
     			ldl_event_found = 1
     		endif
    endif
    
    if( (ldl_event_found = 0 )
    		and(((ce.event_end_dt_tm > e.reg_dt_tm )and (e.disch_dt_tm = null) ) 
    			or ((e.disch_dt_tm != null )
    			and (e.disch_dt_tm > ce.event_end_dt_tm )
    			and (ce.event_end_dt_tm > e.reg_dt_tm ) )) 
    	) ldl_event_found = 1
    endif
    
   with nocounter
    
  if ((ldl_event_found = 0 ) )
  	set ncnt = (ncnt + 1 )
  endif
  if ((debug_ind = 1 ) )
  	call echo ("Leaving - CheckNoLDLFound" )
  endif
 end ;Subroutine

;--------------------------------------------------------------------------------------------------------



#exit_script


 CALL echo (build ("log_message ..." ,log_message ) )
 CALL echo (build ("retval ........" ,retval ) )
 SET script_version = "025 22/10/2020 AR056302"

END GO
