;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM amb_rpt_signed_notes_copy:dba GO
CREATE PROGRAM amb_rpt_signed_notes_copy:dba
 PROMPT
  "Output to File/Printer/MINE" = "MINE" ,
  "Position" = 0 ,
  "Provider" = 0 ,
  "From Date" = "CURDATE" ,
  "Through Date" = "CURDATE"
  WITH outdev ,pos_prompt ,provider_prompt ,from_date ,thru_date
 DECLARE logmsg ((mymsg = vc ) ,(msglvl = i2 (value ,2 ) ) ) = null
 DECLARE logrecord ((myrecstruct = vc (ref ) ) ) = null
 DECLARE finalizemsgs ((outdest = vc (value ,"" ) ) ,(recsizezflag = i4 (value ,1 ) ) ) = null
 DECLARE catcherrors ((mymsg = vc ) ) = i2
 DECLARE getreply (null ) = vc
 DECLARE geterrorcount (null ) = i4
 DECLARE getcodewithcheck ((type = vc ) ,(code_set = i4 (value ,0 ) ) ,(expression = vc (value ,"" )
  ) ,(msglvl = i2 (value ,2 ) ) ) = f8
 DECLARE setreply ((mystat = vc ) ) = null
 DECLARE populatesubeventstatus ((errorcnt = i4 (value ) ) ,(operationname = vc (value ) ) ,(
  operationstatus = vc (value ) ) ,(targetobjectname = vc (value ) ) ,(targetobjectvalue = vc (value
   ) ) ) = i2
 DECLARE writemlgmsg ((msg = vc ) ,(lvl = i2 ) ) = null
 DECLARE ccps_json = i2 WITH protect ,constant (0 )
 DECLARE ccps_xml = i2 WITH protect ,constant (1 )
 DECLARE ccps_rec_listing = i2 WITH protect ,constant (2 )
 DECLARE ccps_info_domain = vc WITH protect ,constant ("CCPS_SCRIPT_LOGGING" )
 DECLARE ccps_none_ind = i2 WITH protect ,constant (0 )
 DECLARE ccps_file_ind = i2 WITH protect ,constant (1 )
 DECLARE ccps_msgview_ind = i2 WITH protect ,constant (2 )
 DECLARE ccps_listing_ind = i2 WITH protect ,constant (3 )
 DECLARE ccps_log_error = i2 WITH protect ,constant (0 )
 DECLARE ccps_log_audit = i2 WITH protect ,constant (2 )
 DECLARE ccps_error_disp = vc WITH protect ,noconstant ("ERROR" )
 DECLARE ccps_audit_disp = vc WITH protect ,noconstant ("AUDIT" )
 DECLARE ccps_serrmsg = vc WITH protect ,noconstant (fillstring (132 ," " ) )
 DECLARE ccps_ierrcode = i4 WITH protect ,noconstant (error (ccps_serrmsg ,1 ) )
 EXECUTE msgrtl
 IF (NOT (validate (debug_values ) ) )
  RECORD debug_values (
    1 log_program_name = vc
    1 log_file_dest = vc
    1 inactive_dt_tm = vc
    1 log_level = i2
    1 log_level_override = i2
    1 logging_on = i2
    1 rec_format = i2
    1 suppress_rec = i2
    1 suppress_msg = i2
    1 debug_method = i4
  ) WITH protect
  SET debug_values->logging_on = false
  SET debug_values->log_program_name = curprog
 ENDIF
 IF (NOT (validate (ccps_log ) ) )
  RECORD ccps_log (
    1 ecnt = i4
    1 cnt = i4
    1 qual [* ]
      2 msg = vc
      2 msg_type_id = i4
      2 msg_type_display = vc
  ) WITH protect
 ENDIF
 IF (NOT (validate (frec ) ) )
  RECORD frec (
    1 file_desc = i4
    1 file_offset = i4
    1 file_dir = i4
    1 file_name = vc
    1 file_buf = vc
  ) WITH protect
 ENDIF
 IF (NOT (validate (reply ) ) )
  RECORD reply (
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  ) WITH protect
 ENDIF
 CALL setreply ("F" )
 SELECT INTO "nl:"
  FROM (dm_info dm )
  PLAN (dm
   WHERE (dm.info_domain = ccps_info_domain )
   AND (dm.info_name = debug_values->log_program_name )
   AND (dm.info_date >= cnvtdatetime (curdate ,curtime3 ) ) )
  ORDER BY dm.info_name
  HEAD dm.info_name
   entity_cnt = 0 ,component_cnt = 0 ,entity = trim (piece (dm.info_char ,"," ,(entity_cnt + 1 ) ,
     "Not Found" ) ,3 ) ,component = fillstring (4000 ," " ) ,
   WHILE ((component != "Not Found" ) )
    component_cnt = (component_cnt + 1 ) ,component = trim (piece (entity ,";" ,component_cnt ,
      "Not Found" ) ,3 ) ,component_head = trim (piece (cnvtlower (component ) ,":" ,1 ,"Not Found"
      ) ,3 ) ,component_value = trim (piece (component ,":" ,2 ,"Not Found" ) ,3 ) ,
    CASE (component_head )
     OF "program" :
      debug_values->log_program_name = component_value
     OF "debug_method" :
      IF ((component_value = "None" ) ) debug_values->debug_method = ccps_none_ind
      ELSEIF ((component_value = "File" ) ) debug_values->debug_method = ccps_file_ind
      ELSEIF ((component_value = "Message View" ) ) debug_values->debug_method = ccps_msgview_ind
      ELSEIF ((component_value = "Listing" ) ) debug_values->debug_method = ccps_listing_ind
      ENDIF
     OF "file_name" :
      debug_values->log_file_dest = component_value
     OF "inactive_dt_tm" :
      debug_values->inactive_dt_tm = component_value
     OF "rec_type" :
      debug_values->rec_format = cnvtint (component_value )
     OF "suppress_rec" :
      debug_values->suppress_rec = cnvtint (component_value )
     OF "suppress_msg" :
      debug_values->suppress_msg = cnvtint (component_value )
    ENDCASE
   ENDWHILE
   ,
   IF ((debug_values->debug_method != ccps_none_ind ) ) debug_values->logging_on = true
   ELSE debug_values->logging_on = false
   ENDIF
  FOOT  dm.info_name
   null
  WITH nocounter
 ;end select
 IF (validate (ccps_debug ) )
  IF (NOT (validate (ccps_file ) ) )
   SET debug_values->log_file_dest = build (debug_values->log_program_name ,"_DBG.dat" )
  ENDIF
  IF (NOT (validate (ccps_rec_format ) ) )
   IF ((ccps_debug != ccps_listing_ind ) )
    SET debug_values->rec_format = ccps_json
   ELSE
    SET debug_values->rec_format = ccps_rec_listing
   ENDIF
  ELSE
   IF ((ccps_rec_format = ccps_xml ) )
    SET debug_values->rec_format = ccps_xml
   ELSEIF ((ccps_rec_format = ccps_json ) )
    SET debug_values->rec_format = ccps_json
   ELSE
    SET debug_values->rec_format = ccps_rec_listing
   ENDIF
  ENDIF
  IF (NOT (validate (ccps_suppress_rec ) ) )
   SET debug_values->suppress_rec = false
  ELSE
   IF ((ccps_suppress_rec = true ) )
    SET debug_values->suppress_rec = true
   ELSE
    SET debug_values->suppress_rec = false
   ENDIF
  ENDIF
  IF (NOT (validate (ccps_suppress_msg ) ) )
   SET debug_values->suppress_msg = false
  ELSE
   IF ((ccps_suppress_msg = true ) )
    SET debug_values->suppress_msg = true
   ELSE
    SET debug_values->suppress_msg = false
   ENDIF
  ENDIF
  CASE (ccps_debug )
   OF ccps_none_ind :
    SET debug_values->debug_method = ccps_none_ind
    SET debug_values->logging_on = false
   OF ccps_file_ind :
    SET debug_values->debug_method = ccps_file_ind
    SET debug_values->logging_on = true
   OF ccps_msgview_ind :
    SET debug_values->debug_method = ccps_msgview_ind
    SET debug_values->logging_on = true
   OF ccps_listing_ind :
    SET debug_values->debug_method = ccps_listing_ind
    SET debug_values->logging_on = true
  ENDCASE
 ENDIF
 IF (debug_values->logging_on )
  CALL echo ("****************************" )
  CALL echo ("*** Logging is turned ON ***" )
  CALL echo ("****************************" )
  CASE (debug_values->debug_method )
   OF ccps_file_ind :
    CALL echo (build ("*** Will write to file: " ,debug_values->log_file_dest ,"***" ) )
   OF ccps_msgview_ind :
    CALL echo ("*****************************" )
    CALL echo ("*** Will write to MsgView ***" )
    CALL echo ("*****************************" )
   OF ccps_listing_ind :
    CALL echo ("*********************************" )
    CALL echo ("*** Will write to the listing ***" )
    CALL echo ("*********************************" )
  ENDCASE
  IF ((debug_values->suppress_rec = true ) )
   CALL echo ("****************************" )
   CALL echo ("***  Suppress Rec is ON  ***" )
   CALL echo ("****************************" )
  ENDIF
  IF ((debug_values->suppress_msg = true ) )
   CALL echo ("****************************" )
   CALL echo ("***  Suppress Msg is ON  ***" )
   CALL echo ("****************************" )
  ENDIF
 ELSE
  CALL echo ("*****************************" )
  CALL echo ("*** Logging is turned OFF ***" )
  CALL echo ("*****************************" )
 ENDIF
 SUBROUTINE  logmsg (mymsg ,msglvl )
  DECLARE seek_retval = i4 WITH private ,noconstant
  DECLARE filelen = i4 WITH private ,noconstant
  DECLARE write_stat = i2 WITH private ,noconstant
  DECLARE imsglvl = i2 WITH private ,noconstant
  DECLARE smsglvl = vc WITH private ,noconstant
  DECLARE slogtext = vc WITH private ,noconstant ("" )
  DECLARE start_char = i4 WITH private ,noconstant
  SET imsglvl = msglvl
  SET slogtext = mymsg
  IF ((((debug_values->suppress_msg = false ) ) OR ((debug_values->suppress_msg = true )
  AND (msglvl = ccps_log_error ) )) )
   IF ((((imsglvl = ccps_log_error ) ) OR ((debug_values->logging_on = true ) )) )
    SET ccps_log->cnt = (ccps_log->cnt + 1 )
    IF ((msglvl = ccps_log_error ) )
     SET ccps_log->ecnt = (ccps_log->ecnt + 1 )
    ENDIF
    SET stat = alterlist (ccps_log->qual ,ccps_log->cnt )
    SET ccps_log->qual[ccps_log->cnt ].msg = trim (mymsg ,3 )
    SET ccps_log->qual[ccps_log->cnt ].msg_type_id = msglvl
    IF ((msglvl = ccps_log_error ) )
     SET ccps_log->qual[ccps_log->cnt ].msg_type_display = ccps_error_disp
    ELSE
     SET ccps_log->qual[ccps_log->cnt ].msg_type_display = ccps_audit_disp
    ENDIF
   ENDIF
   CASE (imsglvl )
    OF ccps_log_error :
     SET smsglvl = "Error"
    OF ccps_log_audit :
     SET smsglvl = "Audit"
   ENDCASE
   IF ((imsglvl = ccps_log_error ) )
    CALL writemlgmsg (slogtext ,imsglvl )
    CALL populatesubeventstatus (ccps_log->ecnt ,ccps_error_disp ,"F" ,build (curprog ) ,trim (mymsg
      ,3 ) )
   ENDIF
   IF ((debug_values->logging_on = true ) )
    IF ((debug_values->debug_method = ccps_msgview_ind )
    AND (msglvl != ccps_log_error ) )
     CALL writemlgmsg (slogtext ,imsglvl )
    ELSEIF ((debug_values->debug_method = ccps_file_ind ) )
     SET frec->file_name = debug_values->log_file_dest
     SET frec->file_buf = "ab"
     SET stat = cclio ("OPEN" ,frec )
     SET frec->file_dir = 2
     SET seek_retval = cclio ("SEEK" ,frec )
     SET filelen = cclio ("TELL" ,frec )
     SET frec->file_offset = filelen
     SET frec->file_buf = build2 (format (cnvtdatetime (curdate ,curtime3 ) ,
       "mm/dd/yyyy hh:mm:ss;;d" ) ,fillstring (5 ," " ) ,"{" ,smsglvl ,"}" ,fillstring (5 ," " ) ,
      mymsg ,char (13 ) ,char (10 ) )
     SET write_stat = cclio ("WRITE" ,frec )
     SET stat = cclio ("CLOSE" ,frec )
    ELSEIF ((debug_values->debug_method = ccps_listing_ind ) )
     CALL echo (build2 ("*** " ,format (cnvtdatetime (curdate ,curtime3 ) ,"mm/dd/yyyy hh:mm:ss;;d"
        ) ,fillstring (5 ," " ) ,"{" ,smsglvl ,"}" ,fillstring (5 ," " ) ,mymsg ) )
    ENDIF
   ENDIF
  ENDIF
 END ;Subroutine
 SUBROUTINE  logrecord (myrecstruct )
  IF ((debug_values->suppress_rec = false ) )
   DECLARE smsgtype = vc WITH private ,noconstant
   DECLARE write_stat = i4 WITH private ,noconstant
   SET smsgtype = "Audit"
   IF ((debug_values->logging_on = true ) )
    IF ((debug_values->debug_method = ccps_file_ind ) )
     SET frec->file_name = debug_values->log_file_dest
     SET frec->file_buf = "ab"
     SET stat = cclio ("OPEN" ,frec )
     SET frec->file_dir = 2
     SET seek_retval = cclio ("SEEK" ,frec )
     SET filelen = cclio ("TELL" ,frec )
     SET frec->file_offset = filelen
     SET frec->file_buf = build2 (format (cnvtdatetime (curdate ,curtime3 ) ,
       "mm/dd/yyyy hh:mm:ss;;d" ) ,fillstring (5 ," " ) ,"{" ,smsgtype ,"}" ,fillstring (5 ," " ) )
     IF ((debug_values->rec_format = ccps_xml ) )
      CALL echoxml (myrecstruct ,debug_values->log_file_dest ,1 )
     ELSEIF ((debug_values->rec_format = ccps_json ) )
      CALL echojson (myrecstruct ,debug_values->log_file_dest ,1 )
     ELSE
      CALL echorecord (myrecstruct ,debug_values->log_file_dest ,1 )
     ENDIF
     SET frec->file_buf = build (frec->file_buf ,char (13 ) ,char (10 ) )
     SET write_stat = cclio ("WRITE" ,frec )
     SET stat = cclio ("CLOSE" ,frec )
    ELSEIF ((debug_values->debug_method = ccps_listing_ind ) )
     CALL echo (build2 ("*** " ,format (cnvtdatetime (curdate ,curtime3 ) ,"mm/dd/yyyy hh:mm:ss;;d"
        ) ,fillstring (5 ," " ) ,"{" ,smsgtype ,"}" ,fillstring (5 ," " ) ) )
     IF ((debug_values->rec_format = ccps_xml ) )
      CALL echoxml (myrecstruct )
     ELSEIF ((debug_values->rec_format = ccps_json ) )
      CALL echojson (myrecstruct )
     ELSE
      CALL echorecord (myrecstruct )
     ENDIF
    ENDIF
   ENDIF
  ENDIF
 END ;Subroutine
 SUBROUTINE  catcherrors (mymsg )
  DECLARE ccps_ierroroccurred = i2 WITH private ,noconstant (0 )
  SET ccps_ierrcode = error (ccps_serrmsg ,0 )
  WHILE ((ccps_ierrcode > 0 )
  AND (ccps_log->ecnt < 50 ) )
   SET ccps_ierroroccurred = 1
   CALL logmsg (trim (build2 (mymsg ," -- " ,trim (ccps_serrmsg ,3 ) ) ,3 ) ,ccps_log_error )
   SET ccps_ierrcode = error (ccps_serrmsg ,1 )
  ENDWHILE
  RETURN (ccps_ierroroccurred )
 END ;Subroutine
 SUBROUTINE  geterrorcount (null )
  RETURN (ccps_log->ecnt )
 END ;Subroutine
 SUBROUTINE  finalizemsgs (outdest ,recsizezflag )
  DECLARE errcnt = i4 WITH noconstant ,private
  SET stat = catcherrors ("Performing final check for errors..." )
  SET errcnt = geterrorcount (null )
  IF ((errcnt > 0 ) )
   CALL setreply ("F" )
  ELSEIF ((recsizezflag = 0 ) )
   CALL setreply ("Z" )
  ELSE
   CALL setreply ("S" )
  ENDIF
  IF ((ccps_log->ecnt > 0 )
  AND (cnvtstring (outdest ) != "" ) )
   SELECT INTO value (outdest )
    FROM (dummyt d WITH seq = ccps_log->cnt )
    PLAN (d
     WHERE (ccps_log->qual[d.seq ].msg_type_id = ccps_log_error ) )
    HEAD REPORT
     CALL print (build2 (
      "*** Errors have occurred in the CCL Script.  Please contact your System Administrator " ,
      "and/or Cerner for assistance with resolving the issue. ***" ,char (13 ) ,char (10 ) ,char (13
       ) ,char (10 ) ) )
    DETAIL
     CALL print (ccps_log->qual[d.seq ].msg ) ,
     row + 1
    FOOT REPORT
     null
    WITH nocounter ,maxcol = 500
   ;end select
  ENDIF
  IF ((debug_values->debug_method = ccps_listing_ind ) )
   CALL echo ("********************************" )
   CALL echo ("*** Printing Logging Summary ***" )
   CALL echo ("********************************" )
   CALL logrecord (ccps_log )
   CALL logrecord (reply )
  ENDIF
 END ;Subroutine
 SUBROUTINE  setreply (mystat )
  IF ((validate (reply->status_data.status ) = 1 ) )
   SET reply->status_data.status = mystat
  ENDIF
 END ;Subroutine
 SUBROUTINE  getreply (null )
  IF ((validate (reply->status_data.status ) = 1 ) )
   RETURN (reply->status_data.status )
  ELSE
   RETURN ("Z" )
  ENDIF
 END ;Subroutine
 SUBROUTINE  getcodewithcheck (type ,code_set ,expression ,msglvl )
  DECLARE cki_flag = i2 WITH private ,noconstant (0 )
  IF ((code_set = 0 ) )
   DECLARE tmp_code_value = f8 WITH private ,noconstant (uar_get_code_by_cki (type ) )
   SET cki_flag = 1
  ELSE
   DECLARE tmp_code_value = f8 WITH private ,noconstant (uar_get_code_by (type ,code_set ,expression
     ) )
  ENDIF
  IF ((tmp_code_value <= 0 ) )
   IF ((cki_flag = 0 ) )
    CALL logmsg (build2 ("*** ! Code value from code set " ,trim (cnvtstring (code_set ) ,3 ) ,
      " with " ,type ," of " ,expression ," was not found !" ) ,msglvl )
   ELSE
    CALL logmsg (build2 ("*** ! Code value with CKI of " ,type ," was not found !" ) ,msglvl )
   ENDIF
  ENDIF
  RETURN (tmp_code_value )
 END ;Subroutine
 SUBROUTINE  populatesubeventstatus (errorcnt ,operationname ,operationstatus ,targetobjectname ,
  targetobjectvalue )
  DECLARE ccps_isubeventcnt = i4 WITH protect ,noconstant (0 )
  DECLARE ccps_isubeventsize = i4 WITH protect ,noconstant (0 )
  IF ((validate (reply->ops_event ) = 1 )
  AND (errorcnt = 1 ) )
   SET reply->ops_event = targetobjectvalue
  ENDIF
  IF ((validate (reply->status_data.status ,"-1" ) != "-1" ) )
   SET ccps_isubeventcnt = size (reply->status_data.subeventstatus ,5 )
   IF ((ccps_isubeventcnt > 0 ) )
    SET ccps_isubeventsize = size (trim (reply->status_data.subeventstatus[ccps_isubeventcnt ].
      operationname ) )
    SET ccps_isubeventsize = (ccps_isubeventsize + size (trim (reply->status_data.subeventstatus[
      ccps_isubeventcnt ].operationstatus ) ) )
    SET ccps_isubeventsize = (ccps_isubeventsize + size (trim (reply->status_data.subeventstatus[
      ccps_isubeventcnt ].targetobjectname ) ) )
    SET ccps_isubeventsize = (ccps_isubeventsize + size (trim (reply->status_data.subeventstatus[
      ccps_isubeventcnt ].targetobjectvalue ) ) )
   ENDIF
   IF ((ccps_isubeventsize > 0 ) )
    SET ccps_isubeventcnt = (ccps_isubeventcnt + 1 )
    SET iloggingstat = alter (reply->status_data.subeventstatus ,ccps_isubeventcnt )
   ENDIF
   IF ((ccps_isubeventcnt > 0 ) )
    SET reply->status_data.subeventstatus[ccps_isubeventcnt ].operationname = substring (1 ,25 ,
     operationname )
    SET reply->status_data.subeventstatus[ccps_isubeventcnt ].operationstatus = substring (1 ,1 ,
     operationstatus )
    SET reply->status_data.subeventstatus[ccps_isubeventcnt ].targetobjectname = substring (1 ,25 ,
     targetobjectname )
    SET reply->status_data.subeventstatus[ccps_isubeventcnt ].targetobjectvalue = targetobjectvalue
   ENDIF
  ENDIF
 END ;Subroutine
 SUBROUTINE  writemlgmsg (msg ,lvl )
  DECLARE sys_handle = i4 WITH noconstant (0 ) ,private
  DECLARE sys_status = i4 WITH noconstant (0 ) ,private
  CALL uar_syscreatehandle (sys_handle ,sys_status )
  IF ((sys_handle > 0 ) )
   CALL uar_msgsetlevel (sys_handle ,lvl )
   CALL uar_sysevent (sys_handle ,lvl ,nullterm (debug_values->log_program_name ) ,nullterm (msg ) )
   CALL uar_sysdestroyhandle (sys_handle )
  ENDIF
 END ;Subroutine
 SET lastmod = "001  9/11/12   ML011047"
 IF (NOT (validate (list_in ) ) )
  DECLARE list_in = i2 WITH protect ,constant (1 )
 ENDIF
 IF (NOT (validate (list_not_in ) ) )
  DECLARE list_not_in = i2 WITH protect ,constant (2 )
 ENDIF
 IF (NOT (validate (ccps_records ) ) )
  RECORD ccps_records (
    1 cnt = i4
    1 list [* ]
      2 name = vc
    1 num = i4
  ) WITH persistscript
 ENDIF
 DECLARE ispromptany ((which_prompt = i2 ) ) = i2
 SUBROUTINE  ispromptany (which_prompt )
  DECLARE prompt_reflect = vc WITH private ,noconstant (reflect (parameter (which_prompt ,0 ) ) )
  DECLARE return_val = i2 WITH private ,noconstant (0 )
  IF ((prompt_reflect = "C1" ) )
   IF ((ichar (value (parameter (which_prompt ,1 ) ) ) = 42 ) )
    SET return_val = 1
   ENDIF
  ENDIF
  RETURN (return_val )
 END ;Subroutine
 DECLARE ispromptlist ((which_prompt = i2 ) ) = i2
 SUBROUTINE  ispromptlist (which_prompt )
  DECLARE prompt_reflect = vc WITH private ,noconstant (reflect (parameter (which_prompt ,0 ) ) )
  DECLARE return_val = i2 WITH private ,noconstant (0 )
  IF ((substring (1 ,1 ,prompt_reflect ) = "L" ) )
   SET return_val = 1
  ENDIF
  RETURN (return_val )
 END ;Subroutine
 DECLARE ispromptsingle ((which_prompt = i2 ) ) = i2
 SUBROUTINE  ispromptsingle (which_prompt )
  DECLARE prompt_reflect = vc WITH private ,noconstant (reflect (parameter (which_prompt ,0 ) ) )
  DECLARE return_val = i2 WITH private ,noconstant (0 )
  IF ((textlen (trim (prompt_reflect ,3 ) ) > 0 )
  AND NOT (ispromptany (which_prompt ) )
  AND NOT (ispromptlist (which_prompt ) ) )
   SET return_val = 1
  ENDIF
  RETURN (return_val )
 END ;Subroutine
 DECLARE ispromptempty ((which_prompt = i2 ) ) = i2
 SUBROUTINE  ispromptempty (which_prompt )
  DECLARE prompt_reflect = vc WITH private ,noconstant (reflect (parameter (which_prompt ,0 ) ) )
  DECLARE return_val = i2 WITH private ,noconstant (0 )
  IF ((textlen (trim (prompt_reflect ,3 ) ) = 0 ) )
   SET return_val = 1
  ELSEIF (ispromptsingle (which_prompt ) )
   IF ((substring (1 ,1 ,prompt_reflect ) = "C" ) )
    IF ((textlen (trim (value (parameter (which_prompt ,0 ) ) ,3 ) ) = 0 ) )
     SET return_val = 1
    ENDIF
   ELSE
    IF ((cnvtreal (value (parameter (which_prompt ,1 ) ) ) = 0 ) )
     SET return_val = 1
    ENDIF
   ENDIF
  ENDIF
  RETURN (return_val )
 END ;Subroutine
 DECLARE getpromptlist ((which_prompt = i2 ) ,(which_column = vc ) ,(which_option = i2 (value ,
   list_in ) ) ) = vc
 SUBROUTINE  getpromptlist (which_prompt ,which_column ,which_option )
  DECLARE prompt_reflect = vc WITH noconstant (reflect (parameter (which_prompt ,0 ) ) ) ,private
  DECLARE count = i4 WITH noconstant (0 ) ,private
  DECLARE item_num = i4 WITH noconstant (0 ) ,private
  DECLARE option_str = vc WITH noconstant ("" ) ,private
  DECLARE return_val = vc WITH noconstant ("0=1" ) ,private
  IF ((which_option = list_not_in ) )
   SET option_str = " NOT IN ("
  ELSE
   SET option_str = " IN ("
  ENDIF
  IF (ispromptany (which_prompt ) )
   SET return_val = "1=1"
  ELSEIF (ispromptlist (which_prompt ) )
   SET count = cnvtint (substring (2 ,(textlen (prompt_reflect ) - 1 ) ,prompt_reflect ) )
  ELSEIF (ispromptsingle (which_prompt ) )
   SET count = 1
  ENDIF
  IF ((count > 0 ) )
   SET return_val = concat ("(" ,which_column ,option_str )
   FOR (item_num = 1 TO count )
    IF ((mod (item_num ,1000 ) = 1 )
    AND (item_num > 1 ) )
     SET return_val = replace (return_val ,"," ,")" ,2 )
     SET return_val = concat (return_val ," or " ,which_column ,option_str )
    ENDIF
    IF ((substring (1 ,1 ,reflect (parameter (which_prompt ,item_num ) ) ) = "C" ) )
     SET return_val = concat (return_val ,"'" ,value (parameter (which_prompt ,item_num ) ) ,"'" ,
      "," )
    ELSE
     SET return_val = build (return_val ,value (parameter (which_prompt ,item_num ) ) ,"," )
    ENDIF
   ENDFOR
   SET return_val = replace (return_val ,"," ,")" ,2 )
   SET return_val = concat (return_val ,")" )
  ENDIF
  RETURN (return_val )
 END ;Subroutine
 DECLARE getpromptexpand ((which_prompt = i2 ) ,(which_column = vc ) ,(which_option = i2 (value ,
   list_in ) ) ) = vc
 SUBROUTINE  getpromptexpand (which_prompt ,which_column ,which_option )
  DECLARE record_name = vc WITH private ,noconstant (" " )
  DECLARE return_val = vc WITH private ,noconstant ("0=1" )
  IF (ispromptany (which_prompt ) )
   SET return_val = "1=1"
  ELSEIF (((ispromptlist (which_prompt ) ) OR (ispromptsingle (which_prompt ) )) )
   SET record_name = getpromptrecord (which_prompt ,which_column )
   IF ((textlen (trim (record_name ,3 ) ) > 0 ) )
    SET return_val = createexpandparser (which_column ,record_name ,which_option )
   ENDIF
  ENDIF
  CALL logmsg (concat ("GetPromptExpand: return value = " ,return_val ) )
  RETURN (return_val )
 END ;Subroutine
 DECLARE getpromptrecord ((which_prompt = i2 ) ,(which_rec = vc ) ) = vc
 SUBROUTINE  getpromptrecord (which_prompt ,which_rec )
  DECLARE record_name = vc WITH private ,noconstant (" " )
  DECLARE prompt_reflect = vc WITH private ,noconstant (reflect (parameter (which_prompt ,0 ) ) ) ,
  private
  DECLARE count = i4 WITH private ,noconstant (0 )
  DECLARE item_num = i4 WITH private ,noconstant (0 )
  DECLARE idx = i4 WITH private ,noconstant (0 )
  DECLARE data_type = vc WITH private ,noconstant (" " )
  DECLARE alias_parser = vc WITH private ,noconstant (" " )
  DECLARE cnt_parser = vc WITH private ,noconstant (" " )
  DECLARE alterlist_parser = vc WITH private ,noconstant (" " )
  DECLARE data_type_parser = vc WITH private ,noconstant (" " )
  DECLARE return_val = vc WITH private ,noconstant (" " )
  IF (((NOT (ispromptany (which_prompt ) ) ) OR (NOT (ispromptempty (which_prompt ) ) )) )
   SET record_name = createrecord (which_rec )
   IF ((textlen (trim (record_name ,3 ) ) > 0 ) )
    IF (ispromptlist (which_prompt ) )
     SET count = cnvtint (substring (2 ,(textlen (prompt_reflect ) - 1 ) ,prompt_reflect ) )
    ELSEIF (ispromptsingle (which_prompt ) )
     SET count = 1
    ENDIF
    IF ((count > 0 ) )
     SET alias_parser = concat ("set curalias = which_rec_alias " ,record_name ,"->list[idx] go" )
     SET cnt_parser = build2 ("set " ,record_name ,"->cnt = " ,count ," go" )
     SET alterlist_parser = build2 ("set stat = alterlist(" ,record_name ,"->list," ,record_name ,
      "->cnt) go" )
     SET data_type = cnvtupper (substring (1 ,1 ,reflect (parameter (which_prompt ,1 ) ) ) )
     SET data_type_parser = concat ("set " ,record_name ,"->data_type = '" ,data_type ,"' go" )
     CALL parser (alias_parser )
     CALL parser (cnt_parser )
     CALL parser (alterlist_parser )
     CALL parser (data_type_parser )
     CALL logmsg (concat ("GetPromptRecord: alias_parser = " ,alias_parser ) )
     CALL logmsg (concat ("GetPromptRecord: cnt_parser = " ,cnt_parser ) )
     CALL logmsg (concat ("GetPromptRecord: alterlist_parser = " ,alterlist_parser ) )
     CALL logmsg (concat ("GetPromptRecord: data_type_parser = " ,data_type_parser ) )
     FOR (item_num = 1 TO count )
      SET idx = (idx + 1 )
      CASE (data_type )
       OF "I" :
        SET which_rec_alias->number = cnvtreal (value (parameter (which_prompt ,item_num ) ) )
       OF "F" :
        SET which_rec_alias->number = cnvtreal (value (parameter (which_prompt ,item_num ) ) )
       OF "C" :
        SET which_rec_alias->string = value (parameter (which_prompt ,item_num ) )
      ENDCASE
     ENDFOR
     SET cnt_parser = concat (record_name ,"->cnt" )
     IF ((validate (parser (cnt_parser ) ,0 ) > 0 ) )
      SET return_val = record_name
     ELSE
      CALL cclexception (999 ,"E" ,
       "GetPromptRecord: failed to add the prompt values to the new record" )
     ENDIF
     SET alias_parser = concat ("set curalias which_rec_alias off go" )
     CALL parser (alias_parser )
     CALL logmsg (concat ("GetPromptRecord: cnt_parser = " ,cnt_parser ) )
     CALL logmsg (concat ("GetPromptRecord: alias_parser = " ,alias_parser ) )
    ELSE
     CALL logmsg ("GetPromptRecord: zero records found" )
    ENDIF
   ENDIF
  ELSE
   CALL logmsg ("GetPromptRecord: prompt value is any(*) or empty" )
  ENDIF
  IF ((textlen (trim (record_name ,3 ) ) > 0 ) )
   CALL parser (concat ("call logRecord(" ,record_name ,") go" ) )
  ENDIF
  CALL logmsg (concat ("GetPromptRecord: return value = " ,return_val ) )
  CALL catcherrors ("An error occurred in GetPromptRecord()" )
  RETURN (return_val )
 END ;Subroutine
 DECLARE createrecord ((which_rec = vc (value ,"" ) ) ) = vc
 SUBROUTINE  createrecord (which_rec )
  DECLARE record_name = vc WITH private ,noconstant (" " )
  DECLARE record_parser = vc WITH private ,noconstant (" " )
  DECLARE new_record_ind = i2 WITH private ,noconstant (0 )
  DECLARE return_val = vc WITH private ,noconstant (" " )
  IF ((textlen (trim (which_rec ,3 ) ) > 0 ) )
   IF ((findstring ("." ,which_rec ,1 ,0 ) > 0 ) )
    SET record_name = concat ("ccps_" ,trim (which_rec ,3 ) ,"_rec" )
   ELSE
    SET record_name = trim (which_rec ,3 )
   ENDIF
  ELSE
   SET record_name = build ("ccps_temp_" ,(ccps_records->cnt + 1 ) ,"_rec" )
  ENDIF
  SET record_name = concat (trim (replace (record_name ,concat (
      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 !"#$%&' ,
      "'()*+,-./:;<=>?@[\]^_`{|}~" ) ,concat (
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_______" ,
      "__________________________" ) ,3 ) ,3 ) )
  CALL logmsg (concat ("CreateRecord: record_name = " ,record_name ) )
  IF (NOT (validate (parser (record_name ) ) ) )
   SET record_parser = concat ("record " ,record_name ," (1 cnt = i4" ,
    " 1 list[*] 2 string = vc 2 number = f8" ," 1 data_type = c1 1 num = i4)" ,
    " with persistscript go" )
   CALL logmsg (concat ("CreateRecord: record parser = " ,record_parser ) )
   CALL parser (record_parser )
   IF (validate (parser (record_name ) ) )
    SET return_val = record_name
    SET ccps_records->cnt = (ccps_records->cnt + 1 )
    SET stat = alterlist (ccps_records->list ,ccps_records->cnt )
    SET ccps_records->list[ccps_records->cnt ].name = record_name
   ELSE
    CALL cclexception (999 ,"E" ,"CreateRecord: failed to create record" )
   ENDIF
  ELSE
   CALL cclexception (999 ,"E" ,"CreateRecord: record already exists" )
   CALL parser (concat ("call logRecord(" ,record_name ,") go" ) )
  ENDIF
  CALL logrecord (ccps_records )
  CALL logmsg (concat ("CreateRecord: return value = " ,return_val ) )
  CALL catcherrors ("An error occurred in CreateRecord()" )
  RETURN (return_val )
 END ;Subroutine
 DECLARE createexpandparser ((which_column = vc ) ,(which_rec = vc ) ,(which_option = i2 (value ,
   list_in ) ) ) = vc
 SUBROUTINE  createexpandparser (which_column ,which_rec ,which_option )
  DECLARE return_val = vc WITH private ,noconstant ("0=1" )
  DECLARE option_str = vc WITH private ,noconstant (" " )
  DECLARE record_member = vc WITH private ,noconstant (" " )
  DECLARE data_type = vc WITH private ,noconstant (" " )
  DECLARE data_type_parser = vc WITH private ,noconstant (" " )
  IF (validate (parser (which_rec ) ) )
   IF ((which_option = list_not_in ) )
    SET option_str = " NOT"
   ENDIF
   SET data_type_parser = concat ("set data_type = " ,which_rec ,"->data_type go" )
   CALL parser (data_type_parser )
   CASE (data_type )
    OF "I" :
     SET record_member = "number"
    OF "F" :
     SET record_member = "number"
    OF "C" :
     SET record_member = "string"
   ENDCASE
   SET return_val = build (option_str ," expand(" ,which_rec ,"->num" ,"," ,"1," ,which_rec ,
    "->cnt," ,which_column ,"," ,which_rec ,"->list[" ,which_rec ,"->num]." ,record_member ,")" )
  ELSE
   CALL logmsg (concat ("CreateExpandParser: " ,which_rec ," does not exist" ) )
  ENDIF
  CALL logmsg (concat ("CreateExpandParser: return value = " ,return_val ) )
  CALL catcherrors ("An error occurred in CreateExpandParser()" )
  RETURN (return_val )
 END ;Subroutine
 CALL logmsg ("sc_cps_get_prompt_list 007 11/02/2012 ML011047" )
 DECLARE who_running = f8
 DECLARE who_running_name = c25
 DECLARE display_org = vc WITH constant (fillstring (30 ," " ) )
 DECLARE display_loc = vc WITH constant (fillstring (30 ," " ) )
 DECLARE display_provider = vc WITH constant (fillstring (30 ," " ) )
 DECLARE display_pat = vc WITH constant (fillstring (30 ," " ) )
 DECLARE display_mrn = vc WITH constant (fillstring (12 ," " ) )
 DECLARE display_encntr = vc WITH constant (fillstring (12 ," " ) )
 DECLARE display_start = vc
 DECLARE display_end = vc
 DECLARE startdate = vc
 DECLARE enddate = vc
 DECLARE did_we_print = vc
 SET did_we_print = "N"
 SET line = fillstring (130 ,"-" )
 SET line2 = fillstring (130 ,"*" )
 DECLARE person_mrn_alias_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,4 ,"MRN" ) )
 DECLARE encntr_mrn_alias_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,319 ,"FIN NBR" ) )
 DECLARE signed_cd = f8 WITH constant (uar_get_code_by ("MEANING" ,15750 ,"SIGNED" ) )
 DECLARE ce_signed = f8 WITH constant (uar_get_code_by ("MEANING" ,21 ,"SIGN" ) )
 DECLARE doc_type = f8 WITH constant (uar_get_code_by ("MEANING" ,15749 ,"DOC" ) )
 DECLARE status_cd_inerror = f8 WITH constant (uar_get_code_by ("MEANING" ,8 ,"INERROR" ) )
 DECLARE status_cd_inerrornomut = f8 WITH constant (uar_get_code_by ("MEANING" ,8 ,"INERRNOMUT" ) )
 DECLARE status_cd_inerrornoview = f8 WITH constant (uar_get_code_by ("MEANING" ,8 ,"INERRNOVIEW" )
  )
 DECLARE check_date = vc
 DECLARE totalcnt = i4
 SELECT INTO "nl:"
  FROM (person p )
  PLAN (p
   WHERE (p.person_id = reqinfo->updt_id ) )
  DETAIL
   who_running = p.person_id ,
   who_running_name = p.name_full_formatted
  WITH nocounter
 ;end select
 DECLARE prov_parser = vc WITH public ,noconstant ("" )
 IF (( $PROVIDER_PROMPT != 0 ) )
  SET prov_parser = getpromptlist (3 ,"dr_prsnl.person_id" )
 ELSE
  DECLARE pos_val = f8
  SET pos_val =  $POS_PROMPT
  SET prov_parser = " dr_prsnl.position_cd = pos_val "
 ENDIF
 SELECT INTO  $OUTDEV
  display_org = substring (1 ,40 ,o.org_name ) ,
  display_loc = substring (1 ,40 ,uar_get_code_display (e.loc_facility_cd ) ) ,
  display_dr = substring (1 ,25 ,dr_prsnl.name_full_formatted ) ,
  display_pat = substring (1 ,25 ,encntr_per.name_full_formatted ) ,
  display_note = substring (1 ,20 ,s.title ) ,
  display_date = format (cep.action_dt_tm ,"MM/DD/YY;;d" ) ,
  note_date = format (s.active_status_dt_tm ,"YYYYMMDD;;D" ) ,
  display_mrn = substring (1 ,10 ,pa.alias ) ,
  display_encntr = format (e.encntr_id ,"########" ) ,
  display_crdate = format (s.active_status_dt_tm ,"MM/DD/YY;;d" ) ,
  display_fin = concat ("0" ,substring (1 ,11 ,ea.alias ) )
  FROM (scd_story s ),
   (clinical_event ce ),
   (ce_event_prsnl cep ),
   (encounter e ),
   (location l ),
   (organization o ),
   (prsnl dr_prsnl ),
   (person encntr_per ),
   (person_alias pa ),
   (encntr_alias ea )
  PLAN (s
   WHERE (s.story_completion_status_cd = signed_cd )
   AND (s.story_type_cd = doc_type )
   AND (s.encounter_id > 1.0 )
   AND (s.updt_dt_tm BETWEEN cnvtdatetime (cnvtdate2 ( $FROM_DATE ,"MM/DD/YYYY" ) ,0 ) AND
   cnvtdatetime (cnvtdate2 ( $THRU_DATE ,"MM/DD/YYYY" ) ,235959 ) ) )
   JOIN (ce
   WHERE (ce.event_id = s.event_id )
   AND (ce.valid_until_dt_tm = cnvtdatetime ("31-DEC-2100 00:00:00" ) )
   AND NOT ((ce.result_status_cd IN (status_cd_inerror ,
   status_cd_inerrornomut ,
   status_cd_inerrornoview ) ) ) )
   JOIN (e
   WHERE (e.encntr_id = s.encounter_id ) )
   JOIN (l
   WHERE (l.location_cd = e.loc_facility_cd ) )
   JOIN (o
   WHERE (o.organization_id = l.organization_id ) )
   JOIN (cep
   WHERE (cep.event_id = s.event_id )
   AND (cep.action_type_cd = ce_signed )
   AND (format (cep.action_dt_tm ,"YYYYMMDD;;d" ) > " " )
   AND (format (cep.valid_until_dt_tm ,"YYYYMMDD;;d" ) > format (curdate ,"YYYYMMDD;;d" ) ) )
   JOIN (dr_prsnl
   WHERE (dr_prsnl.person_id = cep.action_prsnl_id )
   AND (dr_prsnl.active_ind = 1 )
   AND (dr_prsnl.physician_ind = 1 )
   AND parser (prov_parser ) )
   JOIN (encntr_per
   WHERE (encntr_per.person_id = e.person_id ) )
   JOIN (pa
   WHERE (pa.person_id = outerjoin (encntr_per.person_id ) )
   AND (pa.person_alias_type_cd = outerjoin (person_mrn_alias_cd ) )
   AND (pa.active_ind = outerjoin (1 ) ) )
   JOIN (ea
   WHERE (ea.encntr_id = outerjoin (s.encounter_id ) )
   AND (ea.encntr_alias_type_cd = outerjoin (encntr_mrn_alias_cd ) )
   AND (ea.active_ind = outerjoin (1 ) ) )
  ORDER BY display_org ,
   display_loc ,
   display_dr ,
   display_pat ,
   note_date
  HEAD REPORT
   null
  HEAD PAGE
   row 1 ,
   col 1 ,
   "Signed Notes" ,
   row 1 ,
   col 90 ,
   "By: " ,
   row 1 ,
   col 94 ,
   who_running_name ,
   today = format (curdate ,"MM/DD/YY;;d" ) ,
   row 2 ,
   col 5 ,
   "Requested Dates:" ,
   row 2 ,
   col 22 ,
    $FROM_DATE ,
   row 2 ,
   col 33 ,
   "to" ,
   row 2 ,
   col 36 ,
    $THRU_DATE ,
   row 2 ,
   col 90 ,
   "Run:" ,
   row 2 ,
   col 95 ,
   today ,
   now = format (curtime ,"hh:mm;;s" ) ,
   row 2 ,
   col 104 ,
   now ,
   row 3 ,
   col 90 ,
   "Page:" ,
   pge = trim (cnvtstring (curpage ) ,3 ) ,
   row 3 ,
   col 96 ,
   pge ,
   row + 1
  HEAD o.organization_id
   row + 1 ,col 1 ,"ORGANIZATION:" ,col 15 ,display_org ,row + 1
  HEAD e.loc_facility_cd
   col 5 ,"LOCATION:" ,col 15 ,display_loc ,row + 1 ,col 1 ,line2 ,row + 1 ,col 1 ,"Signed By" ,col
   27 ,"Patient Name" ,col 52 ,"MRN" ,col 65 ,"Encounter NBR" ,col 80 ,"Note Name" ,col 107 ,
   "Date Created" ,col 120 ,"Date Signed" ,row + 1 ,col 1 ,line
  DETAIL
   row + 1 ,
   col 1 ,
   display_dr ,
   col 27 ,
   display_pat ,
   col 52 ,
   display_mrn ,
   col 65 ,
   display_fin ,
   col 80 ,
   display_note ,
   col 107 ,
   display_crdate ,
   col 120 ,
   display_date ,
   did_we_print = "Y" ,
   totalcnt = (totalcnt + 1 ) ,
   row + 1
  FOOT  dr_prsnl.person_id
   null
  FOOT  e.loc_facility_cd
   null
  FOOT  o.organization_id
   null
  FOOT REPORT
   col 1 ,
   line2 ,
   row + 2 ,
   col 1 ,
   "Total:" ,
   count = trim (cnvtstring (totalcnt ) ,3 ) ,
   col 9 ,
   count ,
   row + 2 ,
   CALL center ("***** END OF REPORT *****" ,0 ,130 ) ,
   row + 1
  WITH nocounter ,outerjoin = d1
 ;end select
 IF ((did_we_print = "N" ) )
  SELECT INTO  $OUTDEV
   FROM (dummyt d )
   PLAN (d )
   DETAIL
    row 1 ,
    col 1 ,
    "Signed Notes" ,
    row 1 ,
    col 90 ,
    "By: " ,
    row 1 ,
    col 94 ,
    who_running_name ,
    today = format (curdate ,"MM/DD/YY;;d" ) ,
    row 2 ,
    col 5 ,
    "Requested Dates:" ,
    row 2 ,
    col 22 ,
     $FROM_DATE ,
    row 2 ,
    col 33 ,
    "to" ,
    row 2 ,
    col 36 ,
     $THRU_DATE ,
    row 2 ,
    col 90 ,
    "Run:" ,
    row 2 ,
    col 95 ,
    today ,
    now = format (curtime ,"hh:mm;;s" ) ,
    row 2 ,
    col 104 ,
    now ,
    row 3 ,
    col 90 ,
    "Page:" ,
    pge = trim (cnvtstring (curpage ) ,3 ) ,
    row 3 ,
    col 96 ,
    pge ,
    row + 3 ,
    col 10 ,
    "NO INFORMATION AVAILABLE" ,
    row + 2 ,
    CALL center ("***** END OF REPORT *****" ,0 ,130 )
   WITH nocounter ,dontcare = d
  ;end select
 ENDIF
END GO
